{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You implement this initialization process by defining "},{"type":"emphasis","inlineContent":[{"type":"text","text":"initializers"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are like special methods that can be called"},{"type":"text","text":" "},{"type":"text","text":"to create a new instance of a particular type."},{"type":"text","text":" "},{"type":"text","text":"Unlike Objective-C initializers, Swift initializers don’t return a value."},{"type":"text","text":" "},{"type":"text","text":"Their primary role is to ensure that new instances of a type"},{"type":"text","text":" "},{"type":"text","text":"are correctly initialized before they’re used for the first time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instances of class types can also implement a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which performs any custom cleanup just before an instance of that class is deallocated."},{"type":"text","text":" "},{"type":"text","text":"For more information about deinitializers, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization"},{"type":"text","text":"."}]},{"anchor":"Setting-Initial-Values-for-Stored-Properties","level":2,"type":"heading","text":"Setting Initial Values for Stored Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes and structures "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" set all of their stored properties"},{"type":"text","text":" "},{"type":"text","text":"to an appropriate initial value by the time"},{"type":"text","text":" "},{"type":"text","text":"an instance of that class or structure is created."},{"type":"text","text":" "},{"type":"text","text":"Stored properties can’t be left in an indeterminate state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can set an initial value for a stored property within an initializer,"},{"type":"text","text":" "},{"type":"text","text":"or by assigning a default property value as part of the property’s definition."},{"type":"text","text":" "},{"type":"text","text":"These actions are described in the following sections."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When you assign a default value to a stored property,"},{"type":"text","text":" "},{"type":"text","text":"or set its initial value within an initializer,"},{"type":"text","text":" "},{"type":"text","text":"the value of that property is set directly,"},{"type":"text","text":" "},{"type":"text","text":"without calling any property observers."}]}],"type":"aside","name":"Note"},{"anchor":"Inicializadores","level":3,"type":"heading","text":"Inicializadores"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Inicializadores"}]},{"type":"text","text":" são chamados para criar uma nova instância de um tipo específico."},{"type":"text","text":" "},{"type":"text","text":"Em sua forma mais simples, um inicializador é como um método de instância sem parâmetros,"},{"type":"text","text":" "},{"type":"text","text":"escrito usando a palavra-chave "},{"type":"codeVoice","code":"init"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["init() {","   \/\/ perform some initialization here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O exemplo abaixo define uma nova estrutura chamada "},{"type":"codeVoice","code":"Fahrenheit"},{"type":"text","text":" "},{"type":"text","text":"para armazenar temperaturas expressas na escala Fahrenheit."},{"type":"text","text":" "},{"type":"text","text":"A estrutura "},{"type":"codeVoice","code":"Fahrenheit"},{"type":"text","text":" tem uma propriedade armazenada,"},{"type":"text","text":" "},{"type":"codeVoice","code":"temperature"},{"type":"text","text":", que é do tipo "},{"type":"codeVoice","code":"Double"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Fahrenheit {","   var temperature: Double","   init() {","      temperature = 32.0","   }","}","var f = Fahrenheit()","print(\"The default temperature is \\(f.temperature)° Fahrenheit\")","\/\/ Prints \"The default temperature is 32.0° Fahrenheit\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A estrutura define um único inicializador, "},{"type":"codeVoice","code":"init"},{"type":"text","text":", sem parâmetros,"},{"type":"text","text":" "},{"type":"text","text":"que inicializa a temperatura armazenada com um valor de "},{"type":"codeVoice","code":"32.0"},{"type":"text","text":" "},{"type":"text","text":"(o ponto de congelamento da água em graus Fahrenheit)."}]},{"anchor":"Default-Property-Values","level":3,"type":"heading","text":"Default Property Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can set the initial value of a stored property from within an initializer,"},{"type":"text","text":" "},{"type":"text","text":"as shown above."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, specify a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"default property value"}]},{"type":"text","text":" "},{"type":"text","text":"as part of the property’s declaration."},{"type":"text","text":" "},{"type":"text","text":"You specify a default property value by assigning an initial value to the property"},{"type":"text","text":" "},{"type":"text","text":"when it’s defined."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If a property always takes the same initial value,"},{"type":"text","text":" "},{"type":"text","text":"provide a default value rather than setting a value within an initializer."},{"type":"text","text":" "},{"type":"text","text":"The end result is the same,"},{"type":"text","text":" "},{"type":"text","text":"but the default value ties the property’s initialization more closely to its declaration."},{"type":"text","text":" "},{"type":"text","text":"It makes for shorter, clearer initializers"},{"type":"text","text":" "},{"type":"text","text":"and enables you to infer the type of the property from its default value."},{"type":"text","text":" "},{"type":"text","text":"The default value also makes it easier for you to take advantage of"},{"type":"text","text":" "},{"type":"text","text":"default initializers and initializer inheritance,"},{"type":"text","text":" "},{"type":"text","text":"as described later in this chapter."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can write the "},{"type":"codeVoice","code":"Fahrenheit"},{"type":"text","text":" structure from above in a simpler form"},{"type":"text","text":" "},{"type":"text","text":"by providing a default value for its "},{"type":"codeVoice","code":"temperature"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"at the point that the property is declared:"}]},{"type":"codeListing","syntax":"swift","code":["struct Fahrenheit {","   var temperature = 32.0","}"]},{"anchor":"Customizing-Initialization","level":2,"type":"heading","text":"Customizing Initialization"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can customize the initialization process"},{"type":"text","text":" "},{"type":"text","text":"with input parameters and optional property types,"},{"type":"text","text":" "},{"type":"text","text":"or by assigning constant properties during initialization,"},{"type":"text","text":" "},{"type":"text","text":"as described in the following sections."}]},{"anchor":"Parâmetros-de-Inicialização","level":3,"type":"heading","text":"Parâmetros de Inicialização"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode fornecer "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parâmetros de inicialização"}]},{"type":"text","text":" como parte da definição de um inicializador,"},{"type":"text","text":" "},{"type":"text","text":"para definir os tipos e nomes de valores que personalizam o processo de inicialização."},{"type":"text","text":" "},{"type":"text","text":"Os parâmetros de inicialização têm os mesmos recursos e sintaxe"},{"type":"text","text":" "},{"type":"text","text":"de parâmetros de funções e métodos."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O exemplo a seguir define uma estrutura chamada "},{"type":"codeVoice","code":"Celsius"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"que armazena temperaturas expressas em graus Celsius."},{"type":"text","text":" "},{"type":"text","text":"A estrutura "},{"type":"codeVoice","code":"Celsius"},{"type":"text","text":" implementa dois inicializadores personalizados chamados"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(fromFahrenheit:)"},{"type":"text","text":" e "},{"type":"codeVoice","code":"init(fromKelvin:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"que inicializam uma nova instância da estrutura"},{"type":"text","text":" "},{"type":"text","text":"com um valor de uma escala de temperatura diferente:"}]},{"type":"codeListing","syntax":"swift","code":["struct Celsius {","   var temperatureInCelsius: Double","   init(fromFahrenheit fahrenheit: Double) {","      temperatureInCelsius = (fahrenheit - 32.0) \/ 1.8","   }","   init(fromKelvin kelvin: Double) {","      temperatureInCelsius = kelvin - 273.15","   }","}","let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)","\/\/ boilingPointOfWater.temperatureInCelsius is 100.0","let freezingPointOfWater = Celsius(fromKelvin: 273.15)","\/\/ freezingPointOfWater.temperatureInCelsius is 0.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O primeiro inicializador tem um único parâmetro de inicialização"},{"type":"text","text":" "},{"type":"text","text":"com argumento de título "},{"type":"codeVoice","code":"fromFahrenheit"},{"type":"text","text":" e um nome de parâmetro "},{"type":"codeVoice","code":"fahrenheit"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O segundo inicializador tem um único parâmetro de inicialização"},{"type":"text","text":" "},{"type":"text","text":"com argumento de título "},{"type":"codeVoice","code":"fromKelvin"},{"type":"text","text":" e um nome de parâmetro  "},{"type":"codeVoice","code":"kelvin"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Os dois inicializadores convertem seus únicos argumentos no"},{"type":"text","text":" "},{"type":"text","text":"valor Celsius correspondente"},{"type":"text","text":" "},{"type":"text","text":"e armazenam esse valor numa propriedade chamada "},{"type":"codeVoice","code":"temperatureInCelsius"},{"type":"text","text":"."}]},{"anchor":"Parameter-Names-and-Argument-Labels","level":3,"type":"heading","text":"Parameter Names and Argument Labels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with function and method parameters,"},{"type":"text","text":" "},{"type":"text","text":"initialization parameters can have both a parameter name"},{"type":"text","text":" "},{"type":"text","text":"for use within the initializer’s body"},{"type":"text","text":" "},{"type":"text","text":"and an argument label for use when calling the initializer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, initializers don’t have an identifying function name before their parentheses"},{"type":"text","text":" "},{"type":"text","text":"in the way that functions and methods do."},{"type":"text","text":" "},{"type":"text","text":"Therefore, the names and types of an initializer’s parameters"},{"type":"text","text":" "},{"type":"text","text":"play a particularly important role in identifying which initializer should be called."},{"type":"text","text":" "},{"type":"text","text":"Because of this, Swift provides an automatic argument label"},{"type":"text","text":" "},{"type":"text","text":"for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"every"}]},{"type":"text","text":" parameter in an initializer if you don’t provide one."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a structure called "},{"type":"codeVoice","code":"Color"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with three constant properties called "},{"type":"codeVoice","code":"red"},{"type":"text","text":", "},{"type":"codeVoice","code":"green"},{"type":"text","text":", and "},{"type":"codeVoice","code":"blue"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These properties store a value between "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"1.0"},{"type":"text","text":" "},{"type":"text","text":"to indicate the amount of red, green, and blue in the color."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Color"},{"type":"text","text":" provides an initializer with"},{"type":"text","text":" "},{"type":"text","text":"three appropriately named parameters of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" "},{"type":"text","text":"for its red, green, and blue components."},{"type":"text","text":" "},{"type":"codeVoice","code":"Color"},{"type":"text","text":" also provides a second initializer with a single "},{"type":"codeVoice","code":"white"},{"type":"text","text":" parameter,"},{"type":"text","text":" "},{"type":"text","text":"which is used to provide the same value for all three color components."}]},{"type":"codeListing","syntax":"swift","code":["struct Color {","   let red, green, blue: Double","   init(red: Double, green: Double, blue: Double) {","      self.red   = red","      self.green = green","      self.blue  = blue","   }","   init(white: Double) {","      red   = white","      green = white","      blue  = white","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both initializers can be used to create a new "},{"type":"codeVoice","code":"Color"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"by providing named values for each initializer parameter:"}]},{"type":"codeListing","syntax":"swift","code":["let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)","let halfGray = Color(white: 0.5)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that it isn’t possible to call these initializers"},{"type":"text","text":" "},{"type":"text","text":"without using argument labels."},{"type":"text","text":" "},{"type":"text","text":"Argument labels must always be used in an initializer if they’re defined,"},{"type":"text","text":" "},{"type":"text","text":"and omitting them is a compile-time error:"}]},{"type":"codeListing","syntax":"swift","code":["let veryGreen = Color(0.0, 1.0, 0.0)","\/\/ this reports a compile-time error - argument labels are required"]},{"anchor":"Initializer-Parameters-Without-Argument-Labels","level":3,"type":"heading","text":"Initializer Parameters Without Argument Labels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t want to use an argument label for an initializer parameter,"},{"type":"text","text":" "},{"type":"text","text":"write an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") instead of an explicit argument label for that parameter"},{"type":"text","text":" "},{"type":"text","text":"to override the default behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an expanded version of the "},{"type":"codeVoice","code":"Celsius"},{"type":"text","text":" example"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"text","text":"doc:Initialization#Initialization-Parameters"},{"type":"text","text":" above,"},{"type":"text","text":" "},{"type":"text","text":"with an additional initializer to create a new "},{"type":"codeVoice","code":"Celsius"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"from a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value that’s already in the Celsius scale:"}]},{"type":"codeListing","syntax":"swift","code":["struct Celsius {","   var temperatureInCelsius: Double","   init(fromFahrenheit fahrenheit: Double) {","      temperatureInCelsius = (fahrenheit - 32.0) \/ 1.8","   }","   init(fromKelvin kelvin: Double) {","      temperatureInCelsius = kelvin - 273.15","   }","   init(_ celsius: Double) {","      temperatureInCelsius = celsius","   }","}","let bodyTemperature = Celsius(37.0)","\/\/ bodyTemperature.temperatureInCelsius is 37.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The initializer call "},{"type":"codeVoice","code":"Celsius(37.0)"},{"type":"text","text":" is clear in its intent"},{"type":"text","text":" "},{"type":"text","text":"without the need for an argument label."},{"type":"text","text":" "},{"type":"text","text":"It’s therefore appropriate to write this initializer as "},{"type":"codeVoice","code":"init(_ celsius: Double)"},{"type":"text","text":" "},{"type":"text","text":"so that it can be called by providing an unnamed "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value."}]},{"anchor":"Optional-Property-Types","level":3,"type":"heading","text":"Optional Property Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your custom type has a stored property that’s logically allowed to have “no value” —"},{"type":"text","text":" "},{"type":"text","text":"perhaps because its value can’t be set during initialization,"},{"type":"text","text":" "},{"type":"text","text":"or because it’s allowed to have “no value” at some later point —"},{"type":"text","text":" "},{"type":"text","text":"declare the property with an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"Properties of optional type are automatically initialized with a value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"indicating that the property is deliberately intended to have “no value yet”"},{"type":"text","text":" "},{"type":"text","text":"during initialization."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a class called "},{"type":"codeVoice","code":"SurveyQuestion"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with an optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"response"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class SurveyQuestion {","   var text: String","   var response: String?","   init(text: String) {","      self.text = text","   }","   func ask() {","      print(text)","   }","}","let cheeseQuestion = SurveyQuestion(text: \"Do you like cheese?\")","cheeseQuestion.ask()","\/\/ Prints \"Do you like cheese?\"","cheeseQuestion.response = \"Yes, I do like cheese.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The response to a survey question can’t be known until it’s asked,"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"response"},{"type":"text","text":" property is declared with a type of "},{"type":"codeVoice","code":"String?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":"”."},{"type":"text","text":" "},{"type":"text","text":"It’s automatically assigned a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", meaning “no string yet”,"},{"type":"text","text":" "},{"type":"text","text":"when a new instance of "},{"type":"codeVoice","code":"SurveyQuestion"},{"type":"text","text":" is initialized."}]},{"anchor":"Atribuindo-propriedades-constantes-durante-a-inicialização","level":3,"type":"heading","text":"Atribuindo propriedades constantes durante a inicialização"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode atribuir um valor a uma propriedade constante"},{"type":"text","text":" "},{"type":"text","text":"a qualquer momento durante a inicialização,"},{"type":"text","text":" "},{"type":"text","text":"contanto que seja atribuido um valor definitivo no momento em que a inicialização terminar."},{"type":"text","text":" "},{"type":"text","text":"Uma vez que uma propriedade constante recebe um valor,"},{"type":"text","text":" "},{"type":"text","text":"não pode ser mais modificado."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Para instâncias de classe,"},{"type":"text","text":" "},{"type":"text","text":"uma propriedade constante pode ser modificada durante a inicialização"},{"type":"text","text":" "},{"type":"text","text":"apenas pela classe que o apresenta."},{"type":"text","text":" "},{"type":"text","text":"Não pode ser modificado por uma subclasse."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode revisar o exemplo "},{"type":"codeVoice","code":"SurveyQuestion"},{"type":"text","text":" acima para usar"},{"type":"text","text":" "},{"type":"text","text":"uma propriedade constante em vez de uma propriedade variável para a propriedade "},{"type":"codeVoice","code":"text"},{"type":"text","text":" da pergunta,"},{"type":"text","text":" "},{"type":"text","text":"para indicar que a pergunta não muda depois que uma instância de "},{"type":"codeVoice","code":"SurveyQuestion"},{"type":"text","text":" é criada."},{"type":"text","text":" "},{"type":"text","text":"Mesmo que a propriedade "},{"type":"codeVoice","code":"text"},{"type":"text","text":" seja agora uma constante,"},{"type":"text","text":" "},{"type":"text","text":"ele ainda pode ser definido no inicializador da classe:"}]},{"type":"codeListing","syntax":"swift","code":["class SurveyQuestion {","   let text: String","   var response: String?","   init(text: String) {","      self.text = text","   }","   func ask() {","      print(text)","   }","}","let beetsQuestion = SurveyQuestion(text: \"How about beets?\")","beetsQuestion.ask()","\/\/ Imprime \"How about beets?\"","beetsQuestion.response = \"I also like beets. (But not with cheese.)\""]},{"anchor":"Inicializadores-padrão","level":2,"type":"heading","text":"Inicializadores padrão"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift fornece um "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inicializador padrão"}]},{"type":"text","text":" "},{"type":"text","text":"para qualquer estrutura ou classe"},{"type":"text","text":" "},{"type":"text","text":"que fornece valores padrão para todas as suas propriedades"},{"type":"text","text":" "},{"type":"text","text":"e não fornece pelo menos um inicializador."},{"type":"text","text":" "},{"type":"text","text":"O inicializador padrão simplesmente cria uma nova instância"},{"type":"text","text":" "},{"type":"text","text":"com todas as suas propriedades definidas para seus valores padrão."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Este exemplo define uma classe chamada "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"que encapsula o nome, a quantidade e o estado de compra"},{"type":"text","text":" "},{"type":"text","text":"de um item em uma lista de compras:"}]},{"type":"codeListing","syntax":"swift","code":["class ShoppingListItem {","   var name: String?","   var quantity = 1","   var purchased = false","}","var item = ShoppingListItem()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Como todas as propriedades da classe "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" têm valores padrão,"},{"type":"text","text":" "},{"type":"text","text":"e porque é uma classe base sem superclasse,"},{"type":"text","text":" "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" ganha automaticamente uma implementação de inicializador padrão"},{"type":"text","text":" "},{"type":"text","text":"que cria uma nova instância com todas as suas propriedades definidas com seus valores padrão."},{"type":"text","text":" "},{"type":"text","text":"(A propriedade "},{"type":"codeVoice","code":"name"},{"type":"text","text":" é uma propriedade opcional "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e assim ele recebe automaticamente um valor padrão de "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"mesmo que esse valor não esteja escrito no código.)"},{"type":"text","text":" "},{"type":"text","text":"O exemplo acima usa o inicializador padrão para a classe "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" "},{"type":"text","text":"para criar uma nova instância da classe com a sintaxe do inicializador,"},{"type":"text","text":" "},{"type":"text","text":"escrito como "},{"type":"codeVoice","code":"ShoppingListItem()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e atribui esta nova instância a uma variável chamada "},{"type":"codeVoice","code":"item"},{"type":"text","text":"."}]},{"anchor":"Memberwise-Initializers-for-Structure-Types","level":3,"type":"heading","text":"Memberwise Initializers for Structure Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structure types automatically receive a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"memberwise initializer"}]},{"type":"text","text":" "},{"type":"text","text":"if they don’t define any of their own custom initializers."},{"type":"text","text":" "},{"type":"text","text":"Unlike a default initializer,"},{"type":"text","text":" "},{"type":"text","text":"the structure receives a memberwise initializer"},{"type":"text","text":" "},{"type":"text","text":"even if it has stored properties that don’t have default values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The memberwise initializer is a shorthand way"},{"type":"text","text":" "},{"type":"text","text":"to initialize the member properties of new structure instances."},{"type":"text","text":" "},{"type":"text","text":"Initial values for the properties of the new instance"},{"type":"text","text":" "},{"type":"text","text":"can be passed to the memberwise initializer by name."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" "},{"type":"text","text":"with two properties called "},{"type":"codeVoice","code":"width"},{"type":"text","text":" and "},{"type":"codeVoice","code":"height"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Both properties are inferred to be of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" "},{"type":"text","text":"by assigning a default value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" structure automatically receives an "},{"type":"codeVoice","code":"init(width:height:)"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer,"},{"type":"text","text":" "},{"type":"text","text":"which you can use to initialize a new "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["struct Size {","   var width = 0.0, height = 0.0","}","let twoByTwo = Size(width: 2.0, height: 2.0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you call a memberwise initializer,"},{"type":"text","text":" "},{"type":"text","text":"you can omit values for any properties"},{"type":"text","text":" "},{"type":"text","text":"that have default values."},{"type":"text","text":" "},{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" structure has a default value"},{"type":"text","text":" "},{"type":"text","text":"for both its "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" properties."},{"type":"text","text":" "},{"type":"text","text":"You can omit either property or both properties,"},{"type":"text","text":" "},{"type":"text","text":"and the initializer uses the default value for anything you omit."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let zeroByTwo = Size(height: 2.0)","print(zeroByTwo.width, zeroByTwo.height)","\/\/ Prints \"0.0 2.0\"","","let zeroByZero = Size()","print(zeroByZero.width, zeroByZero.height)","\/\/ Prints \"0.0 0.0\""]},{"anchor":"Initializer-Delegation-for-Value-Types","level":2,"type":"heading","text":"Initializer Delegation for Value Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializers can call other initializers to perform part of an instance’s initialization."},{"type":"text","text":" "},{"type":"text","text":"This process, known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"initializer delegation"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"avoids duplicating code across multiple initializers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The rules for how initializer delegation works,"},{"type":"text","text":" "},{"type":"text","text":"and for what forms of delegation are allowed,"},{"type":"text","text":" "},{"type":"text","text":"are different for value types and class types."},{"type":"text","text":" "},{"type":"text","text":"Value types (structures and enumerations) don’t support inheritance,"},{"type":"text","text":" "},{"type":"text","text":"and so their initializer delegation process is relatively simple,"},{"type":"text","text":" "},{"type":"text","text":"because they can only delegate to another initializer that they provide themselves."},{"type":"text","text":" "},{"type":"text","text":"Classes, however, can inherit from other classes,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means that classes have additional responsibilities for ensuring that"},{"type":"text","text":" "},{"type":"text","text":"all stored properties they inherit are assigned a suitable value during initialization."},{"type":"text","text":" "},{"type":"text","text":"These responsibilities are described in"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Class-Inheritance-and-Initialization"},{"type":"text","text":" below."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For value types, you use "},{"type":"codeVoice","code":"self.init"},{"type":"text","text":" to refer to other initializers"},{"type":"text","text":" "},{"type":"text","text":"from the same value type when writing your own custom initializers."},{"type":"text","text":" "},{"type":"text","text":"You can call "},{"type":"codeVoice","code":"self.init"},{"type":"text","text":" only from within an initializer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that if you define a custom initializer for a value type,"},{"type":"text","text":" "},{"type":"text","text":"you will no longer have access to the default initializer"},{"type":"text","text":" "},{"type":"text","text":"(or the memberwise initializer, if it’s a structure) for that type."},{"type":"text","text":" "},{"type":"text","text":"This constraint prevents a situation in which additional essential setup"},{"type":"text","text":" "},{"type":"text","text":"provided in a more complex initializer"},{"type":"text","text":" "},{"type":"text","text":"is accidentally circumvented by someone using one of the automatic initializers."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want your custom value type to be initializable with"},{"type":"text","text":" "},{"type":"text","text":"the default initializer and memberwise initializer,"},{"type":"text","text":" "},{"type":"text","text":"and also with your own custom initializers,"},{"type":"text","text":" "},{"type":"text","text":"write your custom initializers in an extension"},{"type":"text","text":" "},{"type":"text","text":"rather than as part of the value type’s original implementation."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a custom "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure to represent a geometric rectangle."},{"type":"text","text":" "},{"type":"text","text":"The example requires two supporting structures called "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Point"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"both of which provide default values of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" for all of their properties:"}]},{"type":"codeListing","syntax":"swift","code":["struct Size {","   var width = 0.0, height = 0.0","}","struct Point {","   var x = 0.0, y = 0.0","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can initialize the "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure below in one of three ways —"},{"type":"text","text":" "},{"type":"text","text":"by using its default zero-initialized "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"size"},{"type":"text","text":" property values,"},{"type":"text","text":" "},{"type":"text","text":"by providing a specific origin point and size,"},{"type":"text","text":" "},{"type":"text","text":"or by providing a specific center point and size."},{"type":"text","text":" "},{"type":"text","text":"These initialization options are represented by"},{"type":"text","text":" "},{"type":"text","text":"three custom initializers that are part of the "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure’s definition:"}]},{"type":"codeListing","syntax":"swift","code":["struct Rect {","   var origin = Point()","   var size = Size()","   init() {}","   init(origin: Point, size: Size) {","      self.origin = origin","      self.size = size","   }","   init(center: Point, size: Size) {","      let originX = center.x - (size.width \/ 2)","      let originY = center.y - (size.height \/ 2)","      self.init(origin: Point(x: originX, y: originY), size: size)","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" initializer, "},{"type":"codeVoice","code":"init()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"is functionally the same as the default initializer that the structure would have received"},{"type":"text","text":" "},{"type":"text","text":"if it didn’t have its own custom initializers."},{"type":"text","text":" "},{"type":"text","text":"This initializer has an empty body,"},{"type":"text","text":" "},{"type":"text","text":"represented by an empty pair of curly braces "},{"type":"codeVoice","code":"{}"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Calling this initializer returns a "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" instance whose"},{"type":"text","text":" "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"size"},{"type":"text","text":" properties are both initialized with"},{"type":"text","text":" "},{"type":"text","text":"the default values of "},{"type":"codeVoice","code":"Point(x: 0.0, y: 0.0)"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"Size(width: 0.0, height: 0.0)"},{"type":"text","text":" "},{"type":"text","text":"from their property definitions:"}]},{"type":"codeListing","syntax":"swift","code":["let basicRect = Rect()","\/\/ basicRect's origin is (0.0, 0.0) and its size is (0.0, 0.0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" initializer, "},{"type":"codeVoice","code":"init(origin:size:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"is functionally the same as the memberwise initializer that the structure would have received"},{"type":"text","text":" "},{"type":"text","text":"if it didn’t have its own custom initializers."},{"type":"text","text":" "},{"type":"text","text":"This initializer simply assigns the "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"size"},{"type":"text","text":" argument values to"},{"type":"text","text":" "},{"type":"text","text":"the appropriate stored properties:"}]},{"type":"codeListing","syntax":"swift","code":["let originRect = Rect(origin: Point(x: 2.0, y: 2.0),","   size: Size(width: 5.0, height: 5.0))","\/\/ originRect's origin is (2.0, 2.0) and its size is (5.0, 5.0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" initializer, "},{"type":"codeVoice","code":"init(center:size:)"},{"type":"text","text":", is slightly more complex."},{"type":"text","text":" "},{"type":"text","text":"It starts by calculating an appropriate origin point based on"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"center"},{"type":"text","text":" point and a "},{"type":"codeVoice","code":"size"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"It then calls (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegates"}]},{"type":"text","text":") to the "},{"type":"codeVoice","code":"init(origin:size:)"},{"type":"text","text":" initializer,"},{"type":"text","text":" "},{"type":"text","text":"which stores the new origin and size values in the appropriate properties:"}]},{"type":"codeListing","syntax":"swift","code":["let centerRect = Rect(center: Point(x: 4.0, y: 4.0),","   size: Size(width: 3.0, height: 3.0))","\/\/ centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init(center:size:)"},{"type":"text","text":" initializer could have assigned"},{"type":"text","text":" "},{"type":"text","text":"the new values of "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"size"},{"type":"text","text":" to the appropriate properties itself."},{"type":"text","text":" "},{"type":"text","text":"However, it’s more convenient (and clearer in intent)"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"codeVoice","code":"init(center:size:)"},{"type":"text","text":" initializer to take advantage of an existing initializer"},{"type":"text","text":" "},{"type":"text","text":"that already provides exactly that functionality."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For an alternative way to write this example without defining"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"init(origin:size:)"},{"type":"text","text":" initializers yourself,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Herança-e-Inicialização-de-Classe","level":2,"type":"heading","text":"Herança e Inicialização de Classe"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Todas as propriedades armazenadas de uma classe —"},{"type":"text","text":" "},{"type":"text","text":"incluindo quaisquer propriedades que a classe herda de sua superclasse —"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deve"}]},{"type":"text","text":" ser atribuído um valor inicial durante a inicialização."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift define dois tipos de inicializadores para tipos de classe"},{"type":"text","text":" "},{"type":"text","text":"para ajudar a garantir que todas as propriedades armazenadas recebam um valor inicial."},{"type":"text","text":" "},{"type":"text","text":"Eles são conhecidos como inicializadores designados e inicializadores de conveniência."}]},{"anchor":"Inicializadores-designados-e-inicializadores-de-conveniência","level":3,"type":"heading","text":"Inicializadores designados e inicializadores de conveniência"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Inicializadores designados"}]},{"type":"text","text":" são os inicializadores primários de uma classe."},{"type":"text","text":" "},{"type":"text","text":"Um inicializador designado inicializa todas as propriedades introduzidas por essa classe"},{"type":"text","text":" "},{"type":"text","text":"e chama um inicializador de superclasse apropriado"},{"type":"text","text":" "},{"type":"text","text":"para continuar o processo de inicialização na cadeia de superclasses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As classes tendem a ter muito poucos inicializadores designados,"},{"type":"text","text":" "},{"type":"text","text":"e é bastante comum que uma classe tenha apenas um."},{"type":"text","text":" "},{"type":"text","text":"Inicializadores designados são pontos de “funil” através dos quais a inicialização ocorre,"},{"type":"text","text":" "},{"type":"text","text":"e através do qual o processo de inicialização continua na cadeia da superclasse."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Toda classe deve ter pelo menos um inicializador designado."},{"type":"text","text":" "},{"type":"text","text":"Em alguns casos, este requisito é satisfeito"},{"type":"text","text":" "},{"type":"text","text":"herdando um ou mais inicializadores designados de uma superclasse,"},{"type":"text","text":" "},{"type":"text","text":"conforme descrito em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Automatic-Initializer-Inheritance"},{"type":"text","text":" abaixo."}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Inicializadores de conveniência"}]},{"type":"text","text":" são secundários, fornecendo suporte para os inicializadores para uma classe."},{"type":"text","text":" "},{"type":"text","text":"Você pode definir um inicializador de conveniência para chamar um inicializador designado"},{"type":"text","text":" "},{"type":"text","text":"da mesma classe que o inicializador de conveniência"},{"type":"text","text":" "},{"type":"text","text":"com alguns dos parâmetros do inicializador designados definidos com valores padrão."},{"type":"text","text":" "},{"type":"text","text":"Você também pode definir um inicializador de conveniência para criar"},{"type":"text","text":" "},{"type":"text","text":"uma instância dessa classe para um caso de uso específico ou tipo de valor de entrada."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você não precisa fornecer inicializadores de conveniência se sua classe não os exigir."},{"type":"text","text":" "},{"type":"text","text":"Crie inicializadores de conveniência quando um atalho para um padrão de inicialização comum"},{"type":"text","text":" "},{"type":"text","text":"fará você economizar tempo ou tornará a inicialização da classe mais clara na intenção."}]},{"anchor":"Sintaxe-para-inicializadores-designados-e-de-conveniência","level":3,"type":"heading","text":"Sintaxe para inicializadores designados e de conveniência"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inicializadores designados para classes são escritos da mesma maneira que"},{"type":"text","text":" "},{"type":"text","text":"inicializadores simples para tipos de valor:"}]},{"type":"codeListing","syntax":"markdown","code":["init(<#parameters#>) {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Os inicializadores de conveniência são escritos no mesmo estilo,"},{"type":"text","text":" "},{"type":"text","text":"mas com o modificador "},{"type":"codeVoice","code":"_convenience_"},{"type":"text","text":" colocado antes da palavra-chave "},{"type":"codeVoice","code":"_init_"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"separados por um espaço:"}]},{"type":"codeListing","syntax":"markdown","code":["convenience init(<#parameters#>) {","   <#statements#>","}"]},{"anchor":"Initializer-Delegation-for-Class-Types","level":3,"type":"heading","text":"Initializer Delegation for Class Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To simplify the relationships between designated and convenience initializers,"},{"type":"text","text":" "},{"type":"text","text":"Swift applies the following three rules for delegation calls between initializers:"}]},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A designated initializer must call a designated initializer from its immediate superclass."}]}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Rule 1"}]}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A convenience initializer must call another initializer from the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"same"}]},{"type":"text","text":" class."}]}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Rule 2"}]}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A convenience initializer must ultimately call a designated initializer."}]}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Rule 3"}]}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A simple way to remember this is:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Designated initializers must always delegate "},{"type":"emphasis","inlineContent":[{"type":"text","text":"up"}]},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Convenience initializers must always delegate "},{"type":"emphasis","inlineContent":[{"type":"text","text":"across"}]},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These rules are illustrated in the figure below:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"initializerDelegation01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, the superclass has a single designated initializer and two convenience initializers."},{"type":"text","text":" "},{"type":"text","text":"One convenience initializer calls another convenience initializer,"},{"type":"text","text":" "},{"type":"text","text":"which in turn calls the single designated initializer."},{"type":"text","text":" "},{"type":"text","text":"This satisfies rules 2 and 3 from above."},{"type":"text","text":" "},{"type":"text","text":"The superclass doesn’t itself have a further superclass, and so rule 1 doesn’t apply."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The subclass in this figure has two designated initializers and one convenience initializer."},{"type":"text","text":" "},{"type":"text","text":"The convenience initializer must call one of the two designated initializers,"},{"type":"text","text":" "},{"type":"text","text":"because it can only call another initializer from the same class."},{"type":"text","text":" "},{"type":"text","text":"This satisfies rules 2 and 3 from above."},{"type":"text","text":" "},{"type":"text","text":"Both designated initializers must call the single designated initializer"},{"type":"text","text":" "},{"type":"text","text":"from the superclass, to satisfy rule 1 from above."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These rules don’t affect how users of your classes "},{"type":"emphasis","inlineContent":[{"type":"text","text":"create"}]},{"type":"text","text":" instances of each class."},{"type":"text","text":" "},{"type":"text","text":"Any initializer in the diagram above can be used to create"},{"type":"text","text":" "},{"type":"text","text":"a fully initialized instance of the class they belong to."},{"type":"text","text":" "},{"type":"text","text":"The rules only affect how you write the implementation of the class’s initializers."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below shows a more complex class hierarchy for four classes."},{"type":"text","text":" "},{"type":"text","text":"It illustrates how the designated initializers in this hierarchy"},{"type":"text","text":" "},{"type":"text","text":"act as “funnel” points for class initialization,"},{"type":"text","text":" "},{"type":"text","text":"simplifying the interrelationships among classes in the chain:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"initializerDelegation02"}]},{"anchor":"Two-Phase-Initialization","level":3,"type":"heading","text":"Two-Phase Initialization"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Class initialization in Swift is a two-phase process."},{"type":"text","text":" "},{"type":"text","text":"In the first phase, each stored property is assigned an initial value"},{"type":"text","text":" "},{"type":"text","text":"by the class that introduced it."},{"type":"text","text":" "},{"type":"text","text":"Once the initial state for every stored property has been determined,"},{"type":"text","text":" "},{"type":"text","text":"the second phase begins,"},{"type":"text","text":" "},{"type":"text","text":"and each class is given the opportunity to customize its stored properties further"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is considered ready for use."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The use of a two-phase initialization process makes initialization safe,"},{"type":"text","text":" "},{"type":"text","text":"while still giving complete flexibility to each class in a class hierarchy."},{"type":"text","text":" "},{"type":"text","text":"Two-phase initialization prevents property values"},{"type":"text","text":" "},{"type":"text","text":"from being accessed before they’re initialized,"},{"type":"text","text":" "},{"type":"text","text":"and prevents property values from being set to a different value"},{"type":"text","text":" "},{"type":"text","text":"by another initializer unexpectedly."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s two-phase initialization process is similar to initialization in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"The main difference is that during phase 1,"},{"type":"text","text":" "},{"type":"text","text":"Objective-C assigns zero or null values (such as "},{"type":"codeVoice","code":"0"},{"type":"text","text":" or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":") to every property."},{"type":"text","text":" "},{"type":"text","text":"Swift’s initialization flow is more flexible"},{"type":"text","text":" "},{"type":"text","text":"in that it lets you set custom initial values,"},{"type":"text","text":" "},{"type":"text","text":"and can cope with types for which "},{"type":"codeVoice","code":"0"},{"type":"text","text":" or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" isn’t a valid default value."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s compiler performs four helpful safety-checks to make sure that"},{"type":"text","text":" "},{"type":"text","text":"two-phase initialization is completed without error:"}]},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A designated initializer must ensure that all of the properties introduced by its class are initialized before it delegates up to a superclass initializer."}]}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safety check 1"}]}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"type":"text","text":"the memory for an object is only considered fully initialized"},{"type":"text","text":" "},{"type":"text","text":"once the initial state of all of its stored properties is known."},{"type":"text","text":" "},{"type":"text","text":"In order for this rule to be satisfied, a designated initializer must make sure that"},{"type":"text","text":" "},{"type":"text","text":"all of its own properties are initialized before it hands off up the chain."}]},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A designated initializer must delegate up to a superclass initializer before assigning a value to an inherited property. If it doesn’t, the new value the designated initializer assigns will be overwritten by the superclass as part of its own initialization."}]}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safety check 2"}]}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A convenience initializer must delegate to another initializer before assigning a value to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" property (including properties defined by the same class). If it doesn’t, the new value the convenience initializer assigns will be overwritten by its own class’s designated initializer."}]}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safety check 3"}]}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An initializer can’t call any instance methods, read the values of any instance properties, or refer to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" as a value until after the first phase of initialization is complete."}]}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safety check 4"}]}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The class instance isn’t fully valid until the first phase ends."},{"type":"text","text":" "},{"type":"text","text":"Properties can only be accessed, and methods can only be called,"},{"type":"text","text":" "},{"type":"text","text":"once the class instance is known to be valid at the end of the first phase."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how two-phase initialization plays out, based on the four safety checks above:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Phase 1"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A designated or convenience initializer is called on a class."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory for a new instance of that class is allocated."},{"type":"text","text":" "},{"type":"text","text":"The memory isn’t yet initialized."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A designated initializer for that class confirms that"},{"type":"text","text":" "},{"type":"text","text":"all stored properties introduced by that class have a value."},{"type":"text","text":" "},{"type":"text","text":"The memory for these stored properties is now initialized."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The designated initializer hands off to a superclass initializer to perform the same task"},{"type":"text","text":" "},{"type":"text","text":"for its own stored properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This continues up the class inheritance chain until the top of the chain is reached."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the top of the chain is reached,"},{"type":"text","text":" "},{"type":"text","text":"and the final class in the chain has ensured that all of its stored properties have a value,"},{"type":"text","text":" "},{"type":"text","text":"the instance’s memory is considered to be fully initialized, and phase 1 is complete."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Phase 2"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Working back down from the top of the chain,"},{"type":"text","text":" "},{"type":"text","text":"each designated initializer in the chain has the option to customize the instance further."},{"type":"text","text":" "},{"type":"text","text":"Initializers are now able to access "},{"type":"codeVoice","code":"self"},{"type":"text","text":" "},{"type":"text","text":"and can modify its properties, call its instance methods, and so on."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, any convenience initializers in the chain have the option"},{"type":"text","text":" "},{"type":"text","text":"to customize the instance and to work with "},{"type":"codeVoice","code":"self"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how phase 1 looks for an initialization call for a hypothetical subclass and superclass:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"twoPhaseInitialization01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, initialization begins with a call to"},{"type":"text","text":" "},{"type":"text","text":"a convenience initializer on the subclass."},{"type":"text","text":" "},{"type":"text","text":"This convenience initializer can’t yet modify any properties."},{"type":"text","text":" "},{"type":"text","text":"It delegates across to a designated initializer from the same class."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The designated initializer makes sure that all of the subclass’s properties have a value,"},{"type":"text","text":" "},{"type":"text","text":"as per safety check 1. It then calls a designated initializer on its superclass"},{"type":"text","text":" "},{"type":"text","text":"to continue the initialization up the chain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The superclass’s designated initializer makes sure that"},{"type":"text","text":" "},{"type":"text","text":"all of the superclass properties have a value."},{"type":"text","text":" "},{"type":"text","text":"There are no further superclasses to initialize,"},{"type":"text","text":" "},{"type":"text","text":"and so no further delegation is needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As soon as all properties of the superclass have an initial value,"},{"type":"text","text":" "},{"type":"text","text":"its memory is considered fully initialized, and phase 1 is complete."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how phase 2 looks for the same initialization call:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"twoPhaseInitialization02"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The superclass’s designated initializer now has an opportunity"},{"type":"text","text":" "},{"type":"text","text":"to customize the instance further"},{"type":"text","text":" "},{"type":"text","text":"(although it doesn’t have to)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the superclass’s designated initializer is finished,"},{"type":"text","text":" "},{"type":"text","text":"the subclass’s designated initializer can perform additional customization"},{"type":"text","text":" "},{"type":"text","text":"(although again, it doesn’t have to)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, once the subclass’s designated initializer is finished,"},{"type":"text","text":" "},{"type":"text","text":"the convenience initializer that was originally called"},{"type":"text","text":" "},{"type":"text","text":"can perform additional customization."}]},{"anchor":"Herança-e-sobrescrita-do-inicializador","level":3,"type":"heading","text":"Herança e sobrescrita do inicializador"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ao contrário das subclasses em Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"As subclasses Swift não herdam seus inicializadores de superclasse por padrão."},{"type":"text","text":" "},{"type":"text","text":"A abordagem do Swift evita a situação em que um inicializador simples de uma superclasse"},{"type":"text","text":" "},{"type":"text","text":"é herdado por uma subclasse mais especializada"},{"type":"text","text":" "},{"type":"text","text":"e é usado para criar uma nova instância da subclasse"},{"type":"text","text":" "},{"type":"text","text":"que não foi inicializado completa ou corretamente."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inicializadores de superclasse "},{"type":"emphasis","inlineContent":[{"type":"text","text":"são"}]},{"type":"text","text":" herdados em certas circunstâncias,"},{"type":"text","text":" "},{"type":"text","text":"mas apenas quando for seguro e apropriado fazê-lo."},{"type":"text","text":" "},{"type":"text","text":"Para obter mais informações, acesse "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Automatic-Initializer-Inheritance"},{"type":"text","text":" below."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você quiser que uma subclasse personalizada apresente"},{"type":"text","text":" "},{"type":"text","text":"um ou mais dos mesmos inicializadores que sua superclasse,"},{"type":"text","text":" "},{"type":"text","text":"você pode fornecer uma implementação personalizada desses inicializadores dentro da subclasse."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Quando você escreve um inicializador de subclasse que corresponde a um inicializador "},{"type":"emphasis","inlineContent":[{"type":"text","text":"designado"}]},{"type":"text","text":" da superclasse,"},{"type":"text","text":" "},{"type":"text","text":"você está efetivamente fornecendo uma sobrescrita desse inicializador designado."},{"type":"text","text":" "},{"type":"text","text":"Portanto, você deve escrever o modificador "},{"type":"codeVoice","code":"override"},{"type":"text","text":" antes da definição do inicializador da subclasse."},{"type":"text","text":" "},{"type":"text","text":"Isso é verdade mesmo se você estiver sobrescrevendo um inicializador padrão fornecido automaticamente,"},{"type":"text","text":" "},{"type":"text","text":"conforme descrito em "},{"type":"text","text":"doc:Initialization#Default-Initializers"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tal como acontece com uma propriedade, método ou subscript sobrescrito"},{"type":"text","text":" "},{"type":"text","text":"a presença do modificador "},{"type":"codeVoice","code":"override"},{"type":"text","text":" solicita ao Swift que verifique se"},{"type":"text","text":" "},{"type":"text","text":"a superclasse tem um inicializador designado correspondente a ser sobrescrito,"},{"type":"text","text":" "},{"type":"text","text":"e valida se os parâmetros do inicializador sobrescrito foram especificados conforme o esperado."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Você sempre escreve o modificador "},{"type":"codeVoice","code":"override"},{"type":"text","text":" ao sobrescrever um inicializador designado de superclasse,"},{"type":"text","text":" "},{"type":"text","text":"mesmo que a implementação do inicializador de sua subclasse seja um inicializador de conveniência."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Por outro lado, se você escrever um inicializador de subclasse que corresponda a um inicializador de superclasse "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conveniência"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"esse inicializador de conveniência da superclasse nunca pode ser chamado diretamente por sua subclasse,"},{"type":"text","text":" "},{"type":"text","text":"conforme as regras descritas acima em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Portanto, sua subclasse não está (estritamente falando) fornecendo uma sobrescrita do inicializador da superclasse."},{"type":"text","text":" "},{"type":"text","text":"Como resultado, você não escreve o modificador "},{"type":"codeVoice","code":"override"},{"type":"text","text":" ao fornecer"},{"type":"text","text":" "},{"type":"text","text":"uma implementação correspondente de um inicializador de conveniência de superclasse."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O exemplo abaixo define uma classe base chamada "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Esta classe base declara uma propriedade armazenada chamada "},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"com um valor padrão de "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" de "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A propriedade "},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":" é usada por uma propriedade computada chamada "},{"type":"codeVoice","code":"description"},{"type":"text","text":" "},{"type":"text","text":"para criar uma descrição "},{"type":"codeVoice","code":"String"},{"type":"text","text":" das características do veículo:"}]},{"type":"codeListing","syntax":"swift","code":["class Vehicle {","   var numberOfWheels = 0","   var description: String {","      return \"\\(numberOfWheels) wheel(s)\"","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A classe "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" fornece um valor padrão para sua única propriedade armazenada,"},{"type":"text","text":" "},{"type":"text","text":"e não fornece nenhum inicializador personalizado."},{"type":"text","text":" "},{"type":"text","text":"Como resultado, ele recebe automaticamente um inicializador padrão,"},{"type":"text","text":" "},{"type":"text","text":"conforme descrito em "},{"type":"text","text":"doc:Initialization#Default-Initializers"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O inicializador padrão (quando disponível) é sempre um inicializador designado para uma classe,"},{"type":"text","text":" "},{"type":"text","text":"e pode ser usado para criar uma nova instância "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" com um "},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":" de "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let vehicle = Vehicle()","print(\"Vehicle: \\(vehicle.description)\")","\/\/ Vehicle: 0 wheel(s)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O próximo exemplo define uma subclasse de "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" chamada "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Bicycle: Vehicle {","   override init() {","      super.init()","      numberOfWheels = 2","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subclasse "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" define um inicializador designado personalizado, "},{"type":"codeVoice","code":"init()"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Este inicializador designado corresponde a um inicializador designado da superclasse de "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e assim a versão "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" deste inicializador é marcada com o modificador "},{"type":"codeVoice","code":"override"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O inicializador "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" para "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" começa chamando "},{"type":"codeVoice","code":"super.init()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"que chama o inicializador padrão para a superclasse da classe "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":", "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Isso garante que a propriedade herdada "},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":" seja inicializada por "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" "},{"type":"text","text":"antes que "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" tenha a oportunidade de modificar a propriedade."},{"type":"text","text":" "},{"type":"text","text":"Depois de chamar "},{"type":"codeVoice","code":"super.init()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"o valor original de "},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":" é substituído por um novo valor de "},{"type":"codeVoice","code":"2"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você criar uma instância de "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"você pode chamar sua propriedade computada "},{"type":"codeVoice","code":"description"},{"type":"text","text":" herdada"},{"type":"text","text":" "},{"type":"text","text":"para ver como sua propriedade "},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":" foi atualizada:"}]},{"type":"codeListing","syntax":"swift","code":["let bicycle = Bicycle()","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: 2 wheel(s)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se um inicializador de subclasse não executa nenhuma personalização"},{"type":"text","text":" "},{"type":"text","text":"na fase 2 do processo de inicialização,"},{"type":"text","text":" "},{"type":"text","text":"e a superclasse tem um inicializador designado síncrono, com argumento zero,"},{"type":"text","text":" "},{"type":"text","text":"você pode omitir uma chamada para "},{"type":"codeVoice","code":"super.init()"},{"type":"text","text":" "},{"type":"text","text":"depois de atribuir valores a todas as propriedades armazenadas da subclasse."},{"type":"text","text":" "},{"type":"text","text":"Se o inicializador da superclasse for assíncrono,"},{"type":"text","text":" "},{"type":"text","text":"você precisa escrever "},{"type":"codeVoice","code":"await super.init()"},{"type":"text","text":" explicitamente."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Este exemplo define outra subclasse de "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":", chamada "},{"type":"codeVoice","code":"Hoverboard"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Em seu inicializador, a classe "},{"type":"codeVoice","code":"Hoverboard"},{"type":"text","text":" define apenas sua propriedade "},{"type":"codeVoice","code":"color"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Em vez de fazer uma chamada explícita para "},{"type":"codeVoice","code":"super.init()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"este inicializador depende de uma chamada implícita ao inicializador de sua superclasse"},{"type":"text","text":" "},{"type":"text","text":"para concluir o processo."}]},{"type":"codeListing","syntax":"swift","code":["class Hoverboard: Vehicle {","    var color: String","    init(color: String) {","        self.color = color","        \/\/ super.init() implicitly called here","    }","    override var description: String {","        return \"\\(super.description) in a beautiful \\(color)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Uma instância de "},{"type":"codeVoice","code":"Hoverboard"},{"type":"text","text":" usa o número padrão de rodas"},{"type":"text","text":" "},{"type":"text","text":"fornecido pelo inicializador "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let hoverboard = Hoverboard(color: \"silver\")","print(\"Hoverboard: \\(hoverboard.description)\")","\/\/ Hoverboard: 0 wheel(s) in a beautiful silver"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subclasses podem modificar propriedades de variáveis herdadas durante a inicialização,"},{"type":"text","text":" "},{"type":"text","text":"mas não pode modificar propriedades constantes herdadas."}]}],"type":"aside","name":"Nota"},{"anchor":"Automatic-Initializer-Inheritance","level":3,"type":"heading","text":"Automatic Initializer Inheritance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Como mencionado acima,"},{"type":"text","text":" "},{"type":"text","text":"subclasses não herdam seus inicializadores de superclasse por padrão."},{"type":"text","text":" "},{"type":"text","text":"No entanto, inicializadores de superclasses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"são"}]},{"type":"text","text":" herdados automaticamente se certas condições forem atendidas."},{"type":"text","text":" "},{"type":"text","text":"Na prática, isso significa que"},{"type":"text","text":" "},{"type":"text","text":"você não precisa escrever substituições de inicializador na maioria dos cenários,"},{"type":"text","text":" "},{"type":"text","text":"e pode herdar seus inicializadores de superclasse com esforço mínimo sempre que for seguro fazê-lo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Supondo que você forneça valores padrão para quaisquer novas propriedades introduzidas em uma subclasse,"},{"type":"text","text":" "},{"type":"text","text":"aplicam-se as duas regras seguintes:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"termo "},{"type":"strong","inlineContent":[{"type":"text","text":"Regra 1"}]},{"type":"text","text":": Se sua subclasse não definir nenhum inicializador designado,"},{"type":"text","text":" "},{"type":"text","text":"ela herda automaticamente todos os inicializadores designados pela superclasse."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"termo "},{"type":"strong","inlineContent":[{"type":"text","text":"Regra 2"}]},{"type":"text","text":": Se sua subclasse fornece uma implementação de"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"todos"}]},{"type":"text","text":" os inicializadores designados de superclasse —"},{"type":"text","text":" "},{"type":"text","text":"herdando-os de acordo com a regra 1,"},{"type":"text","text":" "},{"type":"text","text":"ou fornecendo uma implementação personalizada como parte de sua definição —"},{"type":"text","text":" "},{"type":"text","text":"então ele herda automaticamente todos os inicializadores de conveniência da superclasse."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These rules apply even if your subclass adds further convenience initializers."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Uma subclasse pode implementar um inicializador designado por superclasse"},{"type":"text","text":" "},{"type":"text","text":"como um inicializador de conveniência de subclasse como parte do cumprimento da regra 2."}]}],"type":"aside","name":"Nota"},{"anchor":"Designated-and-Convenience-Initializers-in-Action","level":3,"type":"heading","text":"Designated and Convenience Initializers in Action"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example shows designated initializers, convenience initializers,"},{"type":"text","text":" "},{"type":"text","text":"and automatic initializer inheritance in action."},{"type":"text","text":" "},{"type":"text","text":"This example defines a hierarchy of three classes called"},{"type":"text","text":" "},{"type":"codeVoice","code":"Food"},{"type":"text","text":", "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":", and "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and demonstrates how their initializers interact."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The base class in the hierarchy is called "},{"type":"codeVoice","code":"Food"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a simple class to encapsulate the name of a foodstuff."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class introduces a single "},{"type":"codeVoice","code":"String"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"name"},{"type":"text","text":" "},{"type":"text","text":"and provides two initializers for creating "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" instances:"}]},{"type":"codeListing","syntax":"swift","code":["class Food {","   var name: String","   init(name: String) {","      self.name = name","   }","   convenience init() {","      self.init(name: \"[Unnamed]\")","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below shows the initializer chain for the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"initializersExample01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes don’t have a default memberwise initializer,"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class provides a designated initializer"},{"type":"text","text":" "},{"type":"text","text":"that takes a single argument called "},{"type":"codeVoice","code":"name"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This initializer can be used to create a new "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" instance with a specific name:"}]},{"type":"codeListing","syntax":"swift","code":["let namedMeat = Food(name: \"Bacon\")","\/\/ namedMeat's name is \"Bacon\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" initializer from the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class"},{"type":"text","text":" "},{"type":"text","text":"is provided as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"designated"}]},{"type":"text","text":" initializer,"},{"type":"text","text":" "},{"type":"text","text":"because it ensures that all stored properties of"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" instance are fully initialized."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class doesn’t have a superclass,"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" initializer doesn’t need to call "},{"type":"codeVoice","code":"super.init()"},{"type":"text","text":" "},{"type":"text","text":"to complete its initialization."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class also provides a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"convenience"}]},{"type":"text","text":" initializer, "},{"type":"codeVoice","code":"init()"},{"type":"text","text":", with no arguments."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" initializer provides a default placeholder name for a new food"},{"type":"text","text":" "},{"type":"text","text":"by delegating across to the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class’s "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"[Unnamed]"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let mysteryMeat = Food()","\/\/ mysteryMeat's name is \"[Unnamed]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second class in the hierarchy is a subclass of "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" called "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" class models an ingredient in a cooking recipe."},{"type":"text","text":" "},{"type":"text","text":"It introduces an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" "},{"type":"text","text":"(in addition to the "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Food"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and defines two initializers for creating "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instances:"}]},{"type":"codeListing","syntax":"swift","code":["class RecipeIngredient: Food {","   var quantity: Int","   init(name: String, quantity: Int) {","      self.quantity = quantity","      super.init(name: name)","   }","   override convenience init(name: String) {","      self.init(name: name, quantity: 1)","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below shows the initializer chain for the "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" class:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"initializersExample02"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" class has a single designated initializer,"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(name: String, quantity: Int)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which can be used to populate all of the properties of a new "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"This initializer starts by assigning"},{"type":"text","text":" "},{"type":"text","text":"the passed "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" argument to the "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which is the only new property introduced by "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After doing so, the initializer delegates up to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" initializer of the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"This process satisfies safety check 1"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Two-Phase-Initialization"},{"type":"text","text":" above."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" also defines a convenience initializer, "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is used to create a "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instance by name alone."},{"type":"text","text":" "},{"type":"text","text":"This convenience initializer assumes a quantity of "},{"type":"codeVoice","code":"1"},{"type":"text","text":" "},{"type":"text","text":"for any "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instance that’s created without an explicit quantity."},{"type":"text","text":" "},{"type":"text","text":"The definition of this convenience initializer makes"},{"type":"text","text":" "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instances quicker and more convenient to create,"},{"type":"text","text":" "},{"type":"text","text":"and avoids code duplication when creating"},{"type":"text","text":" "},{"type":"text","text":"several single-quantity "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"This convenience initializer simply delegates across to the class’s designated initializer,"},{"type":"text","text":" "},{"type":"text","text":"passing in a "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" convenience initializer provided by "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" "},{"type":"text","text":"takes the same parameters as the "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"designated"}]},{"type":"text","text":" initializer from "},{"type":"codeVoice","code":"Food"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because this convenience initializer overrides a designated initializer from its superclass,"},{"type":"text","text":" "},{"type":"text","text":"it must be marked with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"(as described in "},{"type":"text","text":"doc:Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" provides"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" initializer as a convenience initializer,"},{"type":"text","text":" "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" has nonetheless provided an implementation of"},{"type":"text","text":" "},{"type":"text","text":"all of its superclass’s designated initializers."},{"type":"text","text":" "},{"type":"text","text":"Therefore, "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" automatically inherits"},{"type":"text","text":" "},{"type":"text","text":"all of its superclass’s convenience initializers too."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, the superclass for "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Food"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has a single convenience initializer called "},{"type":"codeVoice","code":"init()"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This initializer is therefore inherited by "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The inherited version of "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" functions in exactly the same way as the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" version,"},{"type":"text","text":" "},{"type":"text","text":"except that it delegates to the "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" version of "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" "},{"type":"text","text":"rather than the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" version."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All three of these initializers can be used to create new "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instances:"}]},{"type":"codeListing","syntax":"swift","code":["let oneMysteryItem = RecipeIngredient()","let oneBacon = RecipeIngredient(name: \"Bacon\")","let sixEggs = RecipeIngredient(name: \"Eggs\", quantity: 6)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third and final class in the hierarchy is"},{"type":"text","text":" "},{"type":"text","text":"a subclass of "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" called "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" class models a recipe ingredient as it appears in a shopping list."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every item in the shopping list starts out as “unpurchased”."},{"type":"text","text":" "},{"type":"text","text":"To represent this fact,"},{"type":"text","text":" "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" introduces a Boolean property called "},{"type":"codeVoice","code":"purchased"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" also adds a computed "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which provides a textual description of a "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["class ShoppingListItem: RecipeIngredient {","   var purchased = false","   var description: String {","      var output = \"\\(quantity) x \\(name)\"","      output += purchased ? \" ✔\" : \" ✘\"","      return output","   }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" doesn’t define an initializer to provide"},{"type":"text","text":" "},{"type":"text","text":"an initial value for "},{"type":"codeVoice","code":"purchased"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because items in a shopping list (as modeled here) always start out unpurchased."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it provides a default value for all of the properties it introduces"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t define any initializers itself,"},{"type":"text","text":" "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" automatically inherits"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of the designated and convenience initializers from its superclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below shows the overall initializer chain for all three classes:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"initializersExample03"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use all three of the inherited initializers"},{"type":"text","text":" "},{"type":"text","text":"to create a new "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["var breakfastList = [","   ShoppingListItem(),","   ShoppingListItem(name: \"Bacon\"),","   ShoppingListItem(name: \"Eggs\", quantity: 6),","]","breakfastList[0].name = \"Orange juice\"","breakfastList[0].purchased = true","for item in breakfastList {","   print(item.description)","}","\/\/ 1 x Orange juice ✔","\/\/ 1 x Bacon ✘","\/\/ 6 x Eggs ✘"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, a new array called "},{"type":"codeVoice","code":"breakfastList"},{"type":"text","text":" is created from"},{"type":"text","text":" "},{"type":"text","text":"an array literal containing three new "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"The type of the array is inferred to be "},{"type":"codeVoice","code":"[ShoppingListItem]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After the array is created,"},{"type":"text","text":" "},{"type":"text","text":"the name of the "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" at the start of the array"},{"type":"text","text":" "},{"type":"text","text":"is changed from "},{"type":"codeVoice","code":"\"[Unnamed]\""},{"type":"text","text":" to "},{"type":"codeVoice","code":"\"Orange juice\""},{"type":"text","text":" "},{"type":"text","text":"and it’s marked as having been purchased."},{"type":"text","text":" "},{"type":"text","text":"Printing the description of each item in the array"},{"type":"text","text":" "},{"type":"text","text":"shows that their default states have been set as expected."}]},{"anchor":"Failable-Initializers","level":2,"type":"heading","text":"Failable Initializers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s sometimes useful to define a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"for which initialization can fail."},{"type":"text","text":" "},{"type":"text","text":"This failure might be triggered by invalid initialization parameter values,"},{"type":"text","text":" "},{"type":"text","text":"the absence of a required external resource,"},{"type":"text","text":" "},{"type":"text","text":"or some other condition that prevents initialization from succeeding."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To cope with initialization conditions that can fail,"},{"type":"text","text":" "},{"type":"text","text":"define one or more failable initializers as part of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration definition."},{"type":"text","text":" "},{"type":"text","text":"You write a failable initializer"},{"type":"text","text":" "},{"type":"text","text":"by placing a question mark after the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword ("},{"type":"codeVoice","code":"init?"},{"type":"text","text":")."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t define a failable and a nonfailable initializer"},{"type":"text","text":" "},{"type":"text","text":"with the same parameter types and names."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A failable initializer creates an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" value of the type it initializes."},{"type":"text","text":" "},{"type":"text","text":"You write "},{"type":"codeVoice","code":"return nil"},{"type":"text","text":" within a failable initializer"},{"type":"text","text":" "},{"type":"text","text":"to indicate a point at which initialization failure can be triggered."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Strictly speaking, initializers don’t return a value."},{"type":"text","text":" "},{"type":"text","text":"Rather, their role is to ensure that "},{"type":"codeVoice","code":"self"},{"type":"text","text":" is fully and correctly initialized"},{"type":"text","text":" "},{"type":"text","text":"by the time that initialization ends."},{"type":"text","text":" "},{"type":"text","text":"Although you write "},{"type":"codeVoice","code":"return nil"},{"type":"text","text":" to trigger an initialization failure,"},{"type":"text","text":" "},{"type":"text","text":"you don’t use the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword to indicate initialization success."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, failable initializers are implemented for numeric type conversions."},{"type":"text","text":" "},{"type":"text","text":"To ensure conversion between numeric types maintains the value exactly,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"init(exactly:)"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"If the type conversion can’t maintain the value,"},{"type":"text","text":" "},{"type":"text","text":"the initializer fails."}]},{"type":"codeListing","syntax":"swift","code":["let wholeNumber: Double = 12345.0","let pi = 3.14159","","if let valueMaintained = Int(exactly: wholeNumber) {","    print(\"\\(wholeNumber) conversion to Int maintains value of \\(valueMaintained)\")","}","\/\/ Prints \"12345.0 conversion to Int maintains value of 12345\"","","let valueChanged = Int(exactly: pi)","\/\/ valueChanged is of type Int?, not Int","","if valueChanged == nil {","    print(\"\\(pi) conversion to Int doesn't maintain value\")","}","\/\/ Prints \"3.14159 conversion to Int doesn't maintain value\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"Animal"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a constant "},{"type":"codeVoice","code":"String"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"species"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Animal"},{"type":"text","text":" structure also defines a failable initializer"},{"type":"text","text":" "},{"type":"text","text":"with a single parameter called "},{"type":"codeVoice","code":"species"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This initializer checks if the "},{"type":"codeVoice","code":"species"},{"type":"text","text":" value passed to the initializer is an empty string."},{"type":"text","text":" "},{"type":"text","text":"If an empty string is found, an initialization failure is triggered."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the "},{"type":"codeVoice","code":"species"},{"type":"text","text":" property’s value is set, and initialization succeeds:"}]},{"type":"codeListing","syntax":"swift","code":["struct Animal {","   let species: String","   init?(species: String) {","      if species.isEmpty { return nil }","      self.species = species","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this failable initializer to try to initialize a new "},{"type":"codeVoice","code":"Animal"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"and to check if initialization succeeded:"}]},{"type":"codeListing","syntax":"swift","code":["let someCreature = Animal(species: \"Giraffe\")","\/\/ someCreature is of type Animal?, not Animal","","if let giraffe = someCreature {","   print(\"An animal was initialized with a species of \\(giraffe.species)\")","}","\/\/ Prints \"An animal was initialized with a species of Giraffe\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you pass an empty string value to the failable initializer’s "},{"type":"codeVoice","code":"species"},{"type":"text","text":" parameter,"},{"type":"text","text":" "},{"type":"text","text":"the initializer triggers an initialization failure:"}]},{"type":"codeListing","syntax":"swift","code":["let anonymousCreature = Animal(species: \"\")","\/\/ anonymousCreature is of type Animal?, not Animal","","if anonymousCreature == nil {","   print(\"The anonymous creature couldn't be initialized\")","}","\/\/ Prints \"The anonymous creature couldn't be initialized\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking for an empty string value (such as "},{"type":"codeVoice","code":"\"\""},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"\"Giraffe\""},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"isn’t the same as checking for "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to indicate the absence of an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"In the example above, an empty string ("},{"type":"codeVoice","code":"\"\""},{"type":"text","text":") is a valid, non-optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, it’s not appropriate for an animal"},{"type":"text","text":" "},{"type":"text","text":"to have an empty string as the value of its "},{"type":"codeVoice","code":"species"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"To model this restriction,"},{"type":"text","text":" "},{"type":"text","text":"the failable initializer triggers an initialization failure if an empty string is found."}]}],"type":"aside","name":"Note"},{"anchor":"Failable-Initializers-for-Enumerations","level":3,"type":"heading","text":"Failable Initializers for Enumerations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a failable initializer to select an appropriate enumeration case"},{"type":"text","text":" "},{"type":"text","text":"based on one or more parameters."},{"type":"text","text":" "},{"type":"text","text":"The initializer can then fail if the provided parameters"},{"type":"text","text":" "},{"type":"text","text":"don’t match an appropriate enumeration case."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines an enumeration called "},{"type":"codeVoice","code":"TemperatureUnit"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with three possible states ("},{"type":"codeVoice","code":"kelvin"},{"type":"text","text":", "},{"type":"codeVoice","code":"celsius"},{"type":"text","text":", and "},{"type":"codeVoice","code":"fahrenheit"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"A failable initializer is used to find an appropriate enumeration case"},{"type":"text","text":" "},{"type":"text","text":"for a "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value representing a temperature symbol:"}]},{"type":"codeListing","syntax":"swift","code":["enum TemperatureUnit {","   case kelvin, celsius, fahrenheit","   init?(symbol: Character) {","      switch symbol {","         case \"K\":","            self = .kelvin","         case \"C\":","            self = .celsius","         case \"F\":","            self = .fahrenheit","         default:","            return nil","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this failable initializer to choose"},{"type":"text","text":" "},{"type":"text","text":"an appropriate enumeration case for the three possible states"},{"type":"text","text":" "},{"type":"text","text":"and to cause initialization to fail if the parameter doesn’t match one of these"},{"type":"text","text":" "},{"type":"text","text":"states:"}]},{"type":"codeListing","syntax":"swift","code":["let fahrenheitUnit = TemperatureUnit(symbol: \"F\")","if fahrenheitUnit != nil {","   print(\"This is a defined temperature unit, so initialization succeeded.\")","}","\/\/ Prints \"This is a defined temperature unit, so initialization succeeded.\"","","let unknownUnit = TemperatureUnit(symbol: \"X\")","if unknownUnit == nil {","   print(\"This isn't a defined temperature unit, so initialization failed.\")","}","\/\/ Prints \"This isn't a defined temperature unit, so initialization failed.\""]},{"anchor":"Failable-Initializers-for-Enumerations-with-Raw-Values","level":3,"type":"heading","text":"Failable Initializers for Enumerations with Raw Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enumerations with raw values automatically receive a failable initializer,"},{"type":"text","text":" "},{"type":"codeVoice","code":"init?(rawValue:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"that takes a parameter called "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" of the appropriate raw-value type"},{"type":"text","text":" "},{"type":"text","text":"and selects a matching enumeration case if one is found,"},{"type":"text","text":" "},{"type":"text","text":"or triggers an initialization failure if no matching value exists."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can rewrite the "},{"type":"codeVoice","code":"TemperatureUnit"},{"type":"text","text":" example from above"},{"type":"text","text":" "},{"type":"text","text":"to use raw values of type "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" "},{"type":"text","text":"and to take advantage of the "},{"type":"codeVoice","code":"init?(rawValue:)"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"swift","code":["enum TemperatureUnit: Character {","   case kelvin = \"K\", celsius = \"C\", fahrenheit = \"F\"","}","","let fahrenheitUnit = TemperatureUnit(rawValue: \"F\")","if fahrenheitUnit != nil {","   print(\"This is a defined temperature unit, so initialization succeeded.\")","}","\/\/ Prints \"This is a defined temperature unit, so initialization succeeded.\"","","let unknownUnit = TemperatureUnit(rawValue: \"X\")","if unknownUnit == nil {","   print(\"This isn't a defined temperature unit, so initialization failed.\")","}","\/\/ Prints \"This isn't a defined temperature unit, so initialization failed.\""]},{"anchor":"Propagation-of-Initialization-Failure","level":3,"type":"heading","text":"Propagation of Initialization Failure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A failable initializer of a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"can delegate across to another failable initializer from the same class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Similarly, a subclass failable initializer can delegate up to a superclass failable initializer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In either case, if you delegate to another initializer that causes initialization to fail,"},{"type":"text","text":" "},{"type":"text","text":"the entire initialization process fails immediately,"},{"type":"text","text":" "},{"type":"text","text":"and no further initialization code is executed."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A failable initializer can also delegate to a nonfailable initializer."},{"type":"text","text":" "},{"type":"text","text":"Use this approach if you need to add a potential failure state"},{"type":"text","text":" "},{"type":"text","text":"to an existing initialization process that doesn’t otherwise fail."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a subclass of "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" called "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" class models an item in an online shopping cart."},{"type":"text","text":" "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" introduces a stored constant property called "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" "},{"type":"text","text":"and ensures that this property always has a value of at least "},{"type":"codeVoice","code":"1"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Product {","   let name: String","   init?(name: String) {","      if name.isEmpty { return nil }","      self.name = name","   }","}","","class CartItem: Product {","   let quantity: Int","   init?(name: String, quantity: Int) {","      if quantity < 1 { return nil }","      self.quantity = quantity","      super.init(name: name)","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The failable initializer for "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" starts by"},{"type":"text","text":" "},{"type":"text","text":"validating that it has received a "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":" or more."},{"type":"text","text":" "},{"type":"text","text":"If the "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" is invalid,"},{"type":"text","text":" "},{"type":"text","text":"the entire initialization process fails immediately"},{"type":"text","text":" "},{"type":"text","text":"and no further initialization code is executed."},{"type":"text","text":" "},{"type":"text","text":"Likewise, the failable initializer for "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" "},{"type":"text","text":"checks the "},{"type":"codeVoice","code":"name"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"and the initializer process fails immediately"},{"type":"text","text":" "},{"type":"text","text":"if "},{"type":"codeVoice","code":"name"},{"type":"text","text":" is the empty string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" instance with a nonempty name and a quantity of "},{"type":"codeVoice","code":"1"},{"type":"text","text":" or more,"},{"type":"text","text":" "},{"type":"text","text":"initialization succeeds:"}]},{"type":"codeListing","syntax":"swift","code":["if let twoSocks = CartItem(name: \"sock\", quantity: 2) {","   print(\"Item: \\(twoSocks.name), quantity: \\(twoSocks.quantity)\")","}","\/\/ Prints \"Item: sock, quantity: 2\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to create a "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" instance with a "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" initializer causes initialization to fail:"}]},{"type":"codeListing","syntax":"swift","code":["if let zeroShirts = CartItem(name: \"shirt\", quantity: 0) {","   print(\"Item: \\(zeroShirts.name), quantity: \\(zeroShirts.quantity)\")","} else {","   print(\"Unable to initialize zero shirts\")","}","\/\/ Prints \"Unable to initialize zero shirts\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, if you try to create a "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" instance with an empty "},{"type":"codeVoice","code":"name"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"the superclass "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" initializer causes initialization to fail:"}]},{"type":"codeListing","syntax":"swift","code":["if let oneUnnamed = CartItem(name: \"\", quantity: 1) {","   print(\"Item: \\(oneUnnamed.name), quantity: \\(oneUnnamed.quantity)\")","} else {","   print(\"Unable to initialize one unnamed product\")","}","\/\/ Prints \"Unable to initialize one unnamed product\""]},{"anchor":"Overriding-a-Failable-Initializer","level":3,"type":"heading","text":"Overriding a Failable Initializer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override a superclass failable initializer in a subclass,"},{"type":"text","text":" "},{"type":"text","text":"just like any other initializer."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, you can override a superclass failable initializer"},{"type":"text","text":" "},{"type":"text","text":"with a subclass "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nonfailable"}]},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"This enables you to define a subclass for which initialization can’t fail,"},{"type":"text","text":" "},{"type":"text","text":"even though initialization of the superclass is allowed to fail."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that if you override a failable superclass initializer with a nonfailable subclass initializer,"},{"type":"text","text":" "},{"type":"text","text":"the only way to delegate up to the superclass initializer"},{"type":"text","text":" "},{"type":"text","text":"is to force-unwrap the result of the failable superclass initializer."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override a failable initializer with a nonfailable initializer"},{"type":"text","text":" "},{"type":"text","text":"but not the other way around."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a class called "},{"type":"codeVoice","code":"Document"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This class models a document that can be initialized with"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property that’s either a nonempty string value or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"but can’t be an empty string:"}]},{"type":"codeListing","syntax":"swift","code":["class Document {","   var name: String?","   \/\/ this initializer creates a document with a nil name value","   init() {}","   \/\/ this initializer creates a document with a nonempty name value","   init?(name: String) {","      if name.isEmpty { return nil }","      self.name = name","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next example defines a subclass of "},{"type":"codeVoice","code":"Document"},{"type":"text","text":" called "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" subclass overrides"},{"type":"text","text":" "},{"type":"text","text":"both of the designated initializers introduced by "},{"type":"codeVoice","code":"Document"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These overrides ensure that an "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" instance has"},{"type":"text","text":" "},{"type":"text","text":"an initial "},{"type":"codeVoice","code":"name"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"\"[Untitled]\""},{"type":"text","text":" "},{"type":"text","text":"if the instance is initialized without a name,"},{"type":"text","text":" "},{"type":"text","text":"or if an empty string is passed to the "},{"type":"codeVoice","code":"init(name:)"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"swift","code":["class AutomaticallyNamedDocument: Document {","   override init() {","      super.init()","      self.name = \"[Untitled]\"","   }","   override init(name: String) {","      super.init()","      if name.isEmpty {","         self.name = \"[Untitled]\"","      } else {","         self.name = name","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" overrides its superclass’s"},{"type":"text","text":" "},{"type":"text","text":"failable "},{"type":"codeVoice","code":"init?(name:)"},{"type":"text","text":" initializer with a nonfailable "},{"type":"codeVoice","code":"init(name:)"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" copes with the empty string case"},{"type":"text","text":" "},{"type":"text","text":"in a different way than its superclass,"},{"type":"text","text":" "},{"type":"text","text":"its initializer doesn’t need to fail,"},{"type":"text","text":" "},{"type":"text","text":"and so it provides a nonfailable version of the initializer instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use forced unwrapping in an initializer"},{"type":"text","text":" "},{"type":"text","text":"to call a failable initializer from the superclass"},{"type":"text","text":" "},{"type":"text","text":"as part of the implementation of a subclass’s nonfailable initializer."},{"type":"text","text":" "},{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"UntitledDocument"},{"type":"text","text":" subclass below is always named "},{"type":"codeVoice","code":"\"[Untitled]\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and it uses the failable "},{"type":"codeVoice","code":"init(name:)"},{"type":"text","text":" initializer"},{"type":"text","text":" "},{"type":"text","text":"from its superclass during initialization."}]},{"type":"codeListing","syntax":"swift","code":["class UntitledDocument: Document {","   override init() {","      super.init(name: \"[Untitled]\")!","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, if the "},{"type":"codeVoice","code":"init(name:)"},{"type":"text","text":" initializer of the superclass"},{"type":"text","text":" "},{"type":"text","text":"were ever called with an empty string as the name,"},{"type":"text","text":" "},{"type":"text","text":"the forced unwrapping operation would result in a runtime error."},{"type":"text","text":" "},{"type":"text","text":"However, because it’s called with a string constant,"},{"type":"text","text":" "},{"type":"text","text":"you can see that the initializer won’t fail,"},{"type":"text","text":" "},{"type":"text","text":"so no runtime error can occur in this case."}]},{"anchor":"The-init-Failable-Initializer","level":3,"type":"heading","text":"The init! Failable Initializer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You typically define a failable initializer"},{"type":"text","text":" "},{"type":"text","text":"that creates an optional instance of the appropriate type"},{"type":"text","text":" "},{"type":"text","text":"by placing a question mark after the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword ("},{"type":"codeVoice","code":"init?"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, you can define a failable initializer that creates"},{"type":"text","text":" "},{"type":"text","text":"an implicitly unwrapped optional instance of the appropriate type."},{"type":"text","text":" "},{"type":"text","text":"Do this by placing an exclamation point after the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword ("},{"type":"codeVoice","code":"init!"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"instead of a question mark."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can delegate from "},{"type":"codeVoice","code":"init?"},{"type":"text","text":" to "},{"type":"codeVoice","code":"init!"},{"type":"text","text":" and vice versa,"},{"type":"text","text":" "},{"type":"text","text":"and you can override "},{"type":"codeVoice","code":"init?"},{"type":"text","text":" with "},{"type":"codeVoice","code":"init!"},{"type":"text","text":" and vice versa."},{"type":"text","text":" "},{"type":"text","text":"You can also delegate from "},{"type":"codeVoice","code":"init"},{"type":"text","text":" to "},{"type":"codeVoice","code":"init!"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"although doing so will trigger an assertion"},{"type":"text","text":" "},{"type":"text","text":"if the "},{"type":"codeVoice","code":"init!"},{"type":"text","text":" initializer causes initialization to fail."}]},{"anchor":"Required-Initializers","level":2,"type":"heading","text":"Required Initializers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Write the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier before the definition of a class initializer"},{"type":"text","text":" "},{"type":"text","text":"to indicate that every subclass of the class must implement that initializer:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeClass {","   required init() {","      \/\/ initializer implementation goes here","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You must also write the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier before"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"type":"text","text":" "},{"type":"text","text":"to indicate that the initializer requirement applies to further subclasses in the chain."},{"type":"text","text":" "},{"type":"text","text":"You don’t write the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier when overriding a required designated initializer:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeSubclass: SomeClass {","   required init() {","      \/\/ subclass implementation of the required initializer goes here","   }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You don’t have to provide an explicit implementation of a required initializer"},{"type":"text","text":" "},{"type":"text","text":"if you can satisfy the requirement with an inherited initializer."}]}],"type":"aside","name":"Note"},{"anchor":"Setting-a-Default-Property-Value-with-a-Closure-or-Function","level":2,"type":"heading","text":"Setting a Default Property Value with a Closure or Function"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a stored property’s default value requires some customization or setup,"},{"type":"text","text":" "},{"type":"text","text":"you can use a closure or global function to provide"},{"type":"text","text":" "},{"type":"text","text":"a customized default value for that property."},{"type":"text","text":" "},{"type":"text","text":"Whenever a new instance of the type that the property belongs to is initialized,"},{"type":"text","text":" "},{"type":"text","text":"the closure or function is called,"},{"type":"text","text":" "},{"type":"text","text":"and its return value is assigned as the property’s default value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These kinds of closures or functions typically create"},{"type":"text","text":" "},{"type":"text","text":"a temporary value of the same type as the property,"},{"type":"text","text":" "},{"type":"text","text":"tailor that value to represent the desired initial state,"},{"type":"text","text":" "},{"type":"text","text":"and then return that temporary value to be used as the property’s default value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a skeleton outline of how a closure can be used"},{"type":"text","text":" "},{"type":"text","text":"to provide a default property value:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeClass {","   let someProperty: SomeType = {","      \/\/ create a default value for someProperty inside this closure","      \/\/ someValue must be of the same type as SomeType","      return someValue","   }()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the closure’s end curly brace is followed by an empty pair of parentheses."},{"type":"text","text":" "},{"type":"text","text":"This tells Swift to execute the closure immediately."},{"type":"text","text":" "},{"type":"text","text":"If you omit these parentheses,"},{"type":"text","text":" "},{"type":"text","text":"you are trying to assign the closure itself to the property,"},{"type":"text","text":" "},{"type":"text","text":"and not the return value of the closure."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use a closure to initialize a property,"},{"type":"text","text":" "},{"type":"text","text":"remember that the rest of the instance hasn’t yet been initialized"},{"type":"text","text":" "},{"type":"text","text":"at the point that the closure is executed."},{"type":"text","text":" "},{"type":"text","text":"This means that you can’t access any other property values from within your closure,"},{"type":"text","text":" "},{"type":"text","text":"even if those properties have default values."},{"type":"text","text":" "},{"type":"text","text":"You also can’t use the implicit "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"or call any of the instance’s methods."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"Chessboard"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which models a board for the game of chess."},{"type":"text","text":" "},{"type":"text","text":"Chess is played on an 8 x 8 board,"},{"type":"text","text":" "},{"type":"text","text":"with alternating black and white squares."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"chessBoard"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To represent this game board,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Chessboard"},{"type":"text","text":" structure has a single property called "},{"type":"codeVoice","code":"boardColors"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is an array of 64 "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"A value of "},{"type":"codeVoice","code":"true"},{"type":"text","text":" in the array represents a black square"},{"type":"text","text":" "},{"type":"text","text":"and a value of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" represents a white square."},{"type":"text","text":" "},{"type":"text","text":"The first item in the array represents the top left square on the board"},{"type":"text","text":" "},{"type":"text","text":"and the last item in the array represents the bottom right square on the board."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"boardColors"},{"type":"text","text":" array is initialized with a closure to set up its color values:"}]},{"type":"codeListing","syntax":"swift","code":["struct Chessboard {","   let boardColors: [Bool] = {","      var temporaryBoard: [Bool] = []","      var isBlack = false","      for i in 1...8 {","         for j in 1...8 {","            temporaryBoard.append(isBlack)","            isBlack = !isBlack","         }","         isBlack = !isBlack","      }","      return temporaryBoard","   }()","   func squareIsBlackAt(row: Int, column: Int) -> Bool {","      return boardColors[(row * 8) + column]","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever a new "},{"type":"codeVoice","code":"Chessboard"},{"type":"text","text":" instance is created, the closure is executed,"},{"type":"text","text":" "},{"type":"text","text":"and the default value of "},{"type":"codeVoice","code":"boardColors"},{"type":"text","text":" is calculated and returned."},{"type":"text","text":" "},{"type":"text","text":"The closure in the example above calculates and sets"},{"type":"text","text":" "},{"type":"text","text":"the appropriate color for each square on the board"},{"type":"text","text":" "},{"type":"text","text":"in a temporary array called "},{"type":"codeVoice","code":"temporaryBoard"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and returns this temporary array as the closure’s return value"},{"type":"text","text":" "},{"type":"text","text":"once its setup is complete."},{"type":"text","text":" "},{"type":"text","text":"The returned array value is stored in "},{"type":"codeVoice","code":"boardColors"},{"type":"text","text":" "},{"type":"text","text":"and can be queried with the "},{"type":"codeVoice","code":"squareIsBlackAt(row:column:)"},{"type":"text","text":" utility function:"}]},{"type":"codeListing","syntax":"swift","code":["let board = Chessboard()","print(board.squareIsBlackAt(row: 0, column: 1))","\/\/ Prints \"true\"","print(board.squareIsBlackAt(row: 7, column: 7))","\/\/ Prints \"false\""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/initialization"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Initialization","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"initializersExample02":{"alt":null,"type":"image","identifier":"initializersExample02","variants":[{"url":"\/images\/initializersExample02@2x.png","traits":["2x","light"]},{"url":"\/images\/initializersExample02~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"initializersExample03":{"alt":null,"type":"image","identifier":"initializersExample03","variants":[{"url":"\/images\/initializersExample03@2x.png","traits":["2x","light"]},{"url":"\/images\/initializersExample03~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Two-Phase-Initialization":{"abstract":[],"title":"Two-Phase Initialization","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Two-Phase-Initialization","url":"\/documentation\/the-swift-programming-language\/initialization#Two-Phase-Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"chessBoard":{"alt":null,"type":"image","identifier":"chessBoard","variants":[{"url":"\/images\/chessBoard@2x.png","traits":["2x","light"]},{"url":"\/images\/chessBoard~dark@2x.png","traits":["2x","dark"]}]},"twoPhaseInitialization01":{"alt":null,"type":"image","identifier":"twoPhaseInitialization01","variants":[{"url":"\/images\/twoPhaseInitialization01@2x.png","traits":["2x","light"]},{"url":"\/images\/twoPhaseInitialization01~dark@2x.png","traits":["2x","dark"]}]},"initializerDelegation02":{"alt":null,"type":"image","identifier":"initializerDelegation02","variants":[{"url":"\/images\/initializerDelegation02@2x.png","traits":["2x","light"]},{"url":"\/images\/initializerDelegation02~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Class-Types":{"abstract":[],"title":"Initializer Delegation for Class Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Class-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"twoPhaseInitialization02":{"alt":null,"type":"image","identifier":"twoPhaseInitialization02","variants":[{"url":"\/images\/twoPhaseInitialization02@2x.png","traits":["2x","light"]},{"url":"\/images\/twoPhaseInitialization02~dark@2x.png","traits":["2x","dark"]}]},"initializersExample01":{"alt":null,"type":"image","identifier":"initializersExample01","variants":[{"url":"\/images\/initializersExample01@2x.png","traits":["2x","light"]},{"url":"\/images\/initializersExample01~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"initializerDelegation01":{"alt":null,"type":"image","identifier":"initializerDelegation01","variants":[{"url":"\/images\/initializerDelegation01@2x.png","traits":["2x","light"]},{"url":"\/images\/initializerDelegation01~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Automatic-Initializer-Inheritance":{"abstract":[],"title":"Automatic Initializer Inheritance","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Automatic-Initializer-Inheritance","url":"\/documentation\/the-swift-programming-language\/initialization#Automatic-Initializer-Inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"}}}