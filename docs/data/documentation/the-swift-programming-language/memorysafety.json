{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also makes sure that multiple accesses"},{"type":"text","text":" "},{"type":"text","text":"to the same area of memory don’t conflict,"},{"type":"text","text":" "},{"type":"text","text":"by requiring code that modifies a location in memory"},{"type":"text","text":" "},{"type":"text","text":"to have exclusive access to that memory."},{"type":"text","text":" "},{"type":"text","text":"Because Swift manages memory automatically,"},{"type":"text","text":" "},{"type":"text","text":"most of the time you don’t have to think about accessing memory at all."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"it’s important to understand where potential conflicts can occur,"},{"type":"text","text":" "},{"type":"text","text":"so you can avoid writing code that has conflicting access to memory."},{"type":"text","text":" "},{"type":"text","text":"If your code does contain conflicts,"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a compile-time or runtime error."}]},{"anchor":"Understanding-Conflicting-Access-to-Memory","level":2,"type":"heading","text":"Understanding Conflicting Access to Memory"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Access to memory happens in your code"},{"type":"text","text":" "},{"type":"text","text":"when you do things like set the value of a variable"},{"type":"text","text":" "},{"type":"text","text":"or pass an argument to a function."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the following code contains both a read access and a write access:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ A write access to the memory where one is stored.","var one = 1","","\/\/ A read access from the memory where one is stored.","print(\"We're number \\(one)!\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A conflicting access to memory can occur"},{"type":"text","text":" "},{"type":"text","text":"when different parts of your code are trying"},{"type":"text","text":" "},{"type":"text","text":"to access the same location in memory at the same time."},{"type":"text","text":" "},{"type":"text","text":"Multiple accesses to a location in memory at the same time"},{"type":"text","text":" "},{"type":"text","text":"can produce unpredictable or inconsistent behavior."},{"type":"text","text":" "},{"type":"text","text":"In Swift, there are ways to modify a value"},{"type":"text","text":" "},{"type":"text","text":"that span several lines of code,"},{"type":"text","text":" "},{"type":"text","text":"making it possible to attempt to access a value"},{"type":"text","text":" "},{"type":"text","text":"in the middle of its own modification."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can see a similar problem"},{"type":"text","text":" "},{"type":"text","text":"by thinking about how you update a budget"},{"type":"text","text":" "},{"type":"text","text":"that’s written on a piece of paper."},{"type":"text","text":" "},{"type":"text","text":"Updating the budget is a two-step process:"},{"type":"text","text":" "},{"type":"text","text":"First you add the items’ names and prices,"},{"type":"text","text":" "},{"type":"text","text":"and then you change the total amount"},{"type":"text","text":" "},{"type":"text","text":"to reflect the items currently on the list."},{"type":"text","text":" "},{"type":"text","text":"Before and after the update,"},{"type":"text","text":" "},{"type":"text","text":"you can read any information from the budget"},{"type":"text","text":" "},{"type":"text","text":"and get a correct answer,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"memory_shopping"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you’re adding items to the budget,"},{"type":"text","text":" "},{"type":"text","text":"it’s in a temporary, invalid state"},{"type":"text","text":" "},{"type":"text","text":"because the total amount hasn’t been updated"},{"type":"text","text":" "},{"type":"text","text":"to reflect the newly added items."},{"type":"text","text":" "},{"type":"text","text":"Reading the total amount"},{"type":"text","text":" "},{"type":"text","text":"during the process of adding an item"},{"type":"text","text":" "},{"type":"text","text":"gives you incorrect information."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also demonstrates"},{"type":"text","text":" "},{"type":"text","text":"a challenge you may encounter"},{"type":"text","text":" "},{"type":"text","text":"when fixing conflicting access to memory:"},{"type":"text","text":" "},{"type":"text","text":"There are sometimes multiple ways to fix the conflict"},{"type":"text","text":" "},{"type":"text","text":"that produce different answers,"},{"type":"text","text":" "},{"type":"text","text":"and it’s not always obvious which answer is correct."},{"type":"text","text":" "},{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"depending on whether you wanted the original total amount"},{"type":"text","text":" "},{"type":"text","text":"or the updated total amount,"},{"type":"text","text":" "},{"type":"text","text":"either $5 or $320 could be the correct answer."},{"type":"text","text":" "},{"type":"text","text":"Before you can fix the conflicting access,"},{"type":"text","text":" "},{"type":"text","text":"you have to determine what it was intended to do."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’ve written concurrent or multithreaded code,"},{"type":"text","text":" "},{"type":"text","text":"conflicting access to memory might be a familiar problem."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"the conflicting access discussed here can happen"},{"type":"text","text":" "},{"type":"text","text":"on a single thread and"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"doesn’t"}]},{"type":"text","text":" involve concurrent or multithreaded code.If you have conflicting access to memory"},{"type":"text","text":" "},{"type":"text","text":"from within a single thread,"},{"type":"text","text":" "},{"type":"text","text":"Swift guarantees that you’ll get an error"},{"type":"text","text":" "},{"type":"text","text":"at either compile time or runtime."},{"type":"text","text":" "},{"type":"text","text":"For multithreaded code,"},{"type":"text","text":" "},{"type":"text","text":"use "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early"},{"type":"text","text":" "},{"type":"text","text":"to help detect conflicting access across threads."}]}],"type":"aside","name":"Note"},{"anchor":"Characteristics-of-Memory-Access","level":3,"type":"heading","text":"Characteristics of Memory Access"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are three characteristics of memory access"},{"type":"text","text":" "},{"type":"text","text":"to consider in the context of conflicting access:"},{"type":"text","text":" "},{"type":"text","text":"whether the access is a read or a write,"},{"type":"text","text":" "},{"type":"text","text":"the duration of the access,"},{"type":"text","text":" "},{"type":"text","text":"and the location in memory being accessed."},{"type":"text","text":" "},{"type":"text","text":"Specifically,"},{"type":"text","text":" "},{"type":"text","text":"a conflict occurs if you have two accesses"},{"type":"text","text":" "},{"type":"text","text":"that meet all of the following conditions:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At least one is a write access or a nonatomic access."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"They access the same location in memory."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Their durations overlap."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The difference between a read and write access"},{"type":"text","text":" "},{"type":"text","text":"is usually obvious:"},{"type":"text","text":" "},{"type":"text","text":"a write access changes the location in memory,"},{"type":"text","text":" "},{"type":"text","text":"but a read access doesn’t."},{"type":"text","text":" "},{"type":"text","text":"The location in memory"},{"type":"text","text":" "},{"type":"text","text":"refers to what is being accessed —"},{"type":"text","text":" "},{"type":"text","text":"for example, a variable, constant, or property."},{"type":"text","text":" "},{"type":"text","text":"The duration of a memory access"},{"type":"text","text":" "},{"type":"text","text":"is either instantaneous or long-term."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An operation is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"atomic"}]},{"type":"text","text":" "},{"type":"text","text":"if it uses only C atomic operations;"},{"type":"text","text":" "},{"type":"text","text":"otherwise it’s nonatomic."},{"type":"text","text":" "},{"type":"text","text":"For a list of those functions, see the "},{"type":"codeVoice","code":"stdatomic(3)"},{"type":"text","text":" man page."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An access is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"instantaneous"}]},{"type":"text","text":" "},{"type":"text","text":"if it’s not possible for other code to run"},{"type":"text","text":" "},{"type":"text","text":"after that access starts but before it ends."},{"type":"text","text":" "},{"type":"text","text":"By their nature, two instantaneous accesses can’t happen at the same time."},{"type":"text","text":" "},{"type":"text","text":"Most memory access is instantaneous."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"all the read and write accesses in the code listing below are instantaneous:"}]},{"type":"codeListing","syntax":"swift","code":["func oneMore(than number: Int) -> Int {","    return number + 1","}","","var myNumber = 1","myNumber = oneMore(than: myNumber)","print(myNumber)","\/\/ Prints \"2\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"there are several ways to access memory,"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"long-term"}]},{"type":"text","text":" accesses,"},{"type":"text","text":" "},{"type":"text","text":"that span the execution of other code."},{"type":"text","text":" "},{"type":"text","text":"The difference between instantaneous access and long-term access"},{"type":"text","text":" "},{"type":"text","text":"is that it’s possible for other code to run"},{"type":"text","text":" "},{"type":"text","text":"after a long-term access starts but before it ends,"},{"type":"text","text":" "},{"type":"text","text":"which is called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"overlap"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A long-term access can overlap"},{"type":"text","text":" "},{"type":"text","text":"with other long-term accesses and instantaneous accesses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Overlapping accesses appear primarily in code that uses"},{"type":"text","text":" "},{"type":"text","text":"in-out parameters in functions and methods"},{"type":"text","text":" "},{"type":"text","text":"or mutating methods of a structure."},{"type":"text","text":" "},{"type":"text","text":"The specific kinds of Swift code that use long-term accesses"},{"type":"text","text":" "},{"type":"text","text":"are discussed in the sections below."}]},{"anchor":"Conflicting-Access-to-In-Out-Parameters","level":2,"type":"heading","text":"Conflicting Access to In-Out Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A function has long-term write access"},{"type":"text","text":" "},{"type":"text","text":"to all of its in-out parameters."},{"type":"text","text":" "},{"type":"text","text":"The write access for an in-out parameter starts"},{"type":"text","text":" "},{"type":"text","text":"after all of the non-in-out parameters have been evaluated"},{"type":"text","text":" "},{"type":"text","text":"and lasts for the entire duration of that function call."},{"type":"text","text":" "},{"type":"text","text":"If there are multiple in-out parameters,"},{"type":"text","text":" "},{"type":"text","text":"the write accesses start in the same order as the parameters appear."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One consequence of this long-term write access"},{"type":"text","text":" "},{"type":"text","text":"is that you can’t access the original"},{"type":"text","text":" "},{"type":"text","text":"variable that was passed as in-out,"},{"type":"text","text":" "},{"type":"text","text":"even if scoping rules and access control would otherwise permit it —"},{"type":"text","text":" "},{"type":"text","text":"any access to the original creates a conflict."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["var stepSize = 1","","func increment(_ number: inout Int) {","    number += stepSize","}","","increment(&stepSize)","\/\/ Error: conflicting accesses to stepSize"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":" is a global variable,"},{"type":"text","text":" "},{"type":"text","text":"and it’s normally accessible from within "},{"type":"codeVoice","code":"increment(_:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"the read access to "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":" overlaps with"},{"type":"text","text":" "},{"type":"text","text":"the write access to "},{"type":"codeVoice","code":"number"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"As shown in the figure below,"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"number"},{"type":"text","text":" and "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":" refer to the same location in memory."},{"type":"text","text":" "},{"type":"text","text":"The read and write accesses"},{"type":"text","text":" "},{"type":"text","text":"refer to the same memory and they overlap,"},{"type":"text","text":" "},{"type":"text","text":"producing a conflict."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"memory_increment"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One way to solve this conflict"},{"type":"text","text":" "},{"type":"text","text":"is to make an explicit copy of "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Make an explicit copy.","var copyOfStepSize = stepSize","increment(&copyOfStepSize)","","\/\/ Update the original.","stepSize = copyOfStepSize","\/\/ stepSize is now 2"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you make a copy of "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":" before calling "},{"type":"codeVoice","code":"increment(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s clear that the value of "},{"type":"codeVoice","code":"copyOfStepSize"},{"type":"text","text":" is incremented"},{"type":"text","text":" "},{"type":"text","text":"by the current step size."},{"type":"text","text":" "},{"type":"text","text":"The read access ends before the write access starts,"},{"type":"text","text":" "},{"type":"text","text":"so there isn’t a conflict."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another consequence of long-term write access"},{"type":"text","text":" "},{"type":"text","text":"to in-out parameters is that"},{"type":"text","text":" "},{"type":"text","text":"passing a single variable"},{"type":"text","text":" "},{"type":"text","text":"as the argument for multiple in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"of the same function"},{"type":"text","text":" "},{"type":"text","text":"produces a conflict."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["func balance(_ x: inout Int, _ y: inout Int) {","    let sum = x + y","    x = sum \/ 2","    y = sum - x","}","var playerOneScore = 42","var playerTwoScore = 30","balance(&playerOneScore, &playerTwoScore)  \/\/ OK","balance(&playerOneScore, &playerOneScore)","\/\/ Error: conflicting accesses to playerOneScore"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"balance(_:_:)"},{"type":"text","text":" function above"},{"type":"text","text":" "},{"type":"text","text":"modifies its two parameters"},{"type":"text","text":" "},{"type":"text","text":"to divide the total value evenly between them."},{"type":"text","text":" "},{"type":"text","text":"Calling it with "},{"type":"codeVoice","code":"playerOneScore"},{"type":"text","text":" and "},{"type":"codeVoice","code":"playerTwoScore"},{"type":"text","text":" as arguments"},{"type":"text","text":" "},{"type":"text","text":"doesn’t produce a conflict —"},{"type":"text","text":" "},{"type":"text","text":"there are two write accesses that overlap in time,"},{"type":"text","text":" "},{"type":"text","text":"but they access different locations in memory."},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"passing "},{"type":"codeVoice","code":"playerOneScore"},{"type":"text","text":" as the value for both parameters"},{"type":"text","text":" "},{"type":"text","text":"produces a conflict"},{"type":"text","text":" "},{"type":"text","text":"because it tries to perform two write accesses"},{"type":"text","text":" "},{"type":"text","text":"to the same location in memory at the same time."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because operators are functions,"},{"type":"text","text":" "},{"type":"text","text":"they can also have long-term accesses to their in-out parameters."},{"type":"text","text":" "},{"type":"text","text":"For example, if "},{"type":"codeVoice","code":"balance(_:_:)"},{"type":"text","text":" was an operator function named "},{"type":"codeVoice","code":"<^>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"writing "},{"type":"codeVoice","code":"playerOneScore <^> playerOneScore"},{"type":"text","text":" "},{"type":"text","text":"would result in the same conflict"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"codeVoice","code":"balance(&playerOneScore, &playerOneScore)"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Conflicting-Access-to-self-in-Methods","level":2,"type":"heading","text":"Conflicting Access to self in Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A mutating method on a structure has write access to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" "},{"type":"text","text":"for the duration of the method call."},{"type":"text","text":" "},{"type":"text","text":"For example, consider a game where each player"},{"type":"text","text":" "},{"type":"text","text":"has a health amount, which decreases when taking damage,"},{"type":"text","text":" "},{"type":"text","text":"and an energy amount, which decreases when using special abilities."}]},{"type":"codeListing","syntax":"swift","code":["struct Player {","    var name: String","    var health: Int","    var energy: Int","","    static let maxHealth = 10","    mutating func restoreHealth() {","        health = Player.maxHealth","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"restoreHealth()"},{"type":"text","text":" method above,"},{"type":"text","text":" "},{"type":"text","text":"a write access to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" starts at the beginning of the method"},{"type":"text","text":" "},{"type":"text","text":"and lasts until the method returns."},{"type":"text","text":" "},{"type":"text","text":"In this case, there’s no other code"},{"type":"text","text":" "},{"type":"text","text":"inside "},{"type":"codeVoice","code":"restoreHealth()"},{"type":"text","text":" "},{"type":"text","text":"that could have an overlapping access to the properties of a "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"shareHealth(with:)"},{"type":"text","text":" method below"},{"type":"text","text":" "},{"type":"text","text":"takes another "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" instance as an in-out parameter,"},{"type":"text","text":" "},{"type":"text","text":"creating the possibility of overlapping accesses."}]},{"type":"codeListing","syntax":"swift","code":["extension Player {","    mutating func shareHealth(with teammate: inout Player) {","        balance(&teammate.health, &health)","    }","}","","var oscar = Player(name: \"Oscar\", health: 10, energy: 10)","var maria = Player(name: \"Maria\", health: 5, energy: 10)","oscar.shareHealth(with: &maria)  \/\/ OK"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"calling the "},{"type":"codeVoice","code":"shareHealth(with:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"for Oscar’s player to share health with Maria’s player"},{"type":"text","text":" "},{"type":"text","text":"doesn’t cause a conflict."},{"type":"text","text":" "},{"type":"text","text":"There’s a write access to "},{"type":"codeVoice","code":"oscar"},{"type":"text","text":" during the method call"},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"oscar"},{"type":"text","text":" is the value of "},{"type":"codeVoice","code":"self"},{"type":"text","text":" in a mutating method,"},{"type":"text","text":" "},{"type":"text","text":"and there’s a write access to "},{"type":"codeVoice","code":"maria"},{"type":"text","text":" "},{"type":"text","text":"for the same duration"},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"maria"},{"type":"text","text":" was passed as an in-out parameter."},{"type":"text","text":" "},{"type":"text","text":"As shown in the figure below,"},{"type":"text","text":" "},{"type":"text","text":"they access different locations in memory."},{"type":"text","text":" "},{"type":"text","text":"Even though the two write accesses overlap in time,"},{"type":"text","text":" "},{"type":"text","text":"they don’t conflict."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"memory_share_health_maria"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"if you pass "},{"type":"codeVoice","code":"oscar"},{"type":"text","text":" as the argument to "},{"type":"codeVoice","code":"shareHealth(with:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"there’s a conflict:"}]},{"type":"codeListing","syntax":"swift","code":["oscar.shareHealth(with: &oscar)","\/\/ Error: conflicting accesses to oscar"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The mutating method needs write access to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" "},{"type":"text","text":"for the duration of the method,"},{"type":"text","text":" "},{"type":"text","text":"and the in-out parameter needs write access to "},{"type":"codeVoice","code":"teammate"},{"type":"text","text":" "},{"type":"text","text":"for the same duration."},{"type":"text","text":" "},{"type":"text","text":"Within the method,"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"self"},{"type":"text","text":" and "},{"type":"codeVoice","code":"teammate"},{"type":"text","text":" refer to"},{"type":"text","text":" "},{"type":"text","text":"the same location in memory —"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below."},{"type":"text","text":" "},{"type":"text","text":"The two write accesses"},{"type":"text","text":" "},{"type":"text","text":"refer to the same memory and they overlap,"},{"type":"text","text":" "},{"type":"text","text":"producing a conflict."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"memory_share_health_oscar"}]},{"anchor":"Conflicting-Access-to-Properties","level":2,"type":"heading","text":"Conflicting Access to Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types like structures, tuples, and enumerations"},{"type":"text","text":" "},{"type":"text","text":"are made up of individual constituent values,"},{"type":"text","text":" "},{"type":"text","text":"such as the properties of a structure or the elements of a tuple."},{"type":"text","text":" "},{"type":"text","text":"Because these are value types, mutating any piece of the value"},{"type":"text","text":" "},{"type":"text","text":"mutates the whole value,"},{"type":"text","text":" "},{"type":"text","text":"meaning read or write access to one of the properties"},{"type":"text","text":" "},{"type":"text","text":"requires read or write access to the whole value."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"overlapping write accesses to the elements of a tuple"},{"type":"text","text":" "},{"type":"text","text":"produces a conflict:"}]},{"type":"codeListing","syntax":"swift","code":["var playerInformation = (health: 10, energy: 20)","balance(&playerInformation.health, &playerInformation.energy)","\/\/ Error: conflicting access to properties of playerInformation"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"calling "},{"type":"codeVoice","code":"balance(_:_:)"},{"type":"text","text":" on the elements of a tuple"},{"type":"text","text":" "},{"type":"text","text":"produces a conflict"},{"type":"text","text":" "},{"type":"text","text":"because there are overlapping write accesses to "},{"type":"codeVoice","code":"playerInformation"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Both "},{"type":"codeVoice","code":"playerInformation.health"},{"type":"text","text":" and "},{"type":"codeVoice","code":"playerInformation.energy"},{"type":"text","text":" "},{"type":"text","text":"are passed as in-out parameters,"},{"type":"text","text":" "},{"type":"text","text":"which means "},{"type":"codeVoice","code":"balance(_:_:)"},{"type":"text","text":" needs write access to them"},{"type":"text","text":" "},{"type":"text","text":"for the duration of the function call."},{"type":"text","text":" "},{"type":"text","text":"In both cases, a write access to the tuple element"},{"type":"text","text":" "},{"type":"text","text":"requires a write access to the entire tuple."},{"type":"text","text":" "},{"type":"text","text":"This means there are two write accesses to "},{"type":"codeVoice","code":"playerInformation"},{"type":"text","text":" "},{"type":"text","text":"with durations that overlap,"},{"type":"text","text":" "},{"type":"text","text":"causing a conflict."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code below shows that the same error appears"},{"type":"text","text":" "},{"type":"text","text":"for overlapping write accesses"},{"type":"text","text":" "},{"type":"text","text":"to the properties of a structure"},{"type":"text","text":" "},{"type":"text","text":"that’s stored in a global variable."}]},{"type":"codeListing","syntax":"swift","code":["var holly = Player(name: \"Holly\", health: 10, energy: 10)","balance(&holly.health, &holly.energy)  \/\/ Error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In practice,"},{"type":"text","text":" "},{"type":"text","text":"most access to the properties of a structure"},{"type":"text","text":" "},{"type":"text","text":"can overlap safely."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"if the variable "},{"type":"codeVoice","code":"holly"},{"type":"text","text":" in the example above"},{"type":"text","text":" "},{"type":"text","text":"is changed to a local variable instead of a global variable,"},{"type":"text","text":" "},{"type":"text","text":"the compiler can prove that overlapping access"},{"type":"text","text":" "},{"type":"text","text":"to stored properties of the structure is safe:"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction() {","    var oscar = Player(name: \"Oscar\", health: 10, energy: 10)","    balance(&oscar.health, &oscar.energy)  \/\/ OK","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"Oscar’s health and energy are passed"},{"type":"text","text":" "},{"type":"text","text":"as the two in-out parameters to "},{"type":"codeVoice","code":"balance(_:_:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The compiler can prove that memory safety is preserved"},{"type":"text","text":" "},{"type":"text","text":"because the two stored properties don’t interact in any way."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The restriction against"},{"type":"text","text":" "},{"type":"text","text":"overlapping access to properties of a structure"},{"type":"text","text":" "},{"type":"text","text":"isn’t always necessary to preserve memory safety."},{"type":"text","text":" "},{"type":"text","text":"Memory safety is the desired guarantee,"},{"type":"text","text":" "},{"type":"text","text":"but exclusive access is a stricter requirement than memory safety —"},{"type":"text","text":" "},{"type":"text","text":"which means some code preserves memory safety,"},{"type":"text","text":" "},{"type":"text","text":"even though it violates exclusive access to memory."},{"type":"text","text":" "},{"type":"text","text":"Swift allows this memory-safe code if the compiler can prove"},{"type":"text","text":" "},{"type":"text","text":"that the nonexclusive access to memory is still safe."},{"type":"text","text":" "},{"type":"text","text":"Specifically, it can prove"},{"type":"text","text":" "},{"type":"text","text":"that overlapping access to properties of a structure is safe"},{"type":"text","text":" "},{"type":"text","text":"if the following conditions apply:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You’re accessing only stored properties of an instance,"},{"type":"text","text":" "},{"type":"text","text":"not computed properties or class properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The structure is the value of a local variable,"},{"type":"text","text":" "},{"type":"text","text":"not a global variable."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The structure is either not captured by any closures,"},{"type":"text","text":" "},{"type":"text","text":"or it’s captured only by nonescaping closures."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the compiler can’t prove the access is safe,"},{"type":"text","text":" "},{"type":"text","text":"it doesn’t allow the access."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/memorysafety"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Memory Safety","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"memory_shopping":{"alt":null,"type":"image","identifier":"memory_shopping","variants":[{"url":"\/images\/memory_shopping@2x.png","traits":["2x","light"]},{"url":"\/images\/memory_shopping~dark@2x.png","traits":["2x","dark"]}]},"https://developer.apple.com/documentation/xcode/diagnosing_memory_thread_and_crash_issues_early":{"title":"Thread Sanitizer","titleInlineContent":[{"type":"text","text":"Thread Sanitizer"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early","url":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"memory_share_health_maria":{"alt":null,"type":"image","identifier":"memory_share_health_maria","variants":[{"url":"\/images\/memory_share_health_maria@2x.png","traits":["2x","light"]},{"url":"\/images\/memory_share_health_maria~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"memory_increment":{"alt":null,"type":"image","identifier":"memory_increment","variants":[{"url":"\/images\/memory_increment@2x.png","traits":["2x","light"]},{"url":"\/images\/memory_increment~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"memory_share_health_oscar":{"alt":null,"type":"image","identifier":"memory_share_health_oscar","variants":[{"url":"\/images\/memory_share_health_oscar@2x.png","traits":["2x","light"]},{"url":"\/images\/memory_share_health_oscar~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"}}}