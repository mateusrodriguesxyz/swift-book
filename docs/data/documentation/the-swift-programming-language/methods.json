{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fact that structures and enumerations can define methods in Swift"},{"type":"text","text":" "},{"type":"text","text":"is a major difference from C and Objective-C."},{"type":"text","text":" "},{"type":"text","text":"In Objective-C, classes are the only types that can define methods."},{"type":"text","text":" "},{"type":"text","text":"In Swift, you can choose whether to define a class, structure, or enumeration,"},{"type":"text","text":" "},{"type":"text","text":"and still have the flexibility to define methods on the type you create."}]},{"anchor":"Instance-Methods","level":2,"type":"heading","text":"Instance Methods"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Instance methods"}]},{"type":"text","text":" are functions that belong to instances of"},{"type":"text","text":" "},{"type":"text","text":"a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"They support the functionality of those instances,"},{"type":"text","text":" "},{"type":"text","text":"either by providing ways to access and modify instance properties,"},{"type":"text","text":" "},{"type":"text","text":"or by providing functionality related to the instance’s purpose."},{"type":"text","text":" "},{"type":"text","text":"Instance methods have exactly the same syntax as functions,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an instance method within the opening and closing braces of the type it belongs to."},{"type":"text","text":" "},{"type":"text","text":"An instance method has implicit access to all other instance methods and properties of that type."},{"type":"text","text":" "},{"type":"text","text":"An instance method can be called only on a specific instance of the type it belongs to."},{"type":"text","text":" "},{"type":"text","text":"It can’t be called in isolation without an existing instance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example that defines a simple "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" class,"},{"type":"text","text":" "},{"type":"text","text":"which can be used to count the number of times an action occurs:"}]},{"type":"codeListing","syntax":"swift","code":["class Counter {","   var count = 0","   func increment() {","      count += 1","   }","   func increment(by amount: Int) {","      count += amount","   }","   func reset() {","      count = 0","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" class defines three instance methods:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"increment()"},{"type":"text","text":" increments the counter by "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"increment(by: Int)"},{"type":"text","text":" increments the counter by a specified integer amount."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reset()"},{"type":"text","text":" resets the counter to zero."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" class also declares a variable property, "},{"type":"codeVoice","code":"count"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to keep track of the current counter value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You call instance methods with the same dot syntax as properties:"}]},{"type":"codeListing","syntax":"swift","code":["let counter = Counter()","\/\/ the initial counter value is 0","counter.increment()","\/\/ the counter's value is now 1","counter.increment(by: 5)","\/\/ the counter's value is now 6","counter.reset()","\/\/ the counter's value is now 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Function parameters can have both a name (for use within the function’s body)"},{"type":"text","text":" "},{"type":"text","text":"and an argument label (for use when calling the function),"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The same is true for method parameters,"},{"type":"text","text":" "},{"type":"text","text":"because methods are just functions that are associated with a type."}]},{"anchor":"The-self-Property","level":3,"type":"heading","text":"The self Property"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every instance of a type has an implicit property called "},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is exactly equivalent to the instance itself."},{"type":"text","text":" "},{"type":"text","text":"You use the "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property to refer to the current instance"},{"type":"text","text":" "},{"type":"text","text":"within its own instance methods."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"increment()"},{"type":"text","text":" method in the example above could have been written like this:"}]},{"type":"codeListing","syntax":"swift","code":["func increment() {","   self.count += 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In practice, you don’t need to write "},{"type":"codeVoice","code":"self"},{"type":"text","text":" in your code very often."},{"type":"text","text":" "},{"type":"text","text":"If you don’t explicitly write "},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift assumes that you are referring to a property or method of the current instance"},{"type":"text","text":" "},{"type":"text","text":"whenever you use a known property or method name within a method."},{"type":"text","text":" "},{"type":"text","text":"This assumption is demonstrated by the use of "},{"type":"codeVoice","code":"count"},{"type":"text","text":" (rather than "},{"type":"codeVoice","code":"self.count"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"inside the three instance methods for "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The main exception to this rule occurs when a parameter name for an instance method"},{"type":"text","text":" "},{"type":"text","text":"has the same name as a property of that instance."},{"type":"text","text":" "},{"type":"text","text":"In this situation, the parameter name takes precedence,"},{"type":"text","text":" "},{"type":"text","text":"and it becomes necessary to refer to the property in a more qualified way."},{"type":"text","text":" "},{"type":"text","text":"You use the "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property to"},{"type":"text","text":" "},{"type":"text","text":"distinguish between the parameter name and the property name."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, "},{"type":"codeVoice","code":"self"},{"type":"text","text":" disambiguates between"},{"type":"text","text":" "},{"type":"text","text":"a method parameter called "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and an instance property that’s also called "},{"type":"codeVoice","code":"x"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Point {","   var x = 0.0, y = 0.0","   func isToTheRightOf(x: Double) -> Bool {","      return self.x > x","   }","}","let somePoint = Point(x: 4.0, y: 5.0)","if somePoint.isToTheRightOf(x: 1.0) {","   print(\"This point is to the right of the line where x == 1.0\")","}","\/\/ Prints \"This point is to the right of the line where x == 1.0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Without the "},{"type":"codeVoice","code":"self"},{"type":"text","text":" prefix,"},{"type":"text","text":" "},{"type":"text","text":"Swift would assume that both uses of "},{"type":"codeVoice","code":"x"},{"type":"text","text":" referred to the method parameter called "},{"type":"codeVoice","code":"x"},{"type":"text","text":"."}]},{"anchor":"Modifying-Value-Types-from-Within-Instance-Methods","level":3,"type":"heading","text":"Modifying Value Types from Within Instance Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and enumerations are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value types"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"By default, the properties of a value type can’t be modified from within its instance methods."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you need to modify the properties of your structure or enumeration"},{"type":"text","text":" "},{"type":"text","text":"within a particular method,"},{"type":"text","text":" "},{"type":"text","text":"you can opt in to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutating"}]},{"type":"text","text":" behavior for that method."},{"type":"text","text":" "},{"type":"text","text":"The method can then mutate (that is, change)"},{"type":"text","text":" "},{"type":"text","text":"its properties from within the method,"},{"type":"text","text":" "},{"type":"text","text":"and any changes that it makes are written back to the original structure when the method ends."},{"type":"text","text":" "},{"type":"text","text":"The method can also assign a completely new instance to its implicit "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"and this new instance will replace the existing one when the method ends."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can opt in to this behavior by placing the "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword for that method:"}]},{"type":"codeListing","syntax":"swift","code":["struct Point {","   var x = 0.0, y = 0.0","   mutating func moveBy(x deltaX: Double, y deltaY: Double) {","      x += deltaX","      y += deltaY","   }","}","var somePoint = Point(x: 1.0, y: 1.0)","somePoint.moveBy(x: 2.0, y: 3.0)","print(\"The point is now at (\\(somePoint.x), \\(somePoint.y))\")","\/\/ Prints \"The point is now at (3.0, 4.0)\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" structure above defines a mutating "},{"type":"codeVoice","code":"moveBy(x:y:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which moves a "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" instance by a certain amount."},{"type":"text","text":" "},{"type":"text","text":"Instead of returning a new point,"},{"type":"text","text":" "},{"type":"text","text":"this method actually modifies the point on which it’s called."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":" keyword is added to its definition"},{"type":"text","text":" "},{"type":"text","text":"to enable it to modify its properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you can’t call a mutating method on a constant of structure type,"},{"type":"text","text":" "},{"type":"text","text":"because its properties can’t be changed, even if they’re variable properties,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Stored-Properties-of-Constant-Structure-Instances"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let fixedPoint = Point(x: 3.0, y: 3.0)","fixedPoint.moveBy(x: 2.0, y: 3.0)","\/\/ this will report an error"]},{"anchor":"Assigning-to-self-Within-a-Mutating-Method","level":3,"type":"heading","text":"Assigning to self Within a Mutating Method"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mutating methods can assign an entirely new instance to the implicit "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" example shown above could have been written in the following way instead:"}]},{"type":"codeListing","syntax":"swift","code":["struct Point {","   var x = 0.0, y = 0.0","   mutating func moveBy(x deltaX: Double, y deltaY: Double) {","      self = Point(x: x + deltaX, y: y + deltaY)","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This version of the mutating "},{"type":"codeVoice","code":"moveBy(x:y:)"},{"type":"text","text":" method creates a new structure"},{"type":"text","text":" "},{"type":"text","text":"whose "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" values are set to the target location."},{"type":"text","text":" "},{"type":"text","text":"The end result of calling this alternative version of the method"},{"type":"text","text":" "},{"type":"text","text":"will be exactly the same as for calling the earlier version."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mutating methods for enumerations can set the implicit "},{"type":"codeVoice","code":"self"},{"type":"text","text":" parameter to be"},{"type":"text","text":" "},{"type":"text","text":"a different case from the same enumeration:"}]},{"type":"codeListing","syntax":"swift","code":["enum TriStateSwitch {","   case off, low, high","   mutating func next() {","      switch self {","         case .off:","            self = .low","         case .low:","            self = .high","         case .high:","            self = .off","      }","   }","}","var ovenLight = TriStateSwitch.low","ovenLight.next()","\/\/ ovenLight is now equal to .high","ovenLight.next()","\/\/ ovenLight is now equal to .off"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines an enumeration for a three-state switch."},{"type":"text","text":" "},{"type":"text","text":"The switch cycles between three different power states"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"off"},{"type":"text","text":", "},{"type":"codeVoice","code":"low"},{"type":"text","text":" and "},{"type":"codeVoice","code":"high"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"every time its "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" method is called."}]},{"anchor":"Type-Methods","level":2,"type":"heading","text":"Type Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance methods, as described above,"},{"type":"text","text":" "},{"type":"text","text":"are methods that you call on an instance of a particular type."},{"type":"text","text":" "},{"type":"text","text":"You can also define methods that are called on the type itself."},{"type":"text","text":" "},{"type":"text","text":"These kinds of methods are called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type methods"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You indicate type methods by writing"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword before the method’s "},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Classes can use the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword instead,"},{"type":"text","text":" "},{"type":"text","text":"to allow subclasses to override the superclass’s implementation of that method."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C, you can define type-level methods only for Objective-C classes."},{"type":"text","text":" "},{"type":"text","text":"In Swift, you can define type-level methods for all classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Each type method is explicitly scoped to the type it supports."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type methods are called with dot syntax, like instance methods."},{"type":"text","text":" "},{"type":"text","text":"However, you call type methods on the type, not on an instance of that type."},{"type":"text","text":" "},{"type":"text","text":"Here’s how you call a type method on a class called "},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class SomeClass {","   class func someTypeMethod() {","      \/\/ type method implementation goes here","   }","}","SomeClass.someTypeMethod()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Within the body of a type method,"},{"type":"text","text":" "},{"type":"text","text":"the implicit "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property refers to the type itself,"},{"type":"text","text":" "},{"type":"text","text":"rather than an instance of that type."},{"type":"text","text":" "},{"type":"text","text":"This means that you can use "},{"type":"codeVoice","code":"self"},{"type":"text","text":" to disambiguate between"},{"type":"text","text":" "},{"type":"text","text":"type properties and type method parameters,"},{"type":"text","text":" "},{"type":"text","text":"just as you do for instance properties and instance method parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"More generally, any unqualified method and property names that you use"},{"type":"text","text":" "},{"type":"text","text":"within the body of a type method will refer to other type-level methods and properties."},{"type":"text","text":" "},{"type":"text","text":"A type method can call another type method with the other method’s name,"},{"type":"text","text":" "},{"type":"text","text":"without needing to prefix it with the type name."},{"type":"text","text":" "},{"type":"text","text":"Similarly, type methods on structures and enumerations can access type properties"},{"type":"text","text":" "},{"type":"text","text":"by using the type property’s name without a type name prefix."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which tracks a player’s progress through the different levels or stages of a game."},{"type":"text","text":" "},{"type":"text","text":"It’s a single-player game,"},{"type":"text","text":" "},{"type":"text","text":"but can store information for multiple players on a single device."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the game’s levels (apart from level one) are locked when the game is first played."},{"type":"text","text":" "},{"type":"text","text":"Every time a player finishes a level,"},{"type":"text","text":" "},{"type":"text","text":"that level is unlocked for all players on the device."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" structure uses type properties and methods"},{"type":"text","text":" "},{"type":"text","text":"to keep track of which levels of the game have been unlocked."},{"type":"text","text":" "},{"type":"text","text":"It also tracks the current level for an individual player."}]},{"type":"codeListing","syntax":"swift","code":["struct LevelTracker {","   static var highestUnlockedLevel = 1","   var currentLevel = 1","","   static func unlock(_ level: Int) {","      if level > highestUnlockedLevel { highestUnlockedLevel = level }","   }","","   static func isUnlocked(_ level: Int) -> Bool {","      return level <= highestUnlockedLevel","   }","","   @discardableResult","   mutating func advance(to level: Int) -> Bool {","      if LevelTracker.isUnlocked(level) {","         currentLevel = level","         return true","      } else {","         return false","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" structure keeps track of the highest level that any player has unlocked."},{"type":"text","text":" "},{"type":"text","text":"This value is stored in a type property called "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" also defines two type functions to work with"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The first is a type function called "},{"type":"codeVoice","code":"unlock(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which updates the value of "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" whenever a new level is unlocked."},{"type":"text","text":" "},{"type":"text","text":"The second is a convenience type function called "},{"type":"codeVoice","code":"isUnlocked(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if a particular level number is already unlocked."},{"type":"text","text":" "},{"type":"text","text":"(Note that these type methods can access the "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" type property"},{"type":"text","text":" "},{"type":"text","text":"without your needing to write it as "},{"type":"codeVoice","code":"LevelTracker.highestUnlockedLevel"},{"type":"text","text":".)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to its type property and type methods,"},{"type":"text","text":" "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" tracks an individual player’s progress through the game."},{"type":"text","text":" "},{"type":"text","text":"It uses an instance property called "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" to track"},{"type":"text","text":" "},{"type":"text","text":"the level that a player is currently playing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To help manage the "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" defines an instance method called "},{"type":"codeVoice","code":"advance(to:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Before updating "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"this method checks whether the requested new level is already unlocked."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"advance(to:)"},{"type":"text","text":" method returns a Boolean value to indicate"},{"type":"text","text":" "},{"type":"text","text":"whether or not it was actually able to set "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because it’s not necessarily a mistake for"},{"type":"text","text":" "},{"type":"text","text":"code that calls the "},{"type":"codeVoice","code":"advance(to:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to ignore the return value,"},{"type":"text","text":" "},{"type":"text","text":"this function is marked with the "},{"type":"codeVoice","code":"@discardableResult"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"For more information about this attribute,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" structure is used with the "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" class, shown below,"},{"type":"text","text":" "},{"type":"text","text":"to track and update the progress of an individual player:"}]},{"type":"codeListing","syntax":"swift","code":["class Player {","   var tracker = LevelTracker()","   let playerName: String","   func complete(level: Int) {","      LevelTracker.unlock(level + 1)","      tracker.advance(to: level + 1)","   }","   init(name: String) {","      playerName = name","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" class creates a new instance of "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" "},{"type":"text","text":"to track that player’s progress."},{"type":"text","text":" "},{"type":"text","text":"It also provides a method called "},{"type":"codeVoice","code":"complete(level:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is called whenever a player completes a particular level."},{"type":"text","text":" "},{"type":"text","text":"This method unlocks the next level for all players"},{"type":"text","text":" "},{"type":"text","text":"and updates the player’s progress to move them to the next level."},{"type":"text","text":" "},{"type":"text","text":"(The Boolean return value of "},{"type":"codeVoice","code":"advance(to:)"},{"type":"text","text":" is ignored,"},{"type":"text","text":" "},{"type":"text","text":"because the level is known to have been unlocked"},{"type":"text","text":" "},{"type":"text","text":"by the call to "},{"type":"codeVoice","code":"LevelTracker.unlock(_:)"},{"type":"text","text":" on the previous line.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create an instance of the "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" class for a new player,"},{"type":"text","text":" "},{"type":"text","text":"and see what happens when the player completes level one:"}]},{"type":"codeListing","syntax":"swift","code":["var player = Player(name: \"Argyrios\")","player.complete(level: 1)","print(\"highest unlocked level is now \\(LevelTracker.highestUnlockedLevel)\")","\/\/ Prints \"highest unlocked level is now 2\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a second player, whom you try to move to a level"},{"type":"text","text":" "},{"type":"text","text":"that’s not yet unlocked by any player in the game,"},{"type":"text","text":" "},{"type":"text","text":"the attempt to set the player’s current level fails:"}]},{"type":"codeListing","syntax":"swift","code":["player = Player(name: \"Beto\")","if player.tracker.advance(to: 6) {","   print(\"player is now on level 6\")","} else {","   print(\"level 6 hasn't yet been unlocked\")","}","\/\/ Prints \"level 6 hasn't yet been unlocked\""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/methods"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Methods","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Stored-Properties-of-Constant-Structure-Instances":{"abstract":[],"title":"Stored Properties of Constant Structure Instances","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Stored-Properties-of-Constant-Structure-Instances","url":"\/documentation\/the-swift-programming-language\/properties#Stored-Properties-of-Constant-Structure-Instances"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Function-Argument-Labels-and-Parameter-Names":{"abstract":[],"title":"Function Argument Labels and Parameter Names","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names","url":"\/documentation\/the-swift-programming-language\/functions#Function-Argument-Labels-and-Parameter-Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","title":"Attributes","abstract":[{"type":"text","text":"There are two kinds of attributes in Swift —"},{"type":"text","text":" "},{"type":"text","text":"those that apply to declarations and those that apply to types."},{"type":"text","text":" "},{"type":"text","text":"An attribute provides additional information about the declaration or type."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"discardableResult"},{"type":"text","text":" attribute on a function declaration indicates that,"},{"type":"text","text":" "},{"type":"text","text":"although the function returns a value,"},{"type":"text","text":" "},{"type":"text","text":"the compiler shouldn’t generate a warning if the return value is unused."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"}}}