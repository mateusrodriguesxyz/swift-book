{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In most cases, tokens are generated from the characters of a Swift source file"},{"type":"text","text":" "},{"type":"text","text":"by considering the longest possible substring from the input text,"},{"type":"text","text":" "},{"type":"text","text":"within the constraints of the grammar that are specified below."},{"type":"text","text":" "},{"type":"text","text":"This behavior is referred to as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"longest match"}]},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"maximal munch"}]},{"type":"text","text":"."}]},{"anchor":"Whitespace-and-Comments","level":2,"type":"heading","text":"Whitespace and Comments"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whitespace has two uses: to separate tokens in the source file"},{"type":"text","text":" "},{"type":"text","text":"and to distinguish between prefix, postfix, and infix operators"},{"type":"text","text":" "},{"type":"text","text":"(see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"but is otherwise ignored."},{"type":"text","text":" "},{"type":"text","text":"The following characters are considered whitespace:"},{"type":"text","text":" "},{"type":"text","text":"space (U+0020),"},{"type":"text","text":" "},{"type":"text","text":"line feed (U+000A),"},{"type":"text","text":" "},{"type":"text","text":"carriage return (U+000D),"},{"type":"text","text":" "},{"type":"text","text":"horizontal tab (U+0009),"},{"type":"text","text":" "},{"type":"text","text":"vertical tab (U+000B),"},{"type":"text","text":" "},{"type":"text","text":"form feed (U+000C)"},{"type":"text","text":" "},{"type":"text","text":"and null (U+0000)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comments are treated as whitespace by the compiler."},{"type":"text","text":" "},{"type":"text","text":"Single line comments begin with "},{"type":"codeVoice","code":"\/\/"},{"type":"text","text":" "},{"type":"text","text":"and continue until a line feed (U+000A)  or carriage return (U+000D)."},{"type":"text","text":" "},{"type":"text","text":"Multiline comments begin with "},{"type":"codeVoice","code":"\/*"},{"type":"text","text":" and end with "},{"type":"codeVoice","code":"*\/"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Nesting multiline comments is allowed,"},{"type":"text","text":" "},{"type":"text","text":"but the comment markers must be balanced."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comments can contain additional formatting and markup,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of whitespace","","whitespace --> whitespace-item whitespace-OPT","whitespace-item --> line-break","whitespace-item --> inline-space","whitespace-item --> comment","whitespace-item --> multiline-comment","whitespace-item --> U+0000, U+000B, or U+000C","","line-break --> U+000A","line-break --> U+000D","line-break --> U+000D followed by U+000A","","inline-spaces --> inline-space inline-spaces-OPT","inline-space --> U+0009 or U+0020","","comment --> ``\/\/`` comment-text line-break","multiline-comment --> ``\/*`` multiline-comment-text ``*\/``","","comment-text --> comment-text-item comment-text-OPT","comment-text-item --> Any Unicode scalar value except U+000A or U+000D","","multiline-comment-text --> multiline-comment-text-item multiline-comment-text-OPT","multiline-comment-text-item --> multiline-comment","multiline-comment-text-item --> comment-text-item","multiline-comment-text-item --> Any Unicode scalar value except ``\/*`` or ``*\/``"]},{"anchor":"Identifiers","level":2,"type":"heading","text":"Identifiers"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Identifiers"}]},{"type":"text","text":" begin with"},{"type":"text","text":" "},{"type":"text","text":"an uppercase or lowercase letter A through Z,"},{"type":"text","text":" "},{"type":"text","text":"an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"a noncombining alphanumeric Unicode character"},{"type":"text","text":" "},{"type":"text","text":"in the Basic Multilingual Plane,"},{"type":"text","text":" "},{"type":"text","text":"or a character outside the Basic Multilingual Plane"},{"type":"text","text":" "},{"type":"text","text":"that isn’t in a Private Use Area."},{"type":"text","text":" "},{"type":"text","text":"After the first character,"},{"type":"text","text":" "},{"type":"text","text":"digits and combining Unicode characters are also allowed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Treat identifiers that begin with an underscore as internal,"},{"type":"text","text":" "},{"type":"text","text":"even if their declaration has the "},{"type":"codeVoice","code":"public"},{"type":"text","text":" access-level modifier."},{"type":"text","text":" "},{"type":"text","text":"This convention lets framework authors mark part of an API"},{"type":"text","text":" "},{"type":"text","text":"that clients must not interact with or depend on,"},{"type":"text","text":" "},{"type":"text","text":"even though some limitation requires the declaration to be public."},{"type":"text","text":" "},{"type":"text","text":"In addition,"},{"type":"text","text":" "},{"type":"text","text":"identifiers that begin with two underscores"},{"type":"text","text":" "},{"type":"text","text":"are reserved for the Swift compiler and standard library."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use a reserved word as an identifier,"},{"type":"text","text":" "},{"type":"text","text":"put a backtick (`) before and after it."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"type":"codeVoice","code":"class"},{"type":"text","text":" isn’t a valid identifier,"},{"type":"text","text":" "},{"type":"text","text":"but `"},{"type":"codeVoice","code":"class"},{"type":"text","text":"` is valid."},{"type":"text","text":" "},{"type":"text","text":"The backticks aren’t considered part of the identifier;"},{"type":"text","text":" "},{"type":"text","text":"`"},{"type":"codeVoice","code":"x"},{"type":"text","text":"` and "},{"type":"codeVoice","code":"x"},{"type":"text","text":" have the same meaning."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside a closure with no explicit parameter names,"},{"type":"text","text":" "},{"type":"text","text":"the parameters are implicitly named "},{"type":"codeVoice","code":"$0"},{"type":"text","text":", "},{"type":"codeVoice","code":"$1"},{"type":"text","text":", "},{"type":"codeVoice","code":"$2"},{"type":"text","text":", and so on."},{"type":"text","text":" "},{"type":"text","text":"These names are valid identifiers within the scope of the closure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler synthesizes identifiers that begin with a dollar sign ("},{"type":"codeVoice","code":"$"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"for properties that have a property wrapper projection."},{"type":"text","text":" "},{"type":"text","text":"Your code can interact with these identifiers,"},{"type":"text","text":" "},{"type":"text","text":"but you can’t declare identifiers with that prefix."},{"type":"text","text":" "},{"type":"text","text":"For more information, see the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of an identifier","","identifier --> identifier-head identifier-characters-OPT","identifier --> ````` identifier-head identifier-characters-OPT `````","identifier --> implicit-parameter-name","identifier --> property-wrapper-projection","identifier-list --> identifier | identifier ``,`` identifier-list","","identifier-head --> Upper- or lowercase letter A through Z","identifier-head --> ``_``","identifier-head --> U+00A8, U+00AA, U+00AD, U+00AF, U+00B2--U+00B5, or U+00B7--U+00BA","identifier-head --> U+00BC--U+00BE, U+00C0--U+00D6, U+00D8--U+00F6, or U+00F8--U+00FF","identifier-head --> U+0100--U+02FF, U+0370--U+167F, U+1681--U+180D, or U+180F--U+1DBF","identifier-head --> U+1E00--U+1FFF","identifier-head --> U+200B--U+200D, U+202A--U+202E, U+203F--U+2040, U+2054, or U+2060--U+206F","identifier-head --> U+2070--U+20CF, U+2100--U+218F, U+2460--U+24FF, or U+2776--U+2793","identifier-head --> U+2C00--U+2DFF or U+2E80--U+2FFF","identifier-head --> U+3004--U+3007, U+3021--U+302F, U+3031--U+303F, or U+3040--U+D7FF","identifier-head --> U+F900--U+FD3D, U+FD40--U+FDCF, U+FDF0--U+FE1F, or U+FE30--U+FE44","identifier-head --> U+FE47--U+FFFD","identifier-head --> U+10000--U+1FFFD, U+20000--U+2FFFD, U+30000--U+3FFFD, or U+40000--U+4FFFD","identifier-head --> U+50000--U+5FFFD, U+60000--U+6FFFD, U+70000--U+7FFFD, or U+80000--U+8FFFD","identifier-head --> U+90000--U+9FFFD, U+A0000--U+AFFFD, U+B0000--U+BFFFD, or U+C0000--U+CFFFD","identifier-head --> U+D0000--U+DFFFD or U+E0000--U+EFFFD","","identifier-character --> Digit 0 through 9","identifier-character --> U+0300--U+036F, U+1DC0--U+1DFF, U+20D0--U+20FF, or U+FE20--U+FE2F","identifier-character --> identifier-head","identifier-characters --> identifier-character identifier-characters-OPT","","implicit-parameter-name --> ``$`` decimal-digits","property-wrapper-projection --> ``$`` identifier-characters"]},{"anchor":"Keywords-and-Punctuation","level":2,"type":"heading","text":"Keywords and Punctuation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following keywords are reserved and can’t be used as identifiers,"},{"type":"text","text":" "},{"type":"text","text":"unless they’re escaped with backticks,"},{"type":"text","text":" "},{"type":"text","text":"as described above in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Keywords other than "},{"type":"codeVoice","code":"inout"},{"type":"text","text":", "},{"type":"codeVoice","code":"var"},{"type":"text","text":", and "},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"can be used as parameter names"},{"type":"text","text":" "},{"type":"text","text":"in a function declaration or function call"},{"type":"text","text":" "},{"type":"text","text":"without being escaped with backticks."},{"type":"text","text":" "},{"type":"text","text":"When a member has the same name as a keyword,"},{"type":"text","text":" "},{"type":"text","text":"references to that member don’t need to be escaped with backticks,"},{"type":"text","text":" "},{"type":"text","text":"except when there’s ambiguity between referring to the member"},{"type":"text","text":" "},{"type":"text","text":"and using the keyword —"},{"type":"text","text":" "},{"type":"text","text":"for example, "},{"type":"codeVoice","code":"self"},{"type":"text","text":", "},{"type":"codeVoice","code":"Type"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Protocol"},{"type":"text","text":" "},{"type":"text","text":"have special meaning in an explicit member expression,"},{"type":"text","text":" "},{"type":"text","text":"so they must be escaped with backticks in that context."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords used in declarations:"},{"type":"text","text":" "},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"class"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"enum"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"extension"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"func"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"import"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"init"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"inout"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"internal"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"let"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"open"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"operator"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"private"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"precedencegroup"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"public"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"rethrows"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"static"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"struct"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"typealias"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"var"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords used in statements:"},{"type":"text","text":" "},{"type":"codeVoice","code":"break"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"case"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"catch"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"continue"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"default"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"defer"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"do"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"else"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"for"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"guard"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"in"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"return"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"throw"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"switch"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"where"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"while"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords used in expressions and types:"},{"type":"text","text":" "},{"type":"codeVoice","code":"Any"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"as"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"await"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"catch"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"is"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"rethrows"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"Self"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"super"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"throw"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"throws"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"try"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords used in patterns:"},{"type":"text","text":" "},{"type":"codeVoice","code":"_"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords that begin with a number sign ("},{"type":"codeVoice","code":"#"},{"type":"text","text":"):"},{"type":"text","text":" "},{"type":"codeVoice","code":"#available"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#colorLiteral"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#column"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#dsohandle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#elseif"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#else"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#endif"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#error"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#fileID"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#fileLiteral"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#file"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#function"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#if"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#imageLiteral"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#keyPath"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#line"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#selector"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#sourceLocation"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"#warning"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords reserved in particular contexts:"},{"type":"text","text":" "},{"type":"codeVoice","code":"associativity"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"convenience"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"dynamic"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"final"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"get"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"indirect"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"infix"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"left"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"none"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"nonmutating"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"optional"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"override"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"postfix"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"precedence"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"prefix"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"Protocol"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"required"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"right"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"set"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"some"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"Type"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"weak"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Outside the context in which they appear in the grammar,"},{"type":"text","text":" "},{"type":"text","text":"they can be used as identifiers."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following tokens are reserved as punctuation"},{"type":"text","text":" "},{"type":"text","text":"and can’t be used as custom operators:"},{"type":"text","text":" "},{"type":"codeVoice","code":"("},{"type":"text","text":", "},{"type":"codeVoice","code":")"},{"type":"text","text":", "},{"type":"codeVoice","code":"{"},{"type":"text","text":", "},{"type":"codeVoice","code":"}"},{"type":"text","text":", "},{"type":"codeVoice","code":"["},{"type":"text","text":", "},{"type":"codeVoice","code":"]"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"."},{"type":"text","text":", "},{"type":"codeVoice","code":","},{"type":"text","text":", "},{"type":"codeVoice","code":":"},{"type":"text","text":", "},{"type":"codeVoice","code":";"},{"type":"text","text":", "},{"type":"codeVoice","code":"="},{"type":"text","text":", "},{"type":"codeVoice","code":"@"},{"type":"text","text":", "},{"type":"codeVoice","code":"#"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"&"},{"type":"text","text":" (as a prefix operator), "},{"type":"codeVoice","code":"->"},{"type":"text","text":", "},{"type":"codeVoice","code":"\\\\``, "},{"type":"text","text":"?"},{"type":"codeVoice","code":", and "},{"type":"text","text":"!` (as a postfix operator)."}]},{"anchor":"Literals","level":2,"type":"heading","text":"Literals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"literal"}]},{"type":"text","text":" is the source code representation of a value of a type,"},{"type":"text","text":" "},{"type":"text","text":"such as a number or string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following are examples of literals:"}]},{"type":"codeListing","syntax":"swift","code":["42               \/\/ Integer literal","3.14159          \/\/ Floating-point literal","\"Hello, world!\"  \/\/ String literal","\/Hello, .*\/      \/\/ Regular expression literal","true             \/\/ Boolean literal"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A literal doesn’t have a type on its own."},{"type":"text","text":" "},{"type":"text","text":"Instead, a literal is parsed as having infinite precision and Swift’s type inference"},{"type":"text","text":" "},{"type":"text","text":"attempts to infer a type for the literal. For example,"},{"type":"text","text":" "},{"type":"text","text":"in the declaration "},{"type":"codeVoice","code":"let x: Int8 = 42"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift uses the explicit type annotation ("},{"type":"codeVoice","code":": Int8"},{"type":"text","text":") to infer"},{"type":"text","text":" "},{"type":"text","text":"that the type of the integer literal "},{"type":"codeVoice","code":"42"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int8"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If there isn’t suitable type information available,"},{"type":"text","text":" "},{"type":"text","text":"Swift infers that the literal’s type is one of the default literal types"},{"type":"text","text":" "},{"type":"text","text":"defined in the Swift standard library"},{"type":"text","text":" "},{"type":"text","text":"and listed in the table below."},{"type":"text","text":" "},{"type":"text","text":"When specifying the type annotation for a literal value,"},{"type":"text","text":" "},{"type":"text","text":"the annotation’s type must be a type that can be instantiated from that literal value."},{"type":"text","text":" "},{"type":"text","text":"That is, the type must conform to the Swift standard library protocols"},{"type":"text","text":" "},{"type":"text","text":"listed in the table below."}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Literal"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Default type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integer"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Int"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ExpressibleByIntegerLiteral"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Double"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ExpressibleByFloatLiteral"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"type":"text","text":", "},{"type":"codeVoice","code":"ExpressibleByUnicodeScalarLiteral"},{"type":"text","text":" for string literals that contain only a single Unicode scalar, "},{"type":"codeVoice","code":"ExpressibleByExtendedGraphemeClusterLiteral"},{"type":"text","text":" for string literals that contain only a single extended grapheme cluster"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Regular expression"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Regex"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"None"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Boolean"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Bool"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ExpressibleByBooleanLiteral"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, in the declaration "},{"type":"codeVoice","code":"let str = \"Hello, world\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the default inferred type of the string"},{"type":"text","text":" "},{"type":"text","text":"literal "},{"type":"codeVoice","code":"\"Hello, world\""},{"type":"text","text":" is "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Also, "},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"ExpressibleByIntegerLiteral"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"and therefore it can be used in the type annotation for the integer literal "},{"type":"codeVoice","code":"42"},{"type":"text","text":" "},{"type":"text","text":"in the declaration "},{"type":"codeVoice","code":"let x: Int8 = 42"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a literal","","literal --> numeric-literal | string-literal | regular-expression-literal | boolean-literal | nil-literal","","numeric-literal --> ``-``-OPT integer-literal | ``-``-OPT floating-point-literal","boolean-literal --> ``true`` | ``false``","nil-literal --> ``nil``"]},{"anchor":"Integer-Literals","level":3,"type":"heading","text":"Integer Literals"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Integer literals"}]},{"type":"text","text":" represent integer values of unspecified precision."},{"type":"text","text":" "},{"type":"text","text":"By default, integer literals are expressed in decimal;"},{"type":"text","text":" "},{"type":"text","text":"you can specify an alternate base using a prefix."},{"type":"text","text":" "},{"type":"text","text":"Binary literals begin with "},{"type":"codeVoice","code":"0b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"octal literals begin with "},{"type":"codeVoice","code":"0o"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and hexadecimal literals begin with "},{"type":"codeVoice","code":"0x"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decimal literals contain the digits "},{"type":"codeVoice","code":"0"},{"type":"text","text":" through "},{"type":"codeVoice","code":"9"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Binary literals contain "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"1"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"octal literals contain "},{"type":"codeVoice","code":"0"},{"type":"text","text":" through "},{"type":"codeVoice","code":"7"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and hexadecimal literals contain "},{"type":"codeVoice","code":"0"},{"type":"text","text":" through "},{"type":"codeVoice","code":"9"},{"type":"text","text":" "},{"type":"text","text":"as well as "},{"type":"codeVoice","code":"A"},{"type":"text","text":" through "},{"type":"codeVoice","code":"F"},{"type":"text","text":" in upper- or lowercase."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Negative integers literals are expressed by prepending a minus sign ("},{"type":"codeVoice","code":"-"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to an integer literal, as in "},{"type":"codeVoice","code":"-42"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Underscores ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") are allowed between digits for readability,"},{"type":"text","text":" "},{"type":"text","text":"but they’re ignored and therefore don’t affect the value of the literal."},{"type":"text","text":" "},{"type":"text","text":"Integer literals can begin with leading zeros ("},{"type":"codeVoice","code":"0"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"but they’re likewise ignored and don’t affect the base or value of the literal."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless otherwise specified,"},{"type":"text","text":" "},{"type":"text","text":"the default inferred type of an integer literal is the Swift standard library type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The Swift standard library also defines types for various sizes of"},{"type":"text","text":" "},{"type":"text","text":"signed and unsigned integers,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Integers"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of an integer literal","","integer-literal --> binary-literal","integer-literal --> octal-literal","integer-literal --> decimal-literal","integer-literal --> hexadecimal-literal","","binary-literal --> ``0b`` binary-digit binary-literal-characters-OPT","binary-digit --> Digit 0 or 1","binary-literal-character --> binary-digit | ``_``","binary-literal-characters --> binary-literal-character binary-literal-characters-OPT","","octal-literal --> ``0o`` octal-digit octal-literal-characters-OPT","octal-digit --> Digit 0 through 7","octal-literal-character --> octal-digit | ``_``","octal-literal-characters --> octal-literal-character octal-literal-characters-OPT","","decimal-literal --> decimal-digit decimal-literal-characters-OPT","decimal-digit --> Digit 0 through 9","decimal-digits --> decimal-digit decimal-digits-OPT","decimal-literal-character --> decimal-digit | ``_``","decimal-literal-characters --> decimal-literal-character decimal-literal-characters-OPT","","hexadecimal-literal --> ``0x`` hexadecimal-digit hexadecimal-literal-characters-OPT","hexadecimal-digit --> Digit 0 through 9, a through f, or A through F","hexadecimal-literal-character --> hexadecimal-digit | ``_``","hexadecimal-literal-characters --> hexadecimal-literal-character hexadecimal-literal-characters-OPT"]},{"anchor":"Floating-Point-Literals","level":3,"type":"heading","text":"Floating-Point Literals"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Floating-point literals"}]},{"type":"text","text":" represent floating-point values of unspecified precision."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, floating-point literals are expressed in decimal (with no prefix),"},{"type":"text","text":" "},{"type":"text","text":"but they can also be expressed in hexadecimal (with a "},{"type":"codeVoice","code":"0x"},{"type":"text","text":" prefix)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decimal floating-point literals consist of a sequence of decimal digits"},{"type":"text","text":" "},{"type":"text","text":"followed by either a decimal fraction, a decimal exponent, or both."},{"type":"text","text":" "},{"type":"text","text":"The decimal fraction consists of a decimal point ("},{"type":"codeVoice","code":"."},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"followed by a sequence of decimal digits."},{"type":"text","text":" "},{"type":"text","text":"The exponent consists of an upper- or lowercase "},{"type":"codeVoice","code":"e"},{"type":"text","text":" prefix"},{"type":"text","text":" "},{"type":"text","text":"followed by a sequence of decimal digits that indicates"},{"type":"text","text":" "},{"type":"text","text":"what power of 10 the value preceding the "},{"type":"codeVoice","code":"e"},{"type":"text","text":" is multiplied by."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"type":"codeVoice","code":"1.25e2"},{"type":"text","text":" represents 1.25 x 10²,"},{"type":"text","text":" "},{"type":"text","text":"which evaluates to "},{"type":"codeVoice","code":"125.0"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"1.25e-2"},{"type":"text","text":" represents 1.25 x 10⁻²,"},{"type":"text","text":" "},{"type":"text","text":"which evaluates to "},{"type":"codeVoice","code":"0.0125"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hexadecimal floating-point literals consist of a "},{"type":"codeVoice","code":"0x"},{"type":"text","text":" prefix,"},{"type":"text","text":" "},{"type":"text","text":"followed by an optional hexadecimal fraction,"},{"type":"text","text":" "},{"type":"text","text":"followed by a hexadecimal exponent."},{"type":"text","text":" "},{"type":"text","text":"The hexadecimal fraction consists of a decimal point"},{"type":"text","text":" "},{"type":"text","text":"followed by a sequence of hexadecimal digits."},{"type":"text","text":" "},{"type":"text","text":"The exponent consists of an upper- or lowercase "},{"type":"codeVoice","code":"p"},{"type":"text","text":" prefix"},{"type":"text","text":" "},{"type":"text","text":"followed by a sequence of decimal digits that indicates"},{"type":"text","text":" "},{"type":"text","text":"what power of 2 the value preceding the "},{"type":"codeVoice","code":"p"},{"type":"text","text":" is multiplied by."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"type":"codeVoice","code":"0xFp2"},{"type":"text","text":" represents 15 x 2²,"},{"type":"text","text":" "},{"type":"text","text":"which evaluates to "},{"type":"codeVoice","code":"60"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"0xFp-2"},{"type":"text","text":" represents 15 x 2⁻²,"},{"type":"text","text":" "},{"type":"text","text":"which evaluates to "},{"type":"codeVoice","code":"3.75"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Negative floating-point literals are expressed by prepending a minus sign ("},{"type":"codeVoice","code":"-"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to a floating-point literal, as in "},{"type":"codeVoice","code":"-42.5"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Underscores ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") are allowed between digits for readability,"},{"type":"text","text":" "},{"type":"text","text":"but they’re ignored and therefore don’t affect the value of the literal."},{"type":"text","text":" "},{"type":"text","text":"Floating-point literals can begin with leading zeros ("},{"type":"codeVoice","code":"0"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"but they’re likewise ignored and don’t affect the base or value of the literal."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless otherwise specified,"},{"type":"text","text":" "},{"type":"text","text":"the default inferred type of a floating-point literal is the Swift standard library type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents a 64-bit floating-point number."},{"type":"text","text":" "},{"type":"text","text":"The Swift standard library also defines a "},{"type":"codeVoice","code":"Float"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"which represents a 32-bit floating-point number."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a floating-point literal","","floating-point-literal --> decimal-literal decimal-fraction-OPT decimal-exponent-OPT","floating-point-literal --> hexadecimal-literal hexadecimal-fraction-OPT hexadecimal-exponent","","decimal-fraction --> ``.`` decimal-literal","decimal-exponent --> floating-point-e sign-OPT decimal-literal","","hexadecimal-fraction --> ``.`` hexadecimal-digit hexadecimal-literal-characters-OPT","hexadecimal-exponent --> floating-point-p sign-OPT decimal-literal","","floating-point-e --> ``e`` | ``E``","floating-point-p --> ``p`` | ``P``","sign --> ``+`` | ``-``"]},{"anchor":"String-Literals","level":3,"type":"heading","text":"String Literals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A string literal is a sequence of characters surrounded by quotation marks."},{"type":"text","text":" "},{"type":"text","text":"A single-line string literal is surrounded by double quotation marks"},{"type":"text","text":" "},{"type":"text","text":"and has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["\"<#characters#>\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"String literals can’t contain"},{"type":"text","text":" "},{"type":"text","text":"an unescaped double quotation mark ("},{"type":"codeVoice","code":"\""},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"an unescaped backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"a carriage return, or a line feed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A multiline string literal is surrounded by three double quotation marks"},{"type":"text","text":" "},{"type":"text","text":"and has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["\"\"\"","<#characters#>","\"\"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike a single-line string literal,"},{"type":"text","text":" "},{"type":"text","text":"a multiline string literal can contain"},{"type":"text","text":" "},{"type":"text","text":"unescaped double quotation marks ("},{"type":"codeVoice","code":"\""},{"type":"text","text":"), carriage returns, and line feeds."},{"type":"text","text":" "},{"type":"text","text":"It can’t contain three unescaped double quotation marks next to each other."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The line break after the "},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":" "},{"type":"text","text":"that begins the multiline string literal"},{"type":"text","text":" "},{"type":"text","text":"isn’t part of the string."},{"type":"text","text":" "},{"type":"text","text":"The line break before the "},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":" "},{"type":"text","text":"that ends the literal is also not part of the string."},{"type":"text","text":" "},{"type":"text","text":"To make a multiline string literal"},{"type":"text","text":" "},{"type":"text","text":"that begins or ends with a line feed,"},{"type":"text","text":" "},{"type":"text","text":"write a blank line as its first or last line."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A multiline string literal can be indented"},{"type":"text","text":" "},{"type":"text","text":"using any combination of spaces and tabs;"},{"type":"text","text":" "},{"type":"text","text":"this indentation isn’t included in the string."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":" that ends the literal"},{"type":"text","text":" "},{"type":"text","text":"determines the indentation:"},{"type":"text","text":" "},{"type":"text","text":"Every nonblank line in the literal must begin"},{"type":"text","text":" "},{"type":"text","text":"with exactly the same indentation"},{"type":"text","text":" "},{"type":"text","text":"that appears before the closing "},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"there’s no conversion between tabs and spaces."},{"type":"text","text":" "},{"type":"text","text":"You can include additional spaces and tabs after that indentation;"},{"type":"text","text":" "},{"type":"text","text":"those spaces and tabs appear in the string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Line breaks in a multiline string literal are"},{"type":"text","text":" "},{"type":"text","text":"normalized to use the line feed character."},{"type":"text","text":" "},{"type":"text","text":"Even if your source file has a mix of carriage returns and line feeds,"},{"type":"text","text":" "},{"type":"text","text":"all of the line breaks in the string will be the same."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a multiline string literal,"},{"type":"text","text":" "},{"type":"text","text":"writing a backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":") at the end of a line"},{"type":"text","text":" "},{"type":"text","text":"omits that line break from the string."},{"type":"text","text":" "},{"type":"text","text":"Any whitespace between the backslash and the line break"},{"type":"text","text":" "},{"type":"text","text":"is also omitted."},{"type":"text","text":" "},{"type":"text","text":"You can use this syntax"},{"type":"text","text":" "},{"type":"text","text":"to hard wrap a multiline string literal in your source code,"},{"type":"text","text":" "},{"type":"text","text":"without changing the value of the resulting string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Special characters"},{"type":"text","text":" "},{"type":"text","text":"can be included in string literals"},{"type":"text","text":" "},{"type":"text","text":"of both the single-line and multiline forms"},{"type":"text","text":" "},{"type":"text","text":"using the following escape sequences:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Null character ("},{"type":"codeVoice","code":"\\0"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Backslash ("},{"type":"codeVoice","code":"\\\\"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Horizontal tab ("},{"type":"codeVoice","code":"\\t"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Line feed ("},{"type":"codeVoice","code":"\\n"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Carriage return ("},{"type":"codeVoice","code":"\\r"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Double quotation mark ("},{"type":"codeVoice","code":"\\\""},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Single quotation mark ("},{"type":"codeVoice","code":"\\'"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unicode scalar ("},{"type":"codeVoice","code":"\\\\u{"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"codeVoice","code":"}"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is a hexadecimal number"},{"type":"text","text":" "},{"type":"text","text":"that has one to eight digits"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of an expression can be inserted into a string literal"},{"type":"text","text":" "},{"type":"text","text":"by placing the expression in parentheses after a backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The interpolated expression can contain a string literal,"},{"type":"text","text":" "},{"type":"text","text":"but can’t contain an unescaped backslash,"},{"type":"text","text":" "},{"type":"text","text":"a carriage return, or a line feed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, all of the following string literals have the same value:"}]},{"type":"codeListing","syntax":"swift","code":["\"1 2 3\"","\"1 2 \\(\"3\")\"","\"1 2 \\(3)\"","\"1 2 \\(1 + 2)\"","let x = 3; \"1 2 \\(x)\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A string delimited by extended delimiters is a sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"surrounded by quotation marks and a balanced set of one or more number signs ("},{"type":"codeVoice","code":"#"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"A string delimited by extended delimiters has the following forms:"}]},{"type":"codeListing","syntax":"markdown","code":["#\"<#characters#>\"#","","#\"\"\"","<#characters#>","\"\"\"#"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Special characters in a string delimited by extended delimiters"},{"type":"text","text":" "},{"type":"text","text":"appear in the resulting string as normal characters"},{"type":"text","text":" "},{"type":"text","text":"rather than as special characters."},{"type":"text","text":" "},{"type":"text","text":"You can use extended delimiters to create strings with characters"},{"type":"text","text":" "},{"type":"text","text":"that would ordinarily have a special effect"},{"type":"text","text":" "},{"type":"text","text":"such as generating a string interpolation,"},{"type":"text","text":" "},{"type":"text","text":"starting an escape sequence,"},{"type":"text","text":" "},{"type":"text","text":"or terminating the string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example shows a string literal"},{"type":"text","text":" "},{"type":"text","text":"and a string delimited by extended delimiters"},{"type":"text","text":" "},{"type":"text","text":"that create equivalent string values:"}]},{"type":"codeListing","syntax":"swift","code":["let string = #\"\\(x) \\ \" \\u{2603}\"#","let escaped = \"\\\\(x) \\\\ \\\" \\\\u{2603}\"","print(string)","\/\/ Prints \"\\(x) \\ \" \\u{2603}\"","print(string == escaped)","\/\/ Prints \"true\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use more than one number sign to form"},{"type":"text","text":" "},{"type":"text","text":"a string delimited by extended delimiters,"},{"type":"text","text":" "},{"type":"text","text":"don’t place whitespace in between the number signs:"}]},{"type":"codeListing","syntax":"swift","code":["print(###\"Line 1\\###nLine 2\"###) \/\/ OK","print(# # #\"Line 1\\# # #nLine 2\"# # #) \/\/ Error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiline string literals that you create using extended delimiters"},{"type":"text","text":" "},{"type":"text","text":"have the same indentation requirements as regular multiline string literals."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default inferred type of a string literal is "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For more information about the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"String literals that are concatenated by the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"are concatenated at compile time."},{"type":"text","text":" "},{"type":"text","text":"For example, the values of "},{"type":"codeVoice","code":"textA"},{"type":"text","text":" and "},{"type":"codeVoice","code":"textB"},{"type":"text","text":" "},{"type":"text","text":"in the example below are identical —"},{"type":"text","text":" "},{"type":"text","text":"no runtime concatenation is performed."}]},{"type":"codeListing","syntax":"swift","code":["let textA = \"Hello \" + \"world\"","let textB = \"Hello world\""]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a string literal","","string-literal --> static-string-literal | interpolated-string-literal","","string-literal-opening-delimiter --> extended-string-literal-delimiter-OPT ``\"``","string-literal-closing-delimiter --> ``\"`` extended-string-literal-delimiter-OPT","","static-string-literal --> string-literal-opening-delimiter quoted-text-OPT string-literal-closing-delimiter","static-string-literal --> multiline-string-literal-opening-delimiter multiline-quoted-text-OPT multiline-string-literal-closing-delimiter","","multiline-string-literal-opening-delimiter --> extended-string-literal-delimiter-OPT ``\"\"\"``","multiline-string-literal-closing-delimiter --> ``\"\"\"`` extended-string-literal-delimiter-OPT","extended-string-literal-delimiter --> ``#`` extended-string-literal-delimiter-OPT","","quoted-text --> quoted-text-item quoted-text-OPT","quoted-text-item --> escaped-character","quoted-text-item --> Any Unicode scalar value except ``\"``, ``\\``, U+000A, or U+000D","","multiline-quoted-text --> multiline-quoted-text-item multiline-quoted-text-OPT","multiline-quoted-text-item --> escaped-character","multiline-quoted-text-item --> Any Unicode scalar value except ``\\``","multiline-quoted-text-item --> escaped-newline","","interpolated-string-literal --> string-literal-opening-delimiter interpolated-text-OPT string-literal-closing-delimiter","interpolated-string-literal --> multiline-string-literal-opening-delimiter multiline-interpolated-text-OPT multiline-string-literal-closing-delimiter","","interpolated-text --> interpolated-text-item interpolated-text-OPT","interpolated-text-item --> ``\\(`` expression ``)`` | quoted-text-item","","multiline-interpolated-text --> multiline-interpolated-text-item multiline-interpolated-text-OPT","multiline-interpolated-text-item --> ``\\(`` expression ``)`` | multiline-quoted-text-item","","escape-sequence --> ``\\`` extended-string-literal-delimiter","escaped-character --> escape-sequence ``0`` | escape-sequence ``\\`` | escape-sequence ``t`` | escape-sequence ``n`` | escape-sequence ``r`` | escape-sequence ``\"`` | escape-sequence ``'``","escaped-character -->  escape-sequence ``u`` ``{`` unicode-scalar-digits ``}``","unicode-scalar-digits --> Between one and eight hexadecimal digits","","escaped-newline -->  escape-sequence inline-spaces-OPT line-break"]},{"anchor":"Regular-Expression-Literals","level":3,"type":"heading","text":"Regular Expression Literals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A regular expression literal is a sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"surrounded by slashes ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":") with the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["\/<#regular expression#>\/"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Regular expression literals"},{"type":"text","text":" "},{"type":"text","text":"must not begin with an unescaped tab or space,"},{"type":"text","text":" "},{"type":"text","text":"and they can’t contain"},{"type":"text","text":" "},{"type":"text","text":"an unescaped slash ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"a carriage return, or a line feed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Within a regular expression literal,"},{"type":"text","text":" "},{"type":"text","text":"a backslash is understood as a part of that regular expression,"},{"type":"text","text":" "},{"type":"text","text":"not just as an escape character like in string literals."},{"type":"text","text":" "},{"type":"text","text":"It indicates that the following special character"},{"type":"text","text":" "},{"type":"text","text":"should be interpreted literally,"},{"type":"text","text":" "},{"type":"text","text":"or that the following nonspecial character"},{"type":"text","text":" "},{"type":"text","text":"should be interpreted in a special way."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/\\(\/"},{"type":"text","text":" matches a single left parenthesis"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"\/\\d\/"},{"type":"text","text":" matches a single digit."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A regular expression literal delimited by extended delimiters"},{"type":"text","text":" "},{"type":"text","text":"is a sequence of characters surrounded by slashes ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and a balanced set of one or more number signs ("},{"type":"codeVoice","code":"#"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"A regular expression literal"},{"type":"text","text":" "},{"type":"text","text":"delimited by extended delimiters has the following forms:"}]},{"type":"codeListing","syntax":"markdown","code":["#\/<#regular expression#>\/#","","#\/","<#regular expression#>","\/#"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A regular expression literal that uses extended delimiters"},{"type":"text","text":" "},{"type":"text","text":"can begin with an unescaped space or tab,"},{"type":"text","text":" "},{"type":"text","text":"contain unescaped slashes ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and span across multiple lines."},{"type":"text","text":" "},{"type":"text","text":"For a multiline regular expression literal,"},{"type":"text","text":" "},{"type":"text","text":"the opening delimiter must be at the end of a line,"},{"type":"text","text":" "},{"type":"text","text":"and the closing delimiter must be on its own line."},{"type":"text","text":" "},{"type":"text","text":"Inside a multiline regular expression literal,"},{"type":"text","text":" "},{"type":"text","text":"the extended regular expression syntax is enabled by default —"},{"type":"text","text":" "},{"type":"text","text":"specifically, whitespace is ignored and comments are allowed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use more than one number sign to form"},{"type":"text","text":" "},{"type":"text","text":"a regular expression literal delimited by extended delimiters,"},{"type":"text","text":" "},{"type":"text","text":"don’t place whitespace in between the number signs:"}]},{"type":"codeListing","syntax":"swift","code":["let regex1 = ##\/abc\/##       \/\/ OK","let regex2 = # #\/abc\/# #     \/\/ Error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to make an empty regular expression literal,"},{"type":"text","text":" "},{"type":"text","text":"you must use the extended delimiter syntax."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a regular expression literal","","regular-expression-literal --> regular-expression-literal-opening-delimiter regular-expression regular-expression-literal-closing-delimiter","regular-expression --> Any regular expression","","regular-expression-literal-opening-delimiter --> extended-regular-expression-literal-delimiter-OPT ``\/``","regular-expression-literal-closing-delimiter --> ``\/`` extended-regular-expression-literal-delimiter-OPT","","extended-regular-expression-literal-delimiter --> ``#`` extended-regular-expression-literal-delimiter-OPT"]},{"anchor":"Operators","level":2,"type":"heading","text":"Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift standard library defines a number of operators for your use,"},{"type":"text","text":" "},{"type":"text","text":"many of which are discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The present section describes which characters can be used to define custom operators."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom operators can begin with one of the ASCII characters"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/"},{"type":"text","text":", "},{"type":"codeVoice","code":"="},{"type":"text","text":", "},{"type":"codeVoice","code":"-"},{"type":"text","text":", "},{"type":"codeVoice","code":"+"},{"type":"text","text":", "},{"type":"codeVoice","code":"!"},{"type":"text","text":", "},{"type":"codeVoice","code":"*"},{"type":"text","text":", "},{"type":"codeVoice","code":"%"},{"type":"text","text":", "},{"type":"codeVoice","code":"<"},{"type":"text","text":", "},{"type":"codeVoice","code":">"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"&"},{"type":"text","text":", "},{"type":"codeVoice","code":"|"},{"type":"text","text":", "},{"type":"codeVoice","code":"^"},{"type":"text","text":", "},{"type":"codeVoice","code":"?"},{"type":"text","text":", or "},{"type":"codeVoice","code":"~"},{"type":"text","text":", or one of the Unicode characters"},{"type":"text","text":" "},{"type":"text","text":"defined in the grammar below"},{"type":"text","text":" "},{"type":"text","text":"(which include characters from the"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Mathematical Operators"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Miscellaneous Symbols"}]},{"type":"text","text":", and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Dingbats"}]},{"type":"text","text":" "},{"type":"text","text":"Unicode blocks, among others)."},{"type":"text","text":" "},{"type":"text","text":"After the first character,"},{"type":"text","text":" "},{"type":"text","text":"combining Unicode characters are also allowed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also define custom operators"},{"type":"text","text":" "},{"type":"text","text":"that begin with a dot ("},{"type":"codeVoice","code":"."},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"These operators can contain additional dots."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"type":"codeVoice","code":".+."},{"type":"text","text":" is treated as a single operator."},{"type":"text","text":" "},{"type":"text","text":"If an operator doesn’t begin with a dot,"},{"type":"text","text":" "},{"type":"text","text":"it can’t contain a dot elsewhere."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"type":"codeVoice","code":"+.+"},{"type":"text","text":" is treated as"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator followed by the "},{"type":"codeVoice","code":".+"},{"type":"text","text":" operator."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although you can define custom operators that contain a question mark ("},{"type":"codeVoice","code":"?"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"they can’t consist of a single question mark character only."},{"type":"text","text":" "},{"type":"text","text":"Additionally, although operators can contain an exclamation point ("},{"type":"codeVoice","code":"!"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"postfix operators can’t begin with either a question mark or an exclamation point."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The tokens "},{"type":"codeVoice","code":"="},{"type":"text","text":", "},{"type":"codeVoice","code":"->"},{"type":"text","text":", "},{"type":"codeVoice","code":"\/\/"},{"type":"text","text":", "},{"type":"codeVoice","code":"\/*"},{"type":"text","text":", "},{"type":"codeVoice","code":"*\/"},{"type":"text","text":", "},{"type":"codeVoice","code":"."},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the prefix operators "},{"type":"codeVoice","code":"<"},{"type":"text","text":", "},{"type":"codeVoice","code":"&"},{"type":"text","text":", and "},{"type":"codeVoice","code":"?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the infix operator "},{"type":"codeVoice","code":"?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the postfix operators "},{"type":"codeVoice","code":">"},{"type":"text","text":", "},{"type":"codeVoice","code":"!"},{"type":"text","text":", and "},{"type":"codeVoice","code":"?"},{"type":"text","text":" are reserved."},{"type":"text","text":" "},{"type":"text","text":"These tokens can’t be overloaded, nor can they be used as custom operators."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The whitespace around an operator is used to determine"},{"type":"text","text":" "},{"type":"text","text":"whether an operator is used as a prefix operator, a postfix operator,"},{"type":"text","text":" "},{"type":"text","text":"or an infix operator. This behavior has the following rules:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If an operator has whitespace around both sides or around neither side,"},{"type":"text","text":" "},{"type":"text","text":"it’s treated as an infix operator."},{"type":"text","text":" "},{"type":"text","text":"As an example, the "},{"type":"codeVoice","code":"+++"},{"type":"text","text":" operator in "},{"type":"codeVoice","code":"a+++b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a +++ b"},{"type":"text","text":" is treated as an infix operator."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If an operator has whitespace on the left side only,"},{"type":"text","text":" "},{"type":"text","text":"it’s treated as a prefix unary operator."},{"type":"text","text":" "},{"type":"text","text":"As an example, the "},{"type":"codeVoice","code":"+++"},{"type":"text","text":" operator in "},{"type":"codeVoice","code":"a +++b"},{"type":"text","text":" is treated as a prefix unary operator."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If an operator has whitespace on the right side only,"},{"type":"text","text":" "},{"type":"text","text":"it’s treated as a postfix unary operator."},{"type":"text","text":" "},{"type":"text","text":"As an example, the "},{"type":"codeVoice","code":"+++"},{"type":"text","text":" operator in "},{"type":"codeVoice","code":"a+++ b"},{"type":"text","text":" is treated as a postfix unary operator."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If an operator has no whitespace on the left but is followed immediately by a dot ("},{"type":"codeVoice","code":"."},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"it’s treated as a postfix unary operator."},{"type":"text","text":" "},{"type":"text","text":"As an example, the  "},{"type":"codeVoice","code":"+++"},{"type":"text","text":" operator in "},{"type":"codeVoice","code":"a+++.b"},{"type":"text","text":" is treated as a postfix unary operator"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a+++ .b"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"a +++ .b"},{"type":"text","text":")."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the purposes of these rules,"},{"type":"text","text":" "},{"type":"text","text":"the characters "},{"type":"codeVoice","code":"("},{"type":"text","text":", "},{"type":"codeVoice","code":"["},{"type":"text","text":", and "},{"type":"codeVoice","code":"{"},{"type":"text","text":" before an operator,"},{"type":"text","text":" "},{"type":"text","text":"the characters "},{"type":"codeVoice","code":")"},{"type":"text","text":", "},{"type":"codeVoice","code":"]"},{"type":"text","text":", and "},{"type":"codeVoice","code":"}"},{"type":"text","text":" after an operator,"},{"type":"text","text":" "},{"type":"text","text":"and the characters "},{"type":"codeVoice","code":","},{"type":"text","text":", "},{"type":"codeVoice","code":";"},{"type":"text","text":", and "},{"type":"codeVoice","code":":"},{"type":"text","text":" "},{"type":"text","text":"are also considered whitespace."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"!"},{"type":"text","text":" or "},{"type":"codeVoice","code":"?"},{"type":"text","text":" predefined operator has no whitespace on the left,"},{"type":"text","text":" "},{"type":"text","text":"it’s treated as a postfix operator,"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether it has whitespace on the right."},{"type":"text","text":" "},{"type":"text","text":"To use the "},{"type":"codeVoice","code":"?"},{"type":"text","text":" as the optional-chaining operator,"},{"type":"text","text":" "},{"type":"text","text":"it must not have whitespace on the left."},{"type":"text","text":" "},{"type":"text","text":"To use it in the ternary conditional ("},{"type":"codeVoice","code":"?"},{"type":"text","text":" "},{"type":"codeVoice","code":":"},{"type":"text","text":") operator,"},{"type":"text","text":" "},{"type":"text","text":"it must have whitespace around both sides."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If one of the arguments to an infix operator is a regular expression literal,"},{"type":"text","text":" "},{"type":"text","text":"then the operator must have whitespace around both sides."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In certain constructs, operators with a leading "},{"type":"codeVoice","code":"<"},{"type":"text","text":" or "},{"type":"codeVoice","code":">"},{"type":"text","text":" "},{"type":"text","text":"may be split into two or more tokens. The remainder is treated the same way"},{"type":"text","text":" "},{"type":"text","text":"and may be split again."},{"type":"text","text":" "},{"type":"text","text":"As a result, you don’t need to add whitespace"},{"type":"text","text":" "},{"type":"text","text":"to disambiguate between the closing "},{"type":"codeVoice","code":">"},{"type":"text","text":" characters in constructs like"},{"type":"text","text":" "},{"type":"codeVoice","code":"Dictionary<String, Array<Int>>"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In this example, the closing "},{"type":"codeVoice","code":">"},{"type":"text","text":" characters aren’t treated as a single token"},{"type":"text","text":" "},{"type":"text","text":"that may then be misinterpreted as a bit shift "},{"type":"codeVoice","code":">>"},{"type":"text","text":" operator."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To learn how to define new, custom operators,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Operator-Declaration"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To learn how to overload existing operators,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of operators","","operator --> operator-head operator-characters-OPT","operator --> dot-operator-head dot-operator-characters","","operator-head --> ``\/`` | ``=`` | ``-`` | ``+`` | ``!`` | ``*`` | ``%`` | ``<`` | ``>`` | ``&`` | ``|`` | ``^`` | ``~`` | ``?``","operator-head --> U+00A1--U+00A7","operator-head --> U+00A9 or U+00AB","operator-head --> U+00AC or U+00AE","operator-head --> U+00B0--U+00B1","operator-head --> U+00B6, U+00BB, U+00BF, U+00D7, or U+00F7","operator-head --> U+2016--U+2017","operator-head --> U+2020--U+2027","operator-head --> U+2030--U+203E","operator-head --> U+2041--U+2053","operator-head --> U+2055--U+205E","operator-head --> U+2190--U+23FF","operator-head --> U+2500--U+2775","operator-head --> U+2794--U+2BFF","operator-head --> U+2E00--U+2E7F","operator-head --> U+3001--U+3003","operator-head --> U+3008--U+3020","operator-head --> U+3030","","operator-character --> operator-head","operator-character --> U+0300--U+036F","operator-character --> U+1DC0--U+1DFF","operator-character --> U+20D0--U+20FF","operator-character --> U+FE00--U+FE0F","operator-character --> U+FE20--U+FE2F","operator-character --> U+E0100--U+E01EF","operator-characters --> operator-character operator-characters-OPT","","dot-operator-head --> ``.``","dot-operator-character --> ``.`` | operator-character","dot-operator-characters --> dot-operator-character dot-operator-characters-OPT","","infix-operator --> operator","prefix-operator --> operator","postfix-operator --> operator"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/lexicalstructure"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lexical structure"}]},{"type":"text","text":" of Swift describes what sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"form valid tokens of the language."},{"type":"text","text":" "},{"type":"text","text":"These valid tokens form the lowest-level building blocks of the language"},{"type":"text","text":" "},{"type":"text","text":"and are used to describe the rest of the language in subsequent chapters."},{"type":"text","text":" "},{"type":"text","text":"A token consists of an identifier, keyword, punctuation, literal, or operator."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Lexical Structure","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Reference","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutTheLanguageReference","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Integers":{"abstract":[],"title":"Integers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Integers","url":"\/documentation\/the-swift-programming-language\/thebasics#Integers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"role":"article","title":"Generic Parameters and Arguments","abstract":[{"type":"text","text":"This chapter describes parameters and arguments for generic types, functions, and"},{"type":"text","text":" "},{"type":"text","text":"initializers. When you declare a generic type, function, subscript, or initializer,"},{"type":"text","text":" "},{"type":"text","text":"you specify the type parameters that the generic type, function, or initializer"},{"type":"text","text":" "},{"type":"text","text":"can work with. These type parameters act as placeholders that"},{"type":"text","text":" "},{"type":"text","text":"are replaced by actual concrete type arguments when an instance of a generic type is"},{"type":"text","text":" "},{"type":"text","text":"created or a generic function or initializer is called."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#propertyWrapper":{"abstract":[],"title":"propertyWrapper","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper","url":"\/documentation\/the-swift-programming-language\/attributes#propertyWrapper"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"role":"article","title":"Declarations","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"declaration"}]},{"type":"text","text":" introduces a new name or construct into your program."},{"type":"text","text":" "},{"type":"text","text":"For example, you use declarations to introduce functions and methods,"},{"type":"text","text":" "},{"type":"text","text":"to introduce variables and constants,"},{"type":"text","text":" "},{"type":"text","text":"and to define enumeration, structure, class, and protocol types."},{"type":"text","text":" "},{"type":"text","text":"You can also use a declaration to extend the behavior"},{"type":"text","text":" "},{"type":"text","text":"of an existing named type and to import symbols into your program that are declared elsewhere."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Custom-Operators":{"abstract":[],"title":"Custom Operators","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Custom-Operators"},"https://developer.apple.com/documentation/swift/string":{"title":"String","titleInlineContent":[{"type":"text","text":"String"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string","url":"https:\/\/developer.apple.com\/documentation\/swift\/string"},"https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html":{"title":"Markup Formatting Reference","titleInlineContent":[{"type":"text","text":"Markup Formatting Reference"}],"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"role":"article","title":"Patterns","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" represents the structure of a single value"},{"type":"text","text":" "},{"type":"text","text":"or a composite value."},{"type":"text","text":" "},{"type":"text","text":"For example, the structure of a tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" is a comma-separated list of two"},{"type":"text","text":" "},{"type":"text","text":"elements. Because patterns represent the structure of a value rather than any"},{"type":"text","text":" "},{"type":"text","text":"one particular value, you can match them with a variety of values."},{"type":"text","text":" "},{"type":"text","text":"For instance, the pattern "},{"type":"codeVoice","code":"(x, y)"},{"type":"text","text":" matches the tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" and any other"},{"type":"text","text":" "},{"type":"text","text":"two-element tuple. In addition to matching a pattern with a value,"},{"type":"text","text":" "},{"type":"text","text":"you can extract part or all of a composite value and bind each part"},{"type":"text","text":" "},{"type":"text","text":"to a constant or variable name."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"role":"article","title":"Tipos","abstract":[{"type":"text","text":"Em Swift, existem dois tipos de dados: tipos nomeados e tipos compostos."},{"type":"text","text":" "},{"type":"text","text":"Um "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipo nomeado"}]},{"type":"text","text":" é um tipo que pode receber um nome específico quando é definido."},{"type":"text","text":" "},{"type":"text","text":"Tipos nomeados incluem classes, structs, enums, e protocolos."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, instâncias de uma classe definida pelo usuário chamada "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":"  tem o tipo "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Além dos tipos nomeados definidos pelo usuário, a biblioteca padrão do Swift define muitos tipos nomeados que são usados com mais frequência, incluindo aqueles que representam arrays, dicionários, e valores opcionais."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"role":"article","title":"Expressions","abstract":[{"type":"text","text":"In Swift, there are four kinds of expressions:"},{"type":"text","text":" "},{"type":"text","text":"prefix expressions, infix expressions, primary expressions, and postfix expressions."},{"type":"text","text":" "},{"type":"text","text":"Evaluating an expression returns a value,"},{"type":"text","text":" "},{"type":"text","text":"causes a side effect, or both."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","title":"Attributes","abstract":[{"type":"text","text":"There are two kinds of attributes in Swift —"},{"type":"text","text":" "},{"type":"text","text":"those that apply to declarations and those that apply to types."},{"type":"text","text":" "},{"type":"text","text":"An attribute provides additional information about the declaration or type."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"discardableResult"},{"type":"text","text":" attribute on a function declaration indicates that,"},{"type":"text","text":" "},{"type":"text","text":"although the function returns a value,"},{"type":"text","text":" "},{"type":"text","text":"the compiler shouldn’t generate a warning if the return value is unused."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Operator-Methods":{"abstract":[],"title":"Operator Methods","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Operator-Methods"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"abstract":[],"title":"Identifiers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Operator-Declaration":{"abstract":[],"title":"Operator Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Operator-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Operator-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AboutTheLanguageReference":{"role":"article","title":"About the Language Reference","abstract":[{"type":"text","text":"This part of the book describes the formal grammar of the Swift programming language."},{"type":"text","text":" "},{"type":"text","text":"The grammar described here is intended to help you understand the language in more"},{"type":"text","text":" "},{"type":"text","text":"detail, rather than to allow you to directly implement a parser or compiler."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutTheLanguageReference","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/aboutthelanguagereference"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Operators":{"abstract":[],"title":"Operators","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"role":"article","title":"Statements","abstract":[{"type":"text","text":"In Swift, there are three kinds of statements: simple statements, compiler control statements,"},{"type":"text","text":" "},{"type":"text","text":"and control flow statements."},{"type":"text","text":" "},{"type":"text","text":"Simple statements are the most common and consist of either an expression or a declaration."},{"type":"text","text":" "},{"type":"text","text":"Compiler control statements allow the program to change aspects of the compiler’s behavior"},{"type":"text","text":" "},{"type":"text","text":"and include a conditional compilation block and a line control statement."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"}}}