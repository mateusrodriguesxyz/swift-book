{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s unified function syntax is flexible enough to express anything from"},{"type":"text","text":" "},{"type":"text","text":"a simple C-style function with no parameter names"},{"type":"text","text":" "},{"type":"text","text":"to a complex Objective-C-style method"},{"type":"text","text":" "},{"type":"text","text":"with names and argument labels for each parameter."},{"type":"text","text":" "},{"type":"text","text":"Parameters can provide default values to simplify function calls"},{"type":"text","text":" "},{"type":"text","text":"and can be passed as in-out parameters,"},{"type":"text","text":" "},{"type":"text","text":"which modify a passed variable once the function has completed its execution."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every function in Swift has a type,"},{"type":"text","text":" "},{"type":"text","text":"consisting of the function’s parameter types and return type."},{"type":"text","text":" "},{"type":"text","text":"You can use this type like any other type in Swift,"},{"type":"text","text":" "},{"type":"text","text":"which makes it easy to pass functions as parameters to other functions,"},{"type":"text","text":" "},{"type":"text","text":"and to return functions from functions."},{"type":"text","text":" "},{"type":"text","text":"Functions can also be written within other functions"},{"type":"text","text":" "},{"type":"text","text":"to encapsulate useful functionality within a nested function scope."}]},{"anchor":"Defining-and-Calling-Functions","level":2,"type":"heading","text":"Defining and Calling Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you define a function,"},{"type":"text","text":" "},{"type":"text","text":"you can optionally define one or more named, typed values that the function takes as input,"},{"type":"text","text":" "},{"type":"text","text":"known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameters"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can also optionally define"},{"type":"text","text":" "},{"type":"text","text":"a type of value that the function will pass back as output when it’s done,"},{"type":"text","text":" "},{"type":"text","text":"known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"return type"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every function has a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function name"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which describes the task that the function performs."},{"type":"text","text":" "},{"type":"text","text":"To use a function, you “call” that function with its name"},{"type":"text","text":" "},{"type":"text","text":"and pass it input values (known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arguments"}]},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"that match the types of the function’s parameters."},{"type":"text","text":" "},{"type":"text","text":"A function’s arguments must always be provided in the same order"},{"type":"text","text":" "},{"type":"text","text":"as the function’s parameter list."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function in the example below is called "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because that’s what it does —"},{"type":"text","text":" "},{"type":"text","text":"it takes a person’s name as input and returns a greeting for that person."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, you define one input parameter —"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value called "},{"type":"codeVoice","code":"person"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"and a return type of "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which will contain a greeting for that person:"}]},{"type":"codeListing","syntax":"swift","code":["func greet(person: String) -> String {","   let greeting = \"Hello, \" + person + \"!\"","   return greeting","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of this information is rolled up into the function’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"definition"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is prefixed with the "},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"You indicate the function’s return type with the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"return arrow"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"->"},{"type":"text","text":" "},{"type":"text","text":"(a hyphen followed by a right angle bracket),"},{"type":"text","text":" "},{"type":"text","text":"which is followed by the name of the type to return."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The definition describes what the function does,"},{"type":"text","text":" "},{"type":"text","text":"what it expects to receive,"},{"type":"text","text":" "},{"type":"text","text":"and what it returns when it’s done."},{"type":"text","text":" "},{"type":"text","text":"The definition makes it easy for the function to be called unambiguously"},{"type":"text","text":" "},{"type":"text","text":"from elsewhere in your code:"}]},{"type":"codeListing","syntax":"swift","code":["print(greet(person: \"Anna\"))","\/\/ Prints \"Hello, Anna!\"","print(greet(person: \"Brian\"))","\/\/ Prints \"Hello, Brian!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You call the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"by passing it a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value after the "},{"type":"codeVoice","code":"person"},{"type":"text","text":" argument label,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"greet(person: \"Anna\")"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because the function returns a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" can be wrapped in a call to the "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"to print that string and see its return value, as shown above."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"doesn’t have a label for its first argument,"},{"type":"text","text":" "},{"type":"text","text":"and its other arguments are optional because they have a default value."},{"type":"text","text":" "},{"type":"text","text":"These variations on function syntax are discussed below"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The body of the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function starts by"},{"type":"text","text":" "},{"type":"text","text":"defining a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" constant called "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":" "},{"type":"text","text":"and setting it to a simple greeting message."},{"type":"text","text":" "},{"type":"text","text":"This greeting is then passed back out of the function using the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"In the line of code that says "},{"type":"codeVoice","code":"return greeting"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the function finishes its execution and returns the current value of "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function multiple times with different input values."},{"type":"text","text":" "},{"type":"text","text":"The example above shows what happens if it’s called with an input value of "},{"type":"codeVoice","code":"\"Anna\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and an input value of "},{"type":"codeVoice","code":"\"Brian\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The function returns a tailored greeting in each case."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make the body of this function shorter,"},{"type":"text","text":" "},{"type":"text","text":"you can combine the message creation and the return statement into one line:"}]},{"type":"codeListing","syntax":"swift","code":["func greetAgain(person: String) -> String {","   return \"Hello again, \" + person + \"!\"","}","print(greetAgain(person: \"Anna\"))","\/\/ Prints \"Hello again, Anna!\""]},{"anchor":"Function-Parameters-and-Return-Values","level":2,"type":"heading","text":"Function Parameters and Return Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Function parameters and return values are extremely flexible in Swift."},{"type":"text","text":" "},{"type":"text","text":"You can define anything from a simple utility function with a single unnamed parameter"},{"type":"text","text":" "},{"type":"text","text":"to a complex function with expressive parameter names and different parameter options."}]},{"anchor":"Functions-Without-Parameters","level":3,"type":"heading","text":"Functions Without Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions aren’t required to define input parameters."},{"type":"text","text":" "},{"type":"text","text":"Here’s a function with no input parameters,"},{"type":"text","text":" "},{"type":"text","text":"which always returns the same "},{"type":"codeVoice","code":"String"},{"type":"text","text":" message whenever it’s called:"}]},{"type":"codeListing","syntax":"swift","code":["func sayHelloWorld() -> String {","   return \"hello, world\"","}","print(sayHelloWorld())","\/\/ Prints \"hello, world\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function definition still needs parentheses after the function’s name,"},{"type":"text","text":" "},{"type":"text","text":"even though it doesn’t take any parameters."},{"type":"text","text":" "},{"type":"text","text":"The function name is also followed by"},{"type":"text","text":" "},{"type":"text","text":"an empty pair of parentheses when the function is called."}]},{"anchor":"Functions-With-Multiple-Parameters","level":3,"type":"heading","text":"Functions With Multiple Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions can have multiple input parameters,"},{"type":"text","text":" "},{"type":"text","text":"which are written within the function’s parentheses, separated by commas."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function takes a person’s name"},{"type":"text","text":" "},{"type":"text","text":"and whether they have already been greeted as input,"},{"type":"text","text":" "},{"type":"text","text":"and returns an appropriate greeting for that person:"}]},{"type":"codeListing","syntax":"swift","code":["func greet(person: String, alreadyGreeted: Bool) -> String {","    if alreadyGreeted {","        return greetAgain(person: person)","    } else {","        return greet(person: person)","    }","}","print(greet(person: \"Tim\", alreadyGreeted: true))","\/\/ Prints \"Hello again, Tim!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You call the "},{"type":"codeVoice","code":"greet(person:alreadyGreeted:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"by passing it both a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" argument value labeled "},{"type":"codeVoice","code":"person"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" argument value labeled "},{"type":"codeVoice","code":"alreadyGreeted"},{"type":"text","text":" "},{"type":"text","text":"in parentheses, separated by commas."},{"type":"text","text":" "},{"type":"text","text":"Note that this function is distinct from the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"shown in an earlier section."},{"type":"text","text":" "},{"type":"text","text":"Although both functions have names that begin with "},{"type":"codeVoice","code":"greet"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"greet(person:alreadyGreeted:)"},{"type":"text","text":" function takes two arguments"},{"type":"text","text":" "},{"type":"text","text":"but the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function takes only one."}]},{"anchor":"Functions-Without-Return-Values","level":3,"type":"heading","text":"Functions Without Return Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions aren’t required to define a return type."},{"type":"text","text":" "},{"type":"text","text":"Here’s a version of the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"which prints its own "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value rather than returning it:"}]},{"type":"codeListing","syntax":"swift","code":["func greet(person: String) {","   print(\"Hello, \\(person)!\")","}","greet(person: \"Dave\")","\/\/ Prints \"Hello, Dave!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it doesn’t need to return a value,"},{"type":"text","text":" "},{"type":"text","text":"the function’s definition doesn’t include the return arrow ("},{"type":"codeVoice","code":"->"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"or a return type."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Strictly speaking, this version of the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function "},{"type":"emphasis","inlineContent":[{"type":"text","text":"does"}]},{"type":"text","text":" still return a value,"},{"type":"text","text":" "},{"type":"text","text":"even though no return value is defined."},{"type":"text","text":" "},{"type":"text","text":"Functions without a defined return type return a special value of type "},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is simply an empty tuple,"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The return value of a function can be ignored when it’s called:"}]},{"type":"codeListing","syntax":"swift","code":["func printAndCount(string: String) -> Int {","   print(string)","   return string.count","}","func printWithoutCounting(string: String) {","   let _ = printAndCount(string: string)","}","printAndCount(string: \"hello, world\")","\/\/ prints \"hello, world\" and returns a value of 12","printWithoutCounting(string: \"hello, world\")","\/\/ prints \"hello, world\" but doesn't return a value"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first function, "},{"type":"codeVoice","code":"printAndCount(string:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"prints a string, and then returns its character count as an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The second function, "},{"type":"codeVoice","code":"printWithoutCounting(string:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"calls the first function, but ignores its return value."},{"type":"text","text":" "},{"type":"text","text":"When the second function is called,"},{"type":"text","text":" "},{"type":"text","text":"the message is still printed by the first function,"},{"type":"text","text":" "},{"type":"text","text":"but the returned value isn’t used."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Return values can be ignored,"},{"type":"text","text":" "},{"type":"text","text":"but a function that says it will return a value must always do so."},{"type":"text","text":" "},{"type":"text","text":"A function with a defined return type"},{"type":"text","text":" "},{"type":"text","text":"can’t allow control to fall out of the bottom of the function"},{"type":"text","text":" "},{"type":"text","text":"without returning a value,"},{"type":"text","text":" "},{"type":"text","text":"and attempting to do so will result in a compile-time error."}]}],"type":"aside","name":"Note"},{"anchor":"Functions-with-Multiple-Return-Values","level":3,"type":"heading","text":"Functions with Multiple Return Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a tuple type as the return type for a function"},{"type":"text","text":" "},{"type":"text","text":"to return multiple values as part of one compound return value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a function called "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which finds the smallest and largest numbers in an array of "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values:"}]},{"type":"codeListing","syntax":"swift","code":["func minMax(array: [Int]) -> (min: Int, max: Int) {","   var currentMin = array[0]","   var currentMax = array[0]","   for value in array[1..<array.count] {","      if value < currentMin {","         currentMin = value","      } else if value > currentMax {","         currentMax = value","      }","   }","   return (currentMin, currentMax)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function returns a tuple containing two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"These values are labeled "},{"type":"codeVoice","code":"min"},{"type":"text","text":" and "},{"type":"codeVoice","code":"max"},{"type":"text","text":" "},{"type":"text","text":"so that they can be accessed by name when querying the function’s return value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The body of the "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function starts by setting"},{"type":"text","text":" "},{"type":"text","text":"two working variables called "},{"type":"codeVoice","code":"currentMin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentMax"},{"type":"text","text":" "},{"type":"text","text":"to the value of the first integer in the array."},{"type":"text","text":" "},{"type":"text","text":"The function then iterates over the remaining values in the array"},{"type":"text","text":" "},{"type":"text","text":"and checks each value to see if it’s smaller or larger than"},{"type":"text","text":" "},{"type":"text","text":"the values of "},{"type":"codeVoice","code":"currentMin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentMax"},{"type":"text","text":" respectively."},{"type":"text","text":" "},{"type":"text","text":"Finally, the overall minimum and maximum values are returned as"},{"type":"text","text":" "},{"type":"text","text":"a tuple of two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the tuple’s member values are named as part of the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"they can be accessed with dot syntax to retrieve the minimum and maximum found values:"}]},{"type":"codeListing","syntax":"swift","code":["let bounds = minMax(array: [8, -6, 2, 109, 3, 71])","print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","\/\/ Prints \"min is -6 and max is 109\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the tuple’s members don’t need to be named"},{"type":"text","text":" "},{"type":"text","text":"at the point that the tuple is returned from the function,"},{"type":"text","text":" "},{"type":"text","text":"because their names are already specified as part of the function’s return type."}]},{"anchor":"Optional-Tuple-Return-Types","level":4,"type":"heading","text":"Optional Tuple Return Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the tuple type to be returned from a function"},{"type":"text","text":" "},{"type":"text","text":"has the potential to have “no value” for the entire tuple,"},{"type":"text","text":" "},{"type":"text","text":"you can use an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" tuple return type to reflect the fact that"},{"type":"text","text":" "},{"type":"text","text":"the entire tuple can be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You write an optional tuple return type by placing a question mark"},{"type":"text","text":" "},{"type":"text","text":"after the tuple type’s closing parenthesis,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"(Int, Int)?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"(String, Int, Bool)?"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An optional tuple type such as "},{"type":"codeVoice","code":"(Int, Int)?"},{"type":"text","text":" "},{"type":"text","text":"is different from a tuple that contains optional types"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"(Int?, Int?)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"With an optional tuple type, the entire tuple is optional,"},{"type":"text","text":" "},{"type":"text","text":"not just each individual value within the tuple."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function above returns a tuple containing two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"However, the function doesn’t perform any safety checks on the array it’s passed."},{"type":"text","text":" "},{"type":"text","text":"If the "},{"type":"codeVoice","code":"array"},{"type":"text","text":" argument contains an empty array,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function, as defined above,"},{"type":"text","text":" "},{"type":"text","text":"will trigger a runtime error when attempting to access "},{"type":"codeVoice","code":"array[0]"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To handle an empty array safely,"},{"type":"text","text":" "},{"type":"text","text":"write the "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function with an optional tuple return type"},{"type":"text","text":" "},{"type":"text","text":"and return a value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" when the array is empty:"}]},{"type":"codeListing","syntax":"swift","code":["func minMax(array: [Int]) -> (min: Int, max: Int)? {","   if array.isEmpty { return nil }","   var currentMin = array[0]","   var currentMax = array[0]","   for value in array[1..<array.count] {","      if value < currentMin {","         currentMin = value","      } else if value > currentMax {","         currentMax = value","      }","   }","   return (currentMin, currentMax)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional binding to check whether this version of the "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"returns an actual tuple value or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {","   print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","}","\/\/ Prints \"min is -6 and max is 109\""]},{"anchor":"Functions-With-an-Implicit-Return","level":3,"type":"heading","text":"Functions With an Implicit Return"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the entire body of the function is a single expression,"},{"type":"text","text":" "},{"type":"text","text":"the function implicitly returns that expression."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"both functions below have the same behavior:"}]},{"type":"codeListing","syntax":"swift","code":["func greeting(for person: String) -> String {","   \"Hello, \" + person + \"!\"","}","print(greeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\"","","func anotherGreeting(for person: String) -> String {","   return \"Hello, \" + person + \"!\"","}","print(anotherGreeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The entire definition of the "},{"type":"codeVoice","code":"greeting(for:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"is the greeting message that it returns,"},{"type":"text","text":" "},{"type":"text","text":"which means it can use this shorter form."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"anotherGreeting(for:)"},{"type":"text","text":" function returns the same greeting message,"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword like a longer function."},{"type":"text","text":" "},{"type":"text","text":"Any function that you write as just one "},{"type":"codeVoice","code":"return"},{"type":"text","text":" line can omit the "},{"type":"codeVoice","code":"return"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you’ll see in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Shorthand-Getter-Declaration"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"property getters can also use an implicit return."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The code you write as an implicit return value"},{"type":"text","text":" "},{"type":"text","text":"needs to return some value."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"you can’t use "},{"type":"codeVoice","code":"print(13)"},{"type":"text","text":" "},{"type":"text","text":"as an implicit return value."},{"type":"text","text":" "},{"type":"text","text":"However, you can use a function that never returns"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"fatalError(\"Oh no!\")"},{"type":"text","text":" "},{"type":"text","text":"as an implicit return value,"},{"type":"text","text":" "},{"type":"text","text":"because Swift knows that the implicit return doesn’t happen."}]}],"type":"aside","name":"Note"},{"anchor":"Function-Argument-Labels-and-Parameter-Names","level":2,"type":"heading","text":"Function Argument Labels and Parameter Names"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each function parameter has both an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"argument label"}]},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameter name"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The argument label is used when calling the function;"},{"type":"text","text":" "},{"type":"text","text":"each argument is written in the function call with its argument label before it."},{"type":"text","text":" "},{"type":"text","text":"The parameter name is used in the implementation of the function."},{"type":"text","text":" "},{"type":"text","text":"By default, parameters"},{"type":"text","text":" "},{"type":"text","text":"use their parameter name as their argument label."}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(firstParameterName: Int, secondParameterName: Int) {","   \/\/ In the function body, firstParameterName and secondParameterName","   \/\/ refer to the argument values for the first and second parameters.","}","someFunction(firstParameterName: 1, secondParameterName: 2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All parameters must have unique names."},{"type":"text","text":" "},{"type":"text","text":"Although it’s possible for multiple parameters"},{"type":"text","text":" "},{"type":"text","text":"to have the same argument label,"},{"type":"text","text":" "},{"type":"text","text":"unique argument labels help make your code more readable."}]},{"anchor":"Specifying-Argument-Labels","level":3,"type":"heading","text":"Specifying Argument Labels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an argument label before the parameter name,"},{"type":"text","text":" "},{"type":"text","text":"separated by a space:"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(argumentLabel parameterName: Int) {","   \/\/ In the function body, parameterName refers to the argument value","   \/\/ for that parameter.","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a variation of the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"that takes a person’s name and hometown"},{"type":"text","text":" "},{"type":"text","text":"and returns a greeting:"}]},{"type":"codeListing","syntax":"swift","code":["func greet(person: String, from hometown: String) -> String {","    return \"Hello \\(person)!  Glad you could visit from \\(hometown).\"","}","print(greet(person: \"Bill\", from: \"Cupertino\"))","\/\/ Prints \"Hello Bill!  Glad you could visit from Cupertino.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The use of argument labels can allow a function"},{"type":"text","text":" "},{"type":"text","text":"to be called in an expressive, sentence-like manner,"},{"type":"text","text":" "},{"type":"text","text":"while still providing a function body that’s readable and clear in intent."}]},{"anchor":"Omitting-Argument-Labels","level":3,"type":"heading","text":"Omitting Argument Labels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t want an argument label for a parameter,"},{"type":"text","text":" "},{"type":"text","text":"write an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") instead of an explicit argument label for that parameter."}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(_ firstParameterName: Int, secondParameterName: Int) {","   \/\/ In the function body, firstParameterName and secondParameterName","   \/\/ refer to the argument values for the first and second parameters.","}","someFunction(1, secondParameterName: 2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a parameter has an argument label,"},{"type":"text","text":" "},{"type":"text","text":"the argument "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" be labeled when you call the function."}]},{"anchor":"Default-Parameter-Values","level":3,"type":"heading","text":"Default Parameter Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"default value"}]},{"type":"text","text":" for any parameter in a function"},{"type":"text","text":" "},{"type":"text","text":"by assigning a value to the parameter after that parameter’s type."},{"type":"text","text":" "},{"type":"text","text":"If a default value is defined, you can omit that parameter when calling the function."}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {","   \/\/ If you omit the second argument when calling this function, then","   \/\/ the value of parameterWithDefault is 12 inside the function body.","}","someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) \/\/ parameterWithDefault is 6","someFunction(parameterWithoutDefault: 4) \/\/ parameterWithDefault is 12"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Place parameters that don’t have default values"},{"type":"text","text":" "},{"type":"text","text":"at the beginning of a function’s parameter list,"},{"type":"text","text":" "},{"type":"text","text":"before the parameters that have default values."},{"type":"text","text":" "},{"type":"text","text":"Parameters that don’t have default values"},{"type":"text","text":" "},{"type":"text","text":"are usually more important to the function’s meaning —"},{"type":"text","text":" "},{"type":"text","text":"writing them first makes it easier to recognize"},{"type":"text","text":" "},{"type":"text","text":"that the same function is being called,"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether any default parameters are omitted."}]},{"anchor":"Variadic-Parameters","level":3,"type":"heading","text":"Variadic Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"variadic parameter"}]},{"type":"text","text":" accepts zero or more values of a specified type."},{"type":"text","text":" "},{"type":"text","text":"You use a variadic parameter to specify that the parameter can be passed"},{"type":"text","text":" "},{"type":"text","text":"a varying number of input values when the function is called."},{"type":"text","text":" "},{"type":"text","text":"Write variadic parameters by inserting three period characters ("},{"type":"codeVoice","code":"..."},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"after the parameter’s type name."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values passed to a variadic parameter are made available within the function’s body"},{"type":"text","text":" "},{"type":"text","text":"as an array of the appropriate type."},{"type":"text","text":" "},{"type":"text","text":"For example, a variadic parameter with a name of "},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" and a type of "},{"type":"codeVoice","code":"Double..."},{"type":"text","text":" "},{"type":"text","text":"is made available within the function’s body as"},{"type":"text","text":" "},{"type":"text","text":"a constant array called "},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" of type "},{"type":"codeVoice","code":"[Double]"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below calculates the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arithmetic mean"}]},{"type":"text","text":" "},{"type":"text","text":"(also known as the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"average"}]},{"type":"text","text":") for a list of numbers of any length:"}]},{"type":"codeListing","syntax":"swift","code":["func arithmeticMean(_ numbers: Double...) -> Double {","   var total: Double = 0","   for number in numbers {","      total += number","   }","   return total \/ Double(numbers.count)","}","arithmeticMean(1, 2, 3, 4, 5)","\/\/ returns 3.0, which is the arithmetic mean of these five numbers","arithmeticMean(3, 8.25, 18.75)","\/\/ returns 10.0, which is the arithmetic mean of these three numbers"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A function can have multiple variadic parameters."},{"type":"text","text":" "},{"type":"text","text":"The first parameter that comes after a variadic parameter"},{"type":"text","text":" "},{"type":"text","text":"must have an argument label."},{"type":"text","text":" "},{"type":"text","text":"The argument label makes it unambiguous"},{"type":"text","text":" "},{"type":"text","text":"which arguments are passed to the variadic parameter"},{"type":"text","text":" "},{"type":"text","text":"and which arguments are passed to the parameters"},{"type":"text","text":" "},{"type":"text","text":"that come after the variadic parameter."}]},{"anchor":"In-Out-Parameters","level":3,"type":"heading","text":"In-Out Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Function parameters are constants by default."},{"type":"text","text":" "},{"type":"text","text":"Trying to change the value of a function parameter"},{"type":"text","text":" "},{"type":"text","text":"from within the body of that function results in a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"This means that you can’t change the value of a parameter by mistake."},{"type":"text","text":" "},{"type":"text","text":"If you want a function to modify a parameter’s value,"},{"type":"text","text":" "},{"type":"text","text":"and you want those changes to persist after the function call has ended,"},{"type":"text","text":" "},{"type":"text","text":"define that parameter as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"in-out parameter"}]},{"type":"text","text":" instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an in-out parameter by placing the "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"right before a parameter’s type."},{"type":"text","text":" "},{"type":"text","text":"An in-out parameter has a value that’s passed "},{"type":"emphasis","inlineContent":[{"type":"text","text":"in"}]},{"type":"text","text":" to the function,"},{"type":"text","text":" "},{"type":"text","text":"is modified by the function,"},{"type":"text","text":" "},{"type":"text","text":"and is passed back "},{"type":"emphasis","inlineContent":[{"type":"text","text":"out"}]},{"type":"text","text":" of the function to replace the original value."},{"type":"text","text":" "},{"type":"text","text":"For a detailed discussion of the behavior of in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"and associated compiler optimizations,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can only pass a variable as the argument for an in-out parameter."},{"type":"text","text":" "},{"type":"text","text":"You can’t pass a constant or a literal value as the argument,"},{"type":"text","text":" "},{"type":"text","text":"because constants and literals can’t be modified."},{"type":"text","text":" "},{"type":"text","text":"You place an ampersand ("},{"type":"codeVoice","code":"&"},{"type":"text","text":") directly before a variable’s name"},{"type":"text","text":" "},{"type":"text","text":"when you pass it as an argument to an in-out parameter,"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it can be modified by the function."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In-out parameters can’t have default values,"},{"type":"text","text":" "},{"type":"text","text":"and variadic parameters can’t be marked as "},{"type":"codeVoice","code":"inout"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a function called "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has two in-out integer parameters called "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["func swapTwoInts(_ a: inout Int, _ b: inout Int) {","   let temporaryA = a","   a = b","   b = temporaryA","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function simply swaps the value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" into "},{"type":"codeVoice","code":"a"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" into "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The function performs this swap by storing the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"a temporary constant called "},{"type":"codeVoice","code":"temporaryA"},{"type":"text","text":", assigning the value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" to "},{"type":"codeVoice","code":"a"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and then assigning "},{"type":"codeVoice","code":"temporaryA"},{"type":"text","text":" to "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call the "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function with two variables of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"type":"text","text":"to swap their values."},{"type":"text","text":" "},{"type":"text","text":"Note that the names of "},{"type":"codeVoice","code":"someInt"},{"type":"text","text":" and "},{"type":"codeVoice","code":"anotherInt"},{"type":"text","text":" are prefixed with an ampersand"},{"type":"text","text":" "},{"type":"text","text":"when they’re passed to the "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function:"}]},{"type":"codeListing","syntax":"swift","code":["var someInt = 3","var anotherInt = 107","swapTwoInts(&someInt, &anotherInt)","print(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")","\/\/ Prints \"someInt is now 107, and anotherInt is now 3\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above shows that"},{"type":"text","text":" "},{"type":"text","text":"the original values of "},{"type":"codeVoice","code":"someInt"},{"type":"text","text":" and "},{"type":"codeVoice","code":"anotherInt"},{"type":"text","text":" "},{"type":"text","text":"are modified by the "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"even though they were originally defined outside of the function."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In-out parameters aren’t the same as returning a value from a function."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"swapTwoInts"},{"type":"text","text":" example above doesn’t define a return type or return a value,"},{"type":"text","text":" "},{"type":"text","text":"but it still modifies the values of "},{"type":"codeVoice","code":"someInt"},{"type":"text","text":" and "},{"type":"codeVoice","code":"anotherInt"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In-out parameters are an alternative way for a function to have an effect"},{"type":"text","text":" "},{"type":"text","text":"outside of the scope of its function body."}]}],"type":"aside","name":"Note"},{"anchor":"Function-Types","level":2,"type":"heading","text":"Function Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every function has a specific "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function type"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"made up of the parameter types and the return type of the function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["func addTwoInts(_ a: Int, _ b: Int) -> Int {","   return a + b","}","func multiplyTwoInts(_ a: Int, _ b: Int) -> Int {","   return a * b","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines two simple mathematical functions"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"addTwoInts"},{"type":"text","text":" and "},{"type":"codeVoice","code":"multiplyTwoInts"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These functions each take two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values,"},{"type":"text","text":" "},{"type":"text","text":"and return an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value, which is the result of"},{"type":"text","text":" "},{"type":"text","text":"performing an appropriate mathematical operation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of both of these functions is "},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“A function that has two parameters, both of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and that returns a value of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s another example, for a function with no parameters or return value:"}]},{"type":"codeListing","syntax":"swift","code":["func printHelloWorld() {","   print(\"hello, world\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of this function is "},{"type":"codeVoice","code":"() -> Void"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “a function that has no parameters, and returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":".”"}]},{"anchor":"Using-Function-Types","level":3,"type":"heading","text":"Using Function Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use function types just like any other types in Swift."},{"type":"text","text":" "},{"type":"text","text":"For example, you can define a constant or variable to be of a function type"},{"type":"text","text":" "},{"type":"text","text":"and assign an appropriate function to that variable:"}]},{"type":"codeListing","syntax":"swift","code":["var mathFunction: (Int, Int) -> Int = addTwoInts"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Define a variable called "},{"type":"codeVoice","code":"mathFunction"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has a type of ‘a function that takes two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values,"},{"type":"text","text":" "},{"type":"text","text":"and returns an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value.’"},{"type":"text","text":" "},{"type":"text","text":"Set this new variable to refer to the function called "},{"type":"codeVoice","code":"addTwoInts"},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"addTwoInts(_:_:)"},{"type":"text","text":" function has the same type as the "},{"type":"codeVoice","code":"mathFunction"},{"type":"text","text":" variable,"},{"type":"text","text":" "},{"type":"text","text":"and so this assignment is allowed by Swift’s type-checker."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now call the assigned function with the name "},{"type":"codeVoice","code":"mathFunction"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 5\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A different function with the same matching type can be assigned to the same variable,"},{"type":"text","text":" "},{"type":"text","text":"in the same way as for nonfunction types:"}]},{"type":"codeListing","syntax":"swift","code":["mathFunction = multiplyTwoInts","print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 6\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with any other type,"},{"type":"text","text":" "},{"type":"text","text":"you can leave it to Swift to infer the function type"},{"type":"text","text":" "},{"type":"text","text":"when you assign a function to a constant or variable:"}]},{"type":"codeListing","syntax":"swift","code":["let anotherMathFunction = addTwoInts","\/\/ anotherMathFunction is inferred to be of type (Int, Int) -> Int"]},{"anchor":"Function-Types-as-Parameter-Types","level":3,"type":"heading","text":"Function Types as Parameter Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a function type such as "},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"type":"text","text":" "},{"type":"text","text":"as a parameter type for another function."},{"type":"text","text":" "},{"type":"text","text":"This enables you to leave some aspects of a function’s implementation"},{"type":"text","text":" "},{"type":"text","text":"for the function’s caller to provide when the function is called."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example to print the results of the math functions from above:"}]},{"type":"codeListing","syntax":"swift","code":["func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {","   print(\"Result: \\(mathFunction(a, b))\")","}","printMathResult(addTwoInts, 3, 5)","\/\/ Prints \"Result: 8\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines a function called "},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"type":"text","text":", which has three parameters."},{"type":"text","text":" "},{"type":"text","text":"The first parameter is called "},{"type":"codeVoice","code":"mathFunction"},{"type":"text","text":", and is of type "},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can pass any function of that type as the argument for this first parameter."},{"type":"text","text":" "},{"type":"text","text":"The second and third parameters are called "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":", and are both of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These are used as the two input values for the provided math function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"type":"text","text":" is called,"},{"type":"text","text":" "},{"type":"text","text":"it’s passed the "},{"type":"codeVoice","code":"addTwoInts(_:_:)"},{"type":"text","text":" function, and the integer values "},{"type":"codeVoice","code":"3"},{"type":"text","text":" and "},{"type":"codeVoice","code":"5"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It calls the provided function with the values "},{"type":"codeVoice","code":"3"},{"type":"text","text":" and "},{"type":"codeVoice","code":"5"},{"type":"text","text":", and prints the result of "},{"type":"codeVoice","code":"8"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The role of "},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"type":"text","text":" is to print the result of"},{"type":"text","text":" "},{"type":"text","text":"a call to a math function of an appropriate type."},{"type":"text","text":" "},{"type":"text","text":"It doesn’t matter what that function’s implementation actually does —"},{"type":"text","text":" "},{"type":"text","text":"it matters only that the function is of the correct type."},{"type":"text","text":" "},{"type":"text","text":"This enables "},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"type":"text","text":" to hand off some of its functionality"},{"type":"text","text":" "},{"type":"text","text":"to the caller of the function in a type-safe way."}]},{"anchor":"Function-Types-as-Return-Types","level":3,"type":"heading","text":"Function Types as Return Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a function type as the return type of another function."},{"type":"text","text":" "},{"type":"text","text":"You do this by writing a complete function type"},{"type":"text","text":" "},{"type":"text","text":"immediately after the return arrow ("},{"type":"codeVoice","code":"->"},{"type":"text","text":") of the returning function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next example defines two simple functions called "},{"type":"codeVoice","code":"stepForward(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"stepBackward(_:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"stepForward(_:)"},{"type":"text","text":" function returns a value one more than its input value,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"stepBackward(_:)"},{"type":"text","text":" function returns a value one less than its input value."},{"type":"text","text":" "},{"type":"text","text":"Both functions have a type of "},{"type":"codeVoice","code":"(Int) -> Int"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["func stepForward(_ input: Int) -> Int {","   return input + 1","}","func stepBackward(_ input: Int) -> Int {","   return input - 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a function called "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whose return type is "},{"type":"codeVoice","code":"(Int) -> Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" function returns the "},{"type":"codeVoice","code":"stepForward(_:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"or the "},{"type":"codeVoice","code":"stepBackward(_:)"},{"type":"text","text":" function based on a Boolean parameter called "},{"type":"codeVoice","code":"backward"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","   return backward ? stepBackward : stepForward","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now use "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" to obtain a function"},{"type":"text","text":" "},{"type":"text","text":"that will step in one direction or the other:"}]},{"type":"codeListing","syntax":"swift","code":["var currentValue = 3","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero now refers to the stepBackward() function"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above determines whether a positive or negative step is needed"},{"type":"text","text":" "},{"type":"text","text":"to move a variable called "},{"type":"codeVoice","code":"currentValue"},{"type":"text","text":" progressively closer to zero."},{"type":"text","text":" "},{"type":"codeVoice","code":"currentValue"},{"type":"text","text":" has an initial value of "},{"type":"codeVoice","code":"3"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which means that "},{"type":"codeVoice","code":"currentValue > 0"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"causing "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" to return the "},{"type":"codeVoice","code":"stepBackward(_:)"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"text","text":"A reference to the returned function is stored in a constant called "},{"type":"codeVoice","code":"moveNearerToZero"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that "},{"type":"codeVoice","code":"moveNearerToZero"},{"type":"text","text":" refers to the correct function,"},{"type":"text","text":" "},{"type":"text","text":"it can be used to count to zero:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Counting to zero:\")","\/\/ Counting to zero:","while currentValue != 0 {","   print(\"\\(currentValue)... \")","   currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ 3...","\/\/ 2...","\/\/ 1...","\/\/ zero!"]},{"anchor":"Nested-Functions","level":2,"type":"heading","text":"Nested Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the functions you have encountered so far in this chapter"},{"type":"text","text":" "},{"type":"text","text":"have been examples of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"global functions"}]},{"type":"text","text":", which are defined at a global scope."},{"type":"text","text":" "},{"type":"text","text":"You can also define functions inside the bodies of other functions,"},{"type":"text","text":" "},{"type":"text","text":"known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested functions"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nested functions are hidden from the outside world by default,"},{"type":"text","text":" "},{"type":"text","text":"but can still be called and used by their enclosing function."},{"type":"text","text":" "},{"type":"text","text":"An enclosing function can also return one of its nested functions"},{"type":"text","text":" "},{"type":"text","text":"to allow the nested function to be used in another scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can rewrite the "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" example above"},{"type":"text","text":" "},{"type":"text","text":"to use and return nested functions:"}]},{"type":"codeListing","syntax":"swift","code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","   func stepForward(input: Int) -> Int { return input + 1 }","   func stepBackward(input: Int) -> Int { return input - 1 }","   return backward ? stepBackward : stepForward","}","var currentValue = -4","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero now refers to the nested stepForward() function","while currentValue != 0 {","   print(\"\\(currentValue)... \")","   currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ -4...","\/\/ -3...","\/\/ -2...","\/\/ -1...","\/\/ zero!"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/functions"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Functions","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Function-Argument-Labels-and-Parameter-Names":{"abstract":[],"title":"Function Argument Labels and Parameter Names","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names","url":"\/documentation\/the-swift-programming-language\/functions#Function-Argument-Labels-and-Parameter-Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Shorthand-Getter-Declaration":{"abstract":[],"title":"Shorthand Getter Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Shorthand-Getter-Declaration","url":"\/documentation\/the-swift-programming-language\/properties#Shorthand-Getter-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values":{"abstract":[],"title":"Default Parameter Values","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","url":"\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#In-Out-Parameters":{"abstract":[],"title":"In-Out Parameters","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters","url":"\/documentation\/the-swift-programming-language\/declarations#In-Out-Parameters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"}}}