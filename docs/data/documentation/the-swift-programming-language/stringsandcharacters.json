{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Os tipos "},{"type":"codeVoice","code":"String"},{"type":"text","text":" e "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" do Swift fornecem uma maneira"},{"type":"text","text":" "},{"type":"text","text":"rápida e compatível com Unicode de trabalhar com texto em seu código."},{"type":"text","text":" "},{"type":"text","text":"A sintaxe para criação e manipulação de string é leve e legível,"},{"type":"text","text":" "},{"type":"text","text":"com uma sintaxe literal de string semelhante ao C."},{"type":"text","text":" "},{"type":"text","text":"A concatenação de strings é tão simples como a combinação de duas"},{"type":"text","text":" "},{"type":"text","text":"strings com o operador "},{"type":"codeVoice","code":"+"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e a mutabilidade é gerenciada escolhendo entre uma constante ou uma variável,"},{"type":"text","text":" "},{"type":"text","text":"assim como qualquer outro valor em Swift."},{"type":"text","text":" "},{"type":"text","text":"Você também pode usar strings para inserir constantes, variáveis, literais e"},{"type":"text","text":" "},{"type":"text","text":"expressões mais longas, em um processo conhecido como interpolação de string."},{"type":"text","text":" "},{"type":"text","text":"Isso facilita a criação de valores de string customizados para exibição,"},{"type":"text","text":" "},{"type":"text","text":"armazenamento e impressão."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apesar desta simplicidade de sintaxe,"},{"type":"text","text":" "},{"type":"text","text":"o tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":" do Swift é uma implementação de string rápida e moderna."},{"type":"text","text":" "},{"type":"text","text":"Todas as strings são compostas de caracteres Unicode independentes de codificação,"},{"type":"text","text":" "},{"type":"text","text":"e fornece suporte para acessar esses caracteres em várias representações Unicode."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":" em Swift é conectado com a classe "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" da biblioteca Foundation."},{"type":"text","text":" "},{"type":"text","text":"Foundation também extende "},{"type":"codeVoice","code":"String"},{"type":"text","text":" para expor métodos definidos por "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Isso significa que se você importar Foundation,"},{"type":"text","text":" "},{"type":"text","text":"você pode acessar esses métodos de "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" em "},{"type":"codeVoice","code":"String"},{"type":"text","text":" sem casting. Para mais informações sobre como usar "},{"type":"codeVoice","code":"String"},{"type":"text","text":" com Foundation e Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"veja "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514"},{"type":"text","text":"."}]}],"type":"aside","name":"Nota"},{"anchor":"Strings-Literais","level":2,"type":"heading","text":"Strings Literais"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode incluir valores "},{"type":"codeVoice","code":"String"},{"type":"text","text":" predefinidos em seu código como  "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string literals"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Uma string literal é uma sequência de caracteres entre aspas duplas ("},{"type":"codeVoice","code":"\""},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use uma string literal como um valor inicial para uma constante ou variável:"}]},{"type":"codeListing","syntax":"swift","code":["let someString = \"Some string literal value\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note que Swift infere um tipo de "},{"type":"codeVoice","code":"String"},{"type":"text","text":" para a constante "},{"type":"codeVoice","code":"algumaString"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"porque é inicializado com um valor literal de string."}]},{"anchor":"Multiline-String-Literals","level":3,"type":"heading","text":"Multiline String Literals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need a string that spans several lines,"},{"type":"text","text":" "},{"type":"text","text":"use a multiline string literal —"},{"type":"text","text":" "},{"type":"text","text":"a sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"surrounded by three double quotation marks:"}]},{"type":"codeListing","syntax":"swift","code":["let quotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin,","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on","till you come to the end; then stop.\"","\"\"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A multiline string literal includes all of the lines between"},{"type":"text","text":" "},{"type":"text","text":"its opening and closing quotation marks."},{"type":"text","text":" "},{"type":"text","text":"The string begins on the first line after the opening quotation marks ("},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and ends on the line before the closing quotation marks,"},{"type":"text","text":" "},{"type":"text","text":"which means that neither of the strings below"},{"type":"text","text":" "},{"type":"text","text":"start or end with a line break:"}]},{"type":"codeListing","syntax":"swift","code":["let singleLineString = \"These are the same.\"","let multilineString = \"\"\"","These are the same.","\"\"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When your source code includes a line break"},{"type":"text","text":" "},{"type":"text","text":"inside of a multiline string literal,"},{"type":"text","text":" "},{"type":"text","text":"that line break also appears in the string’s value."},{"type":"text","text":" "},{"type":"text","text":"If you want to use line breaks"},{"type":"text","text":" "},{"type":"text","text":"to make your source code easier to read,"},{"type":"text","text":" "},{"type":"text","text":"but you don’t want the line breaks to be part of the string’s value,"},{"type":"text","text":" "},{"type":"text","text":"write a backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":") at the end of those lines:"}]},{"type":"codeListing","syntax":"swift","code":["let softWrappedQuotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin, \\","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on \\","till you come to the end; then stop.\"","\"\"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make a multiline string literal that begins or ends with a line feed,"},{"type":"text","text":" "},{"type":"text","text":"write a blank line as the first or last line."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let lineBreaks = \"\"\"","","This string starts with a line break.","It also ends with a line break.","","\"\"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A multiline string can be indented to match the surrounding code."},{"type":"text","text":" "},{"type":"text","text":"The whitespace before the closing quotation marks ("},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"tells Swift what whitespace to ignore before all of the other lines."},{"type":"text","text":" "},{"type":"text","text":"However, if you write whitespace at the beginning of a line"},{"type":"text","text":" "},{"type":"text","text":"in addition to what’s before the closing quotation marks,"},{"type":"text","text":" "},{"type":"text","text":"that whitespace "},{"type":"emphasis","inlineContent":[{"type":"text","text":"is"}]},{"type":"text","text":" included."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"multilineStringWhitespace"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"even though the entire multiline string literal is indented,"},{"type":"text","text":" "},{"type":"text","text":"the first and last lines in the string don’t begin with any whitespace."},{"type":"text","text":" "},{"type":"text","text":"The middle line has more indentation than the closing quotation marks,"},{"type":"text","text":" "},{"type":"text","text":"so it starts with that extra four-space indentation."}]},{"anchor":"Special-Characters-in-String-Literals","level":3,"type":"heading","text":"Special Characters in String Literals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"String literals can include the following special characters:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The escaped special characters "},{"type":"codeVoice","code":"\\0"},{"type":"text","text":" (null character), "},{"type":"codeVoice","code":"\\\\"},{"type":"text","text":" (backslash),"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\t"},{"type":"text","text":" (horizontal tab), "},{"type":"codeVoice","code":"\\n"},{"type":"text","text":" (line feed), "},{"type":"codeVoice","code":"\\r"},{"type":"text","text":" (carriage return),"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\\""},{"type":"text","text":" (double quotation mark) and "},{"type":"codeVoice","code":"\\'"},{"type":"text","text":" (single quotation mark)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An arbitrary Unicode scalar value, written as "},{"type":"codeVoice","code":"\\\\u{"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"codeVoice","code":"}"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is a 1–8 digit hexadecimal number"},{"type":"text","text":" "},{"type":"text","text":"(Unicode is discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Unicode"},{"type":"text","text":" below)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code below shows four examples of these special characters."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"wiseWords"},{"type":"text","text":" constant contains two escaped double quotation marks."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"dollarSign"},{"type":"text","text":", "},{"type":"codeVoice","code":"blackHeart"},{"type":"text","text":", and "},{"type":"codeVoice","code":"sparklingHeart"},{"type":"text","text":" constants"},{"type":"text","text":" "},{"type":"text","text":"demonstrate the Unicode scalar format:"}]},{"type":"codeListing","syntax":"swift","code":["let wiseWords = \"\\\"Imagination is more important than knowledge\\\" - Einstein\"","\/\/ \"Imagination is more important than knowledge\" - Einstein","let dollarSign = \"\\u{24}\"        \/\/ $,  Unicode scalar U+0024","let blackHeart = \"\\u{2665}\"      \/\/ ♥,  Unicode scalar U+2665","let sparklingHeart = \"\\u{1F496}\" \/\/ 💖, Unicode scalar U+1F496"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because multiline string literals use three double quotation marks instead of just one,"},{"type":"text","text":" "},{"type":"text","text":"you can include a double quotation mark ("},{"type":"codeVoice","code":"\""},{"type":"text","text":") inside of a multiline string literal"},{"type":"text","text":" "},{"type":"text","text":"without escaping it."},{"type":"text","text":" "},{"type":"text","text":"To include the text "},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":" in a multiline string,"},{"type":"text","text":" "},{"type":"text","text":"escape at least one of the quotation marks."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let threeDoubleQuotationMarks = \"\"\"","Escaping the first quotation mark \\\"\"\"","Escaping all three quotation marks \\\"\\\"\\\"","\"\"\""]},{"anchor":"Extended-String-Delimiters","level":3,"type":"heading","text":"Extended String Delimiters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can place a string literal within "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended delimiters"}]},{"type":"text","text":" "},{"type":"text","text":"to include special characters in a string"},{"type":"text","text":" "},{"type":"text","text":"without invoking their effect."},{"type":"text","text":" "},{"type":"text","text":"You place your string within quotation marks ("},{"type":"codeVoice","code":"\""},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and surround that with number signs ("},{"type":"codeVoice","code":"#"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"For example, printing the string literal "},{"type":"codeVoice","code":"#\"Line 1\\nLine 2\"#"},{"type":"text","text":" "},{"type":"text","text":"prints the line feed escape sequence ("},{"type":"codeVoice","code":"\\n"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"rather than printing the string across two lines."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need the special effects of a character in a string literal,"},{"type":"text","text":" "},{"type":"text","text":"match the number of number signs within the string"},{"type":"text","text":" "},{"type":"text","text":"following the escape character ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"For example, if your string is "},{"type":"codeVoice","code":"#\"Line 1\\nLine 2\"#"},{"type":"text","text":" "},{"type":"text","text":"and you want to break the line,"},{"type":"text","text":" "},{"type":"text","text":"you can use "},{"type":"codeVoice","code":"#\"Line 1\\#nLine 2\"#"},{"type":"text","text":" instead."},{"type":"text","text":" "},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"###\"Line1\\###nLine2\"###"},{"type":"text","text":" also breaks the line."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"String literals created using extended delimiters can also be multiline string literals."},{"type":"text","text":" "},{"type":"text","text":"You can use extended delimiters to include the text "},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":" in a multiline string,"},{"type":"text","text":" "},{"type":"text","text":"overriding the default behavior that ends the literal. For example:"}]},{"type":"codeListing","syntax":"swift","code":["let threeMoreDoubleQuotationMarks = #\"\"\"","Here are three more double quotes: \"\"\"","\"\"\"#"]},{"anchor":"Inicializando-Uma-String-Vazia","level":2,"type":"heading","text":"Inicializando Uma String Vazia"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para criar uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" de valor vazio como ponto de partida para se construir uma string maior, você pode atribuir uma string vazia para uma variável ou inicializar uma nova instâncias de "},{"type":"codeVoice","code":"String"},{"type":"text","text":" com sintaxe de inicializador:"}]},{"type":"codeListing","syntax":"swift","code":["var emptyString = \"\"               \/\/ empty string literal","var anotherEmptyString = String()  \/\/ initializer syntax","\/\/ these two strings are both empty, and are equivalent to each other"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Descubra se uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" possui valor vazio verificando sua propriedade Booleana "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if emptyString.isEmpty {","   print(\"Nothing to see here\")","}","\/\/ Prints \"Nothing to see here\""]},{"anchor":"String-Mutability","level":2,"type":"heading","text":"String Mutability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You indicate whether a particular "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be modified (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutated"}]},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"by assigning it to a variable (in which case it can be modified),"},{"type":"text","text":" "},{"type":"text","text":"or to a constant (in which case it can’t be modified):"}]},{"type":"codeListing","syntax":"swift","code":["var variableString = \"Horse\"","variableString += \" and carriage\"","\/\/ variableString is now \"Horse and carriage\"","","let constantString = \"Highlander\"","constantString += \" and another Highlander\"","\/\/ this reports a compile-time error - a constant string cannot be modified"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach is different from string mutation in Objective-C and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"where you choose between two classes ("},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" and "},{"type":"codeVoice","code":"NSMutableString"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to indicate whether a string can be mutated."}]}],"type":"aside","name":"Note"},{"anchor":"Strings-Are-Value-Types","level":2,"type":"heading","text":"Strings Are Value Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value type"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If you create a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"that "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"copied"}]},{"type":"text","text":" when it’s passed to a function or method,"},{"type":"text","text":" "},{"type":"text","text":"or when it’s assigned to a constant or variable."},{"type":"text","text":" "},{"type":"text","text":"In each case, a new copy of the existing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value is created,"},{"type":"text","text":" "},{"type":"text","text":"and the new copy is passed or assigned, not the original version."},{"type":"text","text":" "},{"type":"text","text":"Value types are described in "},{"type":"text","text":"doc:ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s copy-by-default "},{"type":"codeVoice","code":"String"},{"type":"text","text":" behavior ensures that"},{"type":"text","text":" "},{"type":"text","text":"when a function or method passes you a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"it’s clear that you own that exact "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"regardless of where it came from."},{"type":"text","text":" "},{"type":"text","text":"You can be confident that the string you are passed won’t be modified"},{"type":"text","text":" "},{"type":"text","text":"unless you modify it yourself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Behind the scenes, Swift’s compiler optimizes string usage"},{"type":"text","text":" "},{"type":"text","text":"so that actual copying takes place only when absolutely necessary."},{"type":"text","text":" "},{"type":"text","text":"This means you always get great performance"},{"type":"text","text":" "},{"type":"text","text":"when working with strings as value types."}]},{"anchor":"Trabalhando-com-Characteres","level":2,"type":"heading","text":"Trabalhando com Characteres"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode acessar os valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" individuais de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"iterando sobre a string com um laço "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["for character in \"Dog!🐶\" {","   print(caracter)","}","\/\/ D","\/\/ o","\/\/ g","\/\/ !","\/\/ 🐶"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O laço "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" está descrito em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternativamente, você pode criar uma constante ou variável autônoma "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" "},{"type":"text","text":"de um string literal de caractere único fornecendo uma notação do tipo "},{"type":"codeVoice","code":"Character"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let exclamationMark: Character = \"!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Valores "},{"type":"codeVoice","code":"String"},{"type":"text","text":" podem ser construídos passando um vetor de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"como um argumento para o inicializador:"}]},{"type":"codeListing","syntax":"swift","code":["let catCharacters: [Character] = [\"C\", \"a\", \"t\", \"!\", \"🐱\"]","let catString = String(catCharacters)","print(catString)","\/\/ Imprime \"Cat!🐱\""]},{"anchor":"Concatenating-Strings-and-Characters","level":2,"type":"heading","text":"Concatenating Strings and Characters"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":" values can be added together (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"concatenated"}]},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"with the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") to create a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value:"}]},{"type":"codeListing","syntax":"swift","code":["let string1 = \"hello\"","let string2 = \" there\"","var welcome = string1 + string2","\/\/ welcome now equals \"hello there\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also append a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value to an existing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable"},{"type":"text","text":" "},{"type":"text","text":"with the addition assignment operator ("},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["var instruction = \"look over\"","instruction += string2","\/\/ instruction now equals \"look over there\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can append a "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value to a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type’s "},{"type":"codeVoice","code":"append()"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["let exclamationMark: Character = \"!\"","welcome.append(exclamationMark)","\/\/ welcome now equals \"hello there!\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t append a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" to an existing "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" variable,"},{"type":"text","text":" "},{"type":"text","text":"because a "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value must contain a single character only."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re using multiline string literals"},{"type":"text","text":" "},{"type":"text","text":"to build up the lines of a longer string,"},{"type":"text","text":" "},{"type":"text","text":"you want every line in the string to end with a line break,"},{"type":"text","text":" "},{"type":"text","text":"including the last line."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let badStart = \"\"\"","    one","    two","    \"\"\"","let end = \"\"\"","    three","    \"\"\"","print(badStart + end)","\/\/ Prints two lines:","\/\/ one","\/\/ twothree","","let goodStart = \"\"\"","    one","    two","","    \"\"\"","print(goodStart + end)","\/\/ Prints three lines:","\/\/ one","\/\/ two","\/\/ three"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"type":"text","text":"concatenating "},{"type":"codeVoice","code":"badStart"},{"type":"text","text":" with "},{"type":"codeVoice","code":"end"},{"type":"text","text":" "},{"type":"text","text":"produces a two-line string,"},{"type":"text","text":" "},{"type":"text","text":"which isn’t the desired result."},{"type":"text","text":" "},{"type":"text","text":"Because the last line of "},{"type":"codeVoice","code":"badStart"},{"type":"text","text":" "},{"type":"text","text":"doesn’t end with a line break,"},{"type":"text","text":" "},{"type":"text","text":"that line gets combined with the first line of "},{"type":"codeVoice","code":"end"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"both lines of "},{"type":"codeVoice","code":"goodStart"},{"type":"text","text":" end with a line break,"},{"type":"text","text":" "},{"type":"text","text":"so when it’s combined with "},{"type":"codeVoice","code":"end"},{"type":"text","text":" "},{"type":"text","text":"the result has three lines,"},{"type":"text","text":" "},{"type":"text","text":"as expected."}]},{"anchor":"String-Interpolation","level":2,"type":"heading","text":"String Interpolation"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"String interpolation"}]},{"type":"text","text":" is a way to construct a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"from a mix of constants, variables, literals, and expressions"},{"type":"text","text":" "},{"type":"text","text":"by including their values inside a string literal."},{"type":"text","text":" "},{"type":"text","text":"You can use string interpolation"},{"type":"text","text":" "},{"type":"text","text":"in both single-line and multiline string literals."},{"type":"text","text":" "},{"type":"text","text":"Each item that you insert into the string literal is wrapped in"},{"type":"text","text":" "},{"type":"text","text":"a pair of parentheses, prefixed by a backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let multiplier = 3","let message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"","\/\/ message is \"3 times 2.5 is 7.5\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" is inserted into a string literal as "},{"type":"codeVoice","code":"\\(multiplier)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This placeholder is replaced with the actual value of "},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" "},{"type":"text","text":"when the string interpolation is evaluated to create an actual string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of "},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" is also part of a larger expression later in the string."},{"type":"text","text":" "},{"type":"text","text":"This expression calculates the value of "},{"type":"codeVoice","code":"Double(multiplier) * 2.5"},{"type":"text","text":" "},{"type":"text","text":"and inserts the result ("},{"type":"codeVoice","code":"7.5"},{"type":"text","text":") into the string."},{"type":"text","text":" "},{"type":"text","text":"In this case, the expression is written as "},{"type":"codeVoice","code":"\\(Double(multiplier) * 2.5)"},{"type":"text","text":" "},{"type":"text","text":"when it’s included inside the string literal."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use extended string delimiters to create strings containing"},{"type":"text","text":" "},{"type":"text","text":"characters that would otherwise be treated as a string interpolation."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["print(#\"Write an interpolated string in Swift using \\(multiplier).\"#)","\/\/ Prints \"Write an interpolated string in Swift using \\(multiplier).\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use string interpolation"},{"type":"text","text":" "},{"type":"text","text":"inside a string that uses extended delimiters,"},{"type":"text","text":" "},{"type":"text","text":"match the number of number signs after the backslash"},{"type":"text","text":" "},{"type":"text","text":"to the number of number signs at the beginning and end of the string."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["print(#\"6 times 7 is \\#(6 * 7).\"#)","\/\/ Prints \"6 times 7 is 42.\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The expressions you write inside parentheses within an interpolated string"},{"type":"text","text":" "},{"type":"text","text":"can’t contain an unescaped backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"), a carriage return, or a line feed."},{"type":"text","text":" "},{"type":"text","text":"However, they can contain other string literals."}]}],"type":"aside","name":"Note"},{"anchor":"Unicode","level":2,"type":"heading","text":"Unicode"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Unicode"}]},{"type":"text","text":" is an international standard for"},{"type":"text","text":" "},{"type":"text","text":"encoding, representing, and processing text in different writing systems."},{"type":"text","text":" "},{"type":"text","text":"It enables you to represent almost any character from any language in a standardized form,"},{"type":"text","text":" "},{"type":"text","text":"and to read and write those characters to and from an external source"},{"type":"text","text":" "},{"type":"text","text":"such as a text file or web page."},{"type":"text","text":" "},{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" types are fully Unicode-compliant,"},{"type":"text","text":" "},{"type":"text","text":"as described in this section."}]},{"anchor":"Unicode-Scalar-Values","level":3,"type":"heading","text":"Unicode Scalar Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Behind the scenes,"},{"type":"text","text":" "},{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type is built from "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Unicode scalar values"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A Unicode scalar value is a unique 21-bit number for a character or modifier,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"U+0061"},{"type":"text","text":" for "},{"type":"codeVoice","code":"LATIN SMALL LETTER A"},{"type":"text","text":" ("},{"type":"codeVoice","code":"\"a\""},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"U+1F425"},{"type":"text","text":" for "},{"type":"codeVoice","code":"FRONT-FACING BABY CHICK"},{"type":"text","text":" ("},{"type":"codeVoice","code":"\"🐥\""},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that not all 21-bit Unicode scalar values are assigned to a character —"},{"type":"text","text":" "},{"type":"text","text":"some scalars are reserved for future assignment or for use in UTF-16 encoding."},{"type":"text","text":" "},{"type":"text","text":"Scalar values that have been assigned to a character typically also have a name,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"LATIN SMALL LETTER A"},{"type":"text","text":" and "},{"type":"codeVoice","code":"FRONT-FACING BABY CHICK"},{"type":"text","text":" in the examples above."}]},{"anchor":"Extended-Grapheme-Clusters","level":3,"type":"heading","text":"Extended Grapheme Clusters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every instance of Swift’s "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type represents"},{"type":"text","text":" "},{"type":"text","text":"a single "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended grapheme cluster"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"An extended grapheme cluster is a sequence of one or more Unicode scalars"},{"type":"text","text":" "},{"type":"text","text":"that (when combined) produce a single human-readable character."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example."},{"type":"text","text":" "},{"type":"text","text":"The letter "},{"type":"codeVoice","code":"é"},{"type":"text","text":" can be represented as the single Unicode scalar "},{"type":"codeVoice","code":"é"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"LATIN SMALL LETTER E WITH ACUTE"},{"type":"text","text":", or "},{"type":"codeVoice","code":"U+00E9"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"However, the same letter can also be represented as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pair"}]},{"type":"text","text":" of scalars —"},{"type":"text","text":" "},{"type":"text","text":"a standard letter "},{"type":"codeVoice","code":"e"},{"type":"text","text":" ("},{"type":"codeVoice","code":"LATIN SMALL LETTER E"},{"type":"text","text":", or "},{"type":"codeVoice","code":"U+0065"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"followed by the "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" scalar ("},{"type":"codeVoice","code":"U+0301"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" scalar is graphically applied to the scalar that precedes it,"},{"type":"text","text":" "},{"type":"text","text":"turning an "},{"type":"codeVoice","code":"e"},{"type":"text","text":" into an "},{"type":"codeVoice","code":"é"},{"type":"text","text":" when it’s rendered by"},{"type":"text","text":" "},{"type":"text","text":"a Unicode-aware text-rendering system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, the letter "},{"type":"codeVoice","code":"é"},{"type":"text","text":" is represented as a single Swift "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"that represents an extended grapheme cluster."},{"type":"text","text":" "},{"type":"text","text":"In the first case, the cluster contains a single scalar;"},{"type":"text","text":" "},{"type":"text","text":"in the second case, it’s a cluster of two scalars:"}]},{"type":"codeListing","syntax":"swift","code":["let eAcute: Character = \"\\u{E9}\"                         \/\/ é","let combinedEAcute: Character = \"\\u{65}\\u{301}\"          \/\/ e followed by ́","\/\/ eAcute is é, combinedEAcute is é"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extended grapheme clusters are a flexible way to represent"},{"type":"text","text":" "},{"type":"text","text":"many complex script characters as a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"For example, Hangul syllables from the Korean alphabet"},{"type":"text","text":" "},{"type":"text","text":"can be represented as either a precomposed or decomposed sequence."},{"type":"text","text":" "},{"type":"text","text":"Both of these representations qualify as a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value in Swift:"}]},{"type":"codeListing","syntax":"swift","code":["let precomposed: Character = \"\\u{D55C}\"                  \/\/ 한","let decomposed: Character = \"\\u{1112}\\u{1161}\\u{11AB}\"   \/\/ ᄒ, ᅡ, ᆫ","\/\/ precomposed is 한, decomposed is 한"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extended grapheme clusters enable"},{"type":"text","text":" "},{"type":"text","text":"scalars for enclosing marks (such as "},{"type":"codeVoice","code":"COMBINING ENCLOSING CIRCLE"},{"type":"text","text":", or "},{"type":"codeVoice","code":"U+20DD"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to enclose other Unicode scalars as part of a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value:"}]},{"type":"codeListing","syntax":"swift","code":["let enclosedEAcute: Character = \"\\u{E9}\\u{20DD}\"","\/\/ enclosedEAcute is é⃝"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unicode scalars for regional indicator symbols"},{"type":"text","text":" "},{"type":"text","text":"can be combined in pairs to make a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"such as this combination of "},{"type":"codeVoice","code":"REGIONAL INDICATOR SYMBOL LETTER U"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+1F1FA"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"REGIONAL INDICATOR SYMBOL LETTER S"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+1F1F8"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let regionalIndicatorForUS: Character = \"\\u{1F1FA}\\u{1F1F8}\"","\/\/ regionalIndicatorForUS is 🇺🇸"]},{"anchor":"Counting-Characters","level":2,"type":"heading","text":"Counting Characters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To retrieve a count of the "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values in a string,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property of the string:"}]},{"type":"codeListing","syntax":"swift","code":["let unusualMenagerie = \"Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪\"","print(\"unusualMenagerie has \\(unusualMenagerie.count) characters\")","\/\/ Prints \"unusualMenagerie has 40 characters\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that Swift’s use of extended grapheme clusters for "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"means that string concatenation and modification may not always affect"},{"type":"text","text":" "},{"type":"text","text":"a string’s character count."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you initialize a new string with the four-character word "},{"type":"codeVoice","code":"cafe"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and then append a "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0301"},{"type":"text","text":") to the end of the string,"},{"type":"text","text":" "},{"type":"text","text":"the resulting string will still have a character count of "},{"type":"codeVoice","code":"4"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a fourth character of "},{"type":"codeVoice","code":"é"},{"type":"text","text":", not "},{"type":"codeVoice","code":"e"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var word = \"cafe\"","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in cafe is 4\"","","word += \"\\u{301}\"    \/\/ COMBINING ACUTE ACCENT, U+0301","","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in café is 4\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extended grapheme clusters can be composed of multiple Unicode scalars."},{"type":"text","text":" "},{"type":"text","text":"This means that different characters—"},{"type":"text","text":" "},{"type":"text","text":"and different representations of the same character—"},{"type":"text","text":" "},{"type":"text","text":"can require different amounts of memory to store."},{"type":"text","text":" "},{"type":"text","text":"Because of this, characters in Swift don’t each take up"},{"type":"text","text":" "},{"type":"text","text":"the same amount of memory within a string’s representation."},{"type":"text","text":" "},{"type":"text","text":"As a result, the number of characters in a string can’t be calculated"},{"type":"text","text":" "},{"type":"text","text":"without iterating through the string to determine"},{"type":"text","text":" "},{"type":"text","text":"its extended grapheme cluster boundaries."},{"type":"text","text":" "},{"type":"text","text":"If you are working with particularly long string values,"},{"type":"text","text":" "},{"type":"text","text":"be aware that the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"must iterate over the Unicode scalars in the entire string"},{"type":"text","text":" "},{"type":"text","text":"in order to determine the characters for that string.The count of the characters returned by the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"isn’t always the same as the "},{"type":"codeVoice","code":"length"},{"type":"text","text":" property of"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" that contains the same characters."},{"type":"text","text":" "},{"type":"text","text":"The length of an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" is based on"},{"type":"text","text":" "},{"type":"text","text":"the number of 16-bit code units within the string’s UTF-16 representation"},{"type":"text","text":" "},{"type":"text","text":"and not the number of Unicode extended grapheme clusters within the string."}]}],"type":"aside","name":"Note"},{"anchor":"Accessing-and-Modifying-a-String","level":2,"type":"heading","text":"Accessing and Modifying a String"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a string through its methods and properties,"},{"type":"text","text":" "},{"type":"text","text":"or by using subscript syntax."}]},{"anchor":"String-Indices","level":3,"type":"heading","text":"String Indices"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value has an associated "},{"type":"emphasis","inlineContent":[{"type":"text","text":"index type"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"String.Index"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which corresponds to the position of each "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" in the string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"type":"text","text":"different characters can require different amounts of memory to store,"},{"type":"text","text":" "},{"type":"text","text":"so in order to determine which "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" is at a particular position,"},{"type":"text","text":" "},{"type":"text","text":"you must iterate over each Unicode scalar from the start or end of that "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For this reason, Swift strings can’t be indexed by integer values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" property to access"},{"type":"text","text":" "},{"type":"text","text":"the position of the first "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" property is the position after the last character in a "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"As a result,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" property isn’t a valid argument to a string’s subscript."},{"type":"text","text":" "},{"type":"text","text":"If a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" is empty, "},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" are equal."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access the indices before and after a given index"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"index(before:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"index(after:)"},{"type":"text","text":" methods of "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To access an index farther away from the given index,"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"type":"codeVoice","code":"index(_:offsetBy:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"instead of calling one of these methods multiple times."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use subscript syntax to access"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" at a particular "},{"type":"codeVoice","code":"String"},{"type":"text","text":" index."}]},{"type":"codeListing","syntax":"swift","code":["let greeting = \"Guten Tag!\"","greeting[greeting.startIndex]","\/\/ G","greeting[greeting.index(before: greeting.endIndex)]","\/\/ !","greeting[greeting.index(after: greeting.startIndex)]","\/\/ u","let index = greeting.index(greeting.startIndex, offsetBy: 7)","greeting[index]","\/\/ a"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Attempting to access an index outside of a string’s range"},{"type":"text","text":" "},{"type":"text","text":"or a "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" at an index outside of a string’s range"},{"type":"text","text":" "},{"type":"text","text":"will trigger a runtime error."}]},{"type":"codeListing","syntax":"swift","code":["greeting[greeting.endIndex] \/\/ Error","greeting.index(after: greeting.endIndex) \/\/ Error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"indices"},{"type":"text","text":" property to access all of the"},{"type":"text","text":" "},{"type":"text","text":"indices of individual characters in a string."}]},{"type":"codeListing","syntax":"swift","code":["for index in greeting.indices {","   print(\"\\(greeting[index]) \", terminator: \"\")","}","\/\/ Prints \"G u t e n   T a g ! \""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" properties"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"index(before:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"index(after:)"},{"type":"text","text":", and "},{"type":"codeVoice","code":"index(_:offsetBy:)"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"type":"text","text":"on any type that conforms to the "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"This includes "},{"type":"codeVoice","code":"String"},{"type":"text","text":", as shown here,"},{"type":"text","text":" "},{"type":"text","text":"as well as collection types such as "},{"type":"codeVoice","code":"Array"},{"type":"text","text":", "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Set"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Inserting-and-Removing","level":3,"type":"heading","text":"Inserting and Removing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To insert a single character into a string at a specified index,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"and to insert the contents of another string at a specified index,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"insert(contentsOf:at:)"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["var welcome = \"hello\"","welcome.insert(\"!\", at: welcome.endIndex)","\/\/ welcome now equals \"hello!\"","","welcome.insert(contentsOf: \" there\", at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To remove a single character from a string at a specified index,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"and to remove a substring at a specified range,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"removeSubrange(_:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["welcome.remove(at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there\"","","let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex","welcome.removeSubrange(range)","\/\/ welcome now equals \"hello\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"insert(contentsOf:at:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":", and "},{"type":"codeVoice","code":"removeSubrange(_:)"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"type":"text","text":"on any type that conforms to the "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"This includes "},{"type":"codeVoice","code":"String"},{"type":"text","text":", as shown here,"},{"type":"text","text":" "},{"type":"text","text":"as well as collection types such as "},{"type":"codeVoice","code":"Array"},{"type":"text","text":", "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Set"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Substrings","level":2,"type":"heading","text":"Substrings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you get a substring from a string —"},{"type":"text","text":" "},{"type":"text","text":"for example, using a subscript or a method like "},{"type":"codeVoice","code":"prefix(_:)"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"the result is an instance"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"not another string."},{"type":"text","text":" "},{"type":"text","text":"Substrings in Swift have most of the same methods as strings,"},{"type":"text","text":" "},{"type":"text","text":"which means you can work with substrings"},{"type":"text","text":" "},{"type":"text","text":"the same way you work with strings."},{"type":"text","text":" "},{"type":"text","text":"However, unlike strings,"},{"type":"text","text":" "},{"type":"text","text":"you use substrings for only a short amount of time"},{"type":"text","text":" "},{"type":"text","text":"while performing actions on a string."},{"type":"text","text":" "},{"type":"text","text":"When you’re ready to store the result for a longer time,"},{"type":"text","text":" "},{"type":"text","text":"you convert the substring to an instance of "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let greeting = \"Hello, world!\"","let index = greeting.firstIndex(of: \",\") ?? greeting.endIndex","let beginning = greeting[..<index]","\/\/ beginning is \"Hello\"","","\/\/ Convert the result to a String for long-term storage.","let newString = String(beginning)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like strings, each substring has a region of memory"},{"type":"text","text":" "},{"type":"text","text":"where the characters that make up the substring are stored."},{"type":"text","text":" "},{"type":"text","text":"The difference between strings and substrings"},{"type":"text","text":" "},{"type":"text","text":"is that, as a performance optimization,"},{"type":"text","text":" "},{"type":"text","text":"a substring can reuse part of the memory"},{"type":"text","text":" "},{"type":"text","text":"that’s used to store the original string,"},{"type":"text","text":" "},{"type":"text","text":"or part of the memory that’s used to store another substring."},{"type":"text","text":" "},{"type":"text","text":"(Strings have a similar optimization,"},{"type":"text","text":" "},{"type":"text","text":"but if two strings share memory, they’re equal.)"},{"type":"text","text":" "},{"type":"text","text":"This performance optimization means"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to pay the performance cost of copying memory"},{"type":"text","text":" "},{"type":"text","text":"until you modify either the string or substring."},{"type":"text","text":" "},{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"type":"text","text":"substrings aren’t suitable for long-term storage —"},{"type":"text","text":" "},{"type":"text","text":"because they reuse the storage of the original string,"},{"type":"text","text":" "},{"type":"text","text":"the entire original string must be kept in memory"},{"type":"text","text":" "},{"type":"text","text":"as long as any of its substrings are being used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":" is a string,"},{"type":"text","text":" "},{"type":"text","text":"which means it has a region of memory"},{"type":"text","text":" "},{"type":"text","text":"where the characters that make up the string are stored."},{"type":"text","text":" "},{"type":"text","text":"Because"},{"type":"text","text":" "},{"type":"codeVoice","code":"beginning"},{"type":"text","text":" is a substring of "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it reuses the memory that "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":" uses."},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"codeVoice","code":"newString"},{"type":"text","text":" is a string —"},{"type":"text","text":" "},{"type":"text","text":"when it’s created from the substring,"},{"type":"text","text":" "},{"type":"text","text":"it has its own storage."},{"type":"text","text":" "},{"type":"text","text":"The figure below shows these relationships:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"stringSubstring"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" conform to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"which means it’s often convenient for string-manipulation functions"},{"type":"text","text":" "},{"type":"text","text":"to accept a "},{"type":"codeVoice","code":"StringProtocol"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"You can call such functions with either a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" value."}]}],"type":"aside","name":"Note"},{"anchor":"Comparing-Strings","level":2,"type":"heading","text":"Comparing Strings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides three ways to compare textual values:"},{"type":"text","text":" "},{"type":"text","text":"string and character equality, prefix equality, and suffix equality."}]},{"anchor":"String-and-Character-Equality","level":3,"type":"heading","text":"String and Character Equality"},{"type":"paragraph","inlineContent":[{"type":"text","text":"String and character equality is checked with the “equal to” operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and the “not equal to” operator ("},{"type":"codeVoice","code":"!="},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"text","text":"doc:BasicOperators#Comparison-Operators"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let quotation = \"We're a lot alike, you and I.\"","let sameQuotation = \"We're a lot alike, you and I.\"","if quotation == sameQuotation {","   print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Two "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values (or two "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values) are considered equal if"},{"type":"text","text":" "},{"type":"text","text":"their extended grapheme clusters are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"canonically equivalent"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Extended grapheme clusters are canonically equivalent if they have"},{"type":"text","text":" "},{"type":"text","text":"the same linguistic meaning and appearance,"},{"type":"text","text":" "},{"type":"text","text":"even if they’re composed from different Unicode scalars behind the scenes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, "},{"type":"codeVoice","code":"LATIN SMALL LETTER E WITH ACUTE"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+00E9"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"is canonically equivalent to "},{"type":"codeVoice","code":"LATIN SMALL LETTER E"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0065"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"followed by "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0301"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Both of these extended grapheme clusters are valid ways to represent the character "},{"type":"codeVoice","code":"é"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so they’re considered to be canonically equivalent:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E WITH ACUTE","let eAcuteQuestion = \"Voulez-vous un caf\\u{E9}?\"","","\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT","let combinedEAcuteQuestion = \"Voulez-vous un caf\\u{65}\\u{301}?\"","","if eAcuteQuestion == combinedEAcuteQuestion {","   print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversely, "},{"type":"codeVoice","code":"LATIN CAPITAL LETTER A"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0041"},{"type":"text","text":", or "},{"type":"codeVoice","code":"\"A\""},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"as used in English, is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" equivalent to"},{"type":"text","text":" "},{"type":"codeVoice","code":"CYRILLIC CAPITAL LETTER A"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0410"},{"type":"text","text":", or "},{"type":"codeVoice","code":"\"А\""},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"as used in Russian."},{"type":"text","text":" "},{"type":"text","text":"The characters are visually similar,"},{"type":"text","text":" "},{"type":"text","text":"but don’t have the same linguistic meaning:"}]},{"type":"codeListing","syntax":"swift","code":["let latinCapitalLetterA: Character = \"\\u{41}\"","","let cyrillicCapitalLetterA: Character = \"\\u{0410}\"","","if latinCapitalLetterA != cyrillicCapitalLetterA {","   print(\"These two characters aren't equivalent.\")","}","\/\/ Prints \"These two characters aren't equivalent.\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"String and character comparisons in Swift aren’t locale-sensitive."}]}],"type":"aside","name":"Note"},{"anchor":"Prefix-and-Suffix-Equality","level":3,"type":"heading","text":"Prefix and Suffix Equality"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check whether a string has a particular string prefix or suffix,"},{"type":"text","text":" "},{"type":"text","text":"call the string’s "},{"type":"codeVoice","code":"hasPrefix(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"hasSuffix(_:)"},{"type":"text","text":" methods,"},{"type":"text","text":" "},{"type":"text","text":"both of which take a single argument of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and return a Boolean value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples below consider an array of strings representing"},{"type":"text","text":" "},{"type":"text","text":"the scene locations from the first two acts of Shakespeare’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Romeo and Juliet"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let romeoAndJuliet = [","   \"Act 1 Scene 1: Verona, A public place\",","   \"Act 1 Scene 2: Capulet's mansion\",","   \"Act 1 Scene 3: A room in Capulet's mansion\",","   \"Act 1 Scene 4: A street outside Capulet's mansion\",","   \"Act 1 Scene 5: The Great Hall in Capulet's mansion\",","   \"Act 2 Scene 1: Outside Capulet's mansion\",","   \"Act 2 Scene 2: Capulet's orchard\",","   \"Act 2 Scene 3: Outside Friar Lawrence's cell\",","   \"Act 2 Scene 4: A street in Verona\",","   \"Act 2 Scene 5: Capulet's mansion\",","   \"Act 2 Scene 6: Friar Lawrence's cell\"","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"hasPrefix(_:)"},{"type":"text","text":" method with the "},{"type":"codeVoice","code":"romeoAndJuliet"},{"type":"text","text":" array"},{"type":"text","text":" "},{"type":"text","text":"to count the number of scenes in Act 1 of the play:"}]},{"type":"codeListing","syntax":"swift","code":["var act1SceneCount = 0","for scene in romeoAndJuliet {","   if scene.hasPrefix(\"Act 1 \") {","      act1SceneCount += 1","   }","}","print(\"There are \\(act1SceneCount) scenes in Act 1\")","\/\/ Prints \"There are 5 scenes in Act 1\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, use the "},{"type":"codeVoice","code":"hasSuffix(_:)"},{"type":"text","text":" method to count the number of scenes"},{"type":"text","text":" "},{"type":"text","text":"that take place in or around Capulet’s mansion and Friar Lawrence’s cell:"}]},{"type":"codeListing","syntax":"swift","code":["var mansionCount = 0","var cellCount = 0","for scene in romeoAndJuliet {","   if scene.hasSuffix(\"Capulet's mansion\") {","      mansionCount += 1","   } else if scene.hasSuffix(\"Friar Lawrence's cell\") {","      cellCount += 1","   }","}","print(\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\")","\/\/ Prints \"6 mansion scenes; 2 cell scenes\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"hasPrefix(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"hasSuffix(_:)"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"type":"text","text":"perform a character-by-character canonical equivalence comparison between"},{"type":"text","text":" "},{"type":"text","text":"the extended grapheme clusters in each string,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-and-Character-Equality"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Unicode-Representations-of-Strings","level":2,"type":"heading","text":"Unicode Representations of Strings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a Unicode string is written to a text file or some other storage,"},{"type":"text","text":" "},{"type":"text","text":"the Unicode scalars in that string are encoded in one of"},{"type":"text","text":" "},{"type":"text","text":"several Unicode-defined "},{"type":"emphasis","inlineContent":[{"type":"text","text":"encoding forms"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Each form encodes the string in small chunks known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"code units"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These include the UTF-8 encoding form (which encodes a string as 8-bit code units),"},{"type":"text","text":" "},{"type":"text","text":"the UTF-16 encoding form (which encodes a string as 16-bit code units),"},{"type":"text","text":" "},{"type":"text","text":"and the UTF-32 encoding form (which encodes a string as 32-bit code units)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides several different ways to access Unicode representations of strings."},{"type":"text","text":" "},{"type":"text","text":"You can iterate over the string with a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"to access its individual "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values as Unicode extended grapheme clusters."},{"type":"text","text":" "},{"type":"text","text":"This process is described in "},{"type":"text","text":"doc:StringsAndCharacters#Working-with-Characters"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, access a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"in one of three other Unicode-compliant representations:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection of UTF-8 code units (accessed with the string’s "},{"type":"codeVoice","code":"utf8"},{"type":"text","text":" property)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection of UTF-16 code units (accessed with the string’s "},{"type":"codeVoice","code":"utf16"},{"type":"text","text":" property)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection of 21-bit Unicode scalar values,"},{"type":"text","text":" "},{"type":"text","text":"equivalent to the string’s UTF-32 encoding form"},{"type":"text","text":" "},{"type":"text","text":"(accessed with the string’s "},{"type":"codeVoice","code":"unicodeScalars"},{"type":"text","text":" property)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each example below shows a different representation of the following string,"},{"type":"text","text":" "},{"type":"text","text":"which is made up of the characters "},{"type":"codeVoice","code":"D"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", "},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"‼"},{"type":"text","text":" ("},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":", or Unicode scalar "},{"type":"codeVoice","code":"U+203C"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and the 🐶 character ("},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":", or Unicode scalar "},{"type":"codeVoice","code":"U+1F436"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let dogString = \"Dog‼🐶\""]},{"anchor":"UTF-8-Representation","level":3,"type":"heading","text":"UTF-8 Representation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access a UTF-8 representation of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"utf8"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"This property is of type "},{"type":"codeVoice","code":"String.UTF8View"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a collection of unsigned 8-bit ("},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":") values,"},{"type":"text","text":" "},{"type":"text","text":"one for each byte in the string’s UTF-8 representation:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"UTF8"}]},{"type":"codeListing","syntax":"swift","code":["for codeUnit in dogString.utf8 {","   print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 226 128 188 240 159 144 182 \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, the first three decimal "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"type":"text","text":", "},{"type":"codeVoice","code":"111"},{"type":"text","text":", "},{"type":"codeVoice","code":"103"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"represent the characters "},{"type":"codeVoice","code":"D"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", and "},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whose UTF-8 representation is the same as their ASCII representation."},{"type":"text","text":" "},{"type":"text","text":"The next three decimal "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"226"},{"type":"text","text":", "},{"type":"codeVoice","code":"128"},{"type":"text","text":", "},{"type":"codeVoice","code":"188"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are a three-byte UTF-8 representation of the "},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"The last four "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values ("},{"type":"codeVoice","code":"240"},{"type":"text","text":", "},{"type":"codeVoice","code":"159"},{"type":"text","text":", "},{"type":"codeVoice","code":"144"},{"type":"text","text":", "},{"type":"codeVoice","code":"182"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are a four-byte UTF-8 representation of the "},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":" character."}]},{"anchor":"UTF-16-Representation","level":3,"type":"heading","text":"UTF-16 Representation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access a UTF-16 representation of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"utf16"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"This property is of type "},{"type":"codeVoice","code":"String.UTF16View"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a collection of unsigned 16-bit ("},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":") values,"},{"type":"text","text":" "},{"type":"text","text":"one for each 16-bit code unit in the string’s UTF-16 representation:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"UTF16"}]},{"type":"codeListing","syntax":"swift","code":["for codeUnit in dogString.utf16 {","   print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 55357 56374 \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Again, the first three "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"type":"text","text":", "},{"type":"codeVoice","code":"111"},{"type":"text","text":", "},{"type":"codeVoice","code":"103"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"represent the characters "},{"type":"codeVoice","code":"D"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", and "},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whose UTF-16 code units have the same values as in the string’s UTF-8 representation"},{"type":"text","text":" "},{"type":"text","text":"(because these Unicode scalars represent ASCII characters)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fourth "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" value ("},{"type":"codeVoice","code":"8252"},{"type":"text","text":") is a decimal equivalent of"},{"type":"text","text":" "},{"type":"text","text":"the hexadecimal value "},{"type":"codeVoice","code":"203C"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents the Unicode scalar "},{"type":"codeVoice","code":"U+203C"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"This character can be represented as a single code unit in UTF-16."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fifth and sixth "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values ("},{"type":"codeVoice","code":"55357"},{"type":"text","text":" and "},{"type":"codeVoice","code":"56374"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are a UTF-16 surrogate pair representation of the "},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"These values are a high-surrogate value of "},{"type":"codeVoice","code":"U+D83D"},{"type":"text","text":" (decimal value "},{"type":"codeVoice","code":"55357"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and a low-surrogate value of "},{"type":"codeVoice","code":"U+DC36"},{"type":"text","text":" (decimal value "},{"type":"codeVoice","code":"56374"},{"type":"text","text":")."}]},{"anchor":"Unicode-Scalar-Representation","level":3,"type":"heading","text":"Unicode Scalar Representation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access a Unicode scalar representation of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"unicodeScalars"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"This property is of type "},{"type":"codeVoice","code":"UnicodeScalarView"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a collection of values of type "},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each "},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":" has a "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property that returns"},{"type":"text","text":" "},{"type":"text","text":"the scalar’s 21-bit value, represented within a "},{"type":"codeVoice","code":"UInt32"},{"type":"text","text":" value:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"UnicodeScalar"}]},{"type":"codeListing","syntax":"swift","code":["for scalar in dogString.unicodeScalars {","   print(\"\\(scalar.value) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 128054 \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"value"},{"type":"text","text":" properties for the first three "},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"type":"text","text":", "},{"type":"codeVoice","code":"111"},{"type":"text","text":", "},{"type":"codeVoice","code":"103"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"once again represent the characters "},{"type":"codeVoice","code":"D"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", and "},{"type":"codeVoice","code":"g"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fourth "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" value ("},{"type":"codeVoice","code":"8252"},{"type":"text","text":") is again a decimal equivalent of"},{"type":"text","text":" "},{"type":"text","text":"the hexadecimal value "},{"type":"codeVoice","code":"203C"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents the Unicode scalar "},{"type":"codeVoice","code":"U+203C"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":" character."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property of the fifth and final "},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":", "},{"type":"codeVoice","code":"128054"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"is a decimal equivalent of the hexadecimal value "},{"type":"codeVoice","code":"1F436"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents the Unicode scalar "},{"type":"codeVoice","code":"U+1F436"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":" character."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an alternative to querying their "},{"type":"codeVoice","code":"value"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"type":"text","text":"each "},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":" value can also be used to construct a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"such as with string interpolation:"}]},{"type":"codeListing","syntax":"swift","code":["for scalar in dogString.unicodeScalars {","   print(\"\\(scalar) \")","}","\/\/ D","\/\/ o","\/\/ g","\/\/ ‼","\/\/ 🐶"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/stringsandcharacters"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Strings e Characters","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"UTF8":{"alt":null,"type":"image","identifier":"UTF8","variants":[{"url":"\/images\/UTF8@2x.png","traits":["2x","light"]},{"url":"\/images\/UTF8~dark@2x.png","traits":["2x","dark"]}]},"stringSubstring":{"alt":null,"type":"image","identifier":"stringSubstring","variants":[{"url":"\/images\/stringSubstring@2x.png","traits":["2x","light"]},{"url":"\/images\/stringSubstring~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Unicode":{"abstract":[],"title":"Unicode","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Unicode","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Unicode"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-and-Character-Equality":{"abstract":[],"title":"String and Character Equality","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-and-Character-Equality","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#String-and-Character-Equality"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"https://developer.apple.com/documentation/swift/stringprotocol":{"title":"StringProtocol","titleInlineContent":[{"type":"text","text":"StringProtocol"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","url":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"https://developer.apple.com/documentation/swift/string#2919514":{"title":"Bridging Between String and NSString","titleInlineContent":[{"type":"text","text":"Bridging Between String and NSString"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","url":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"UnicodeScalar":{"alt":null,"type":"image","identifier":"UnicodeScalar","variants":[{"url":"\/images\/UnicodeScalar@2x.png","traits":["2x","light"]},{"url":"\/images\/UnicodeScalar~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#For-In-Loops":{"abstract":[],"title":"For-In Loops","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops","url":"\/documentation\/the-swift-programming-language\/controlflow#For-In-Loops"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"multilineStringWhitespace":{"alt":null,"type":"image","identifier":"multilineStringWhitespace","variants":[{"url":"\/images\/multilineStringWhitespace@2x.png","traits":["2x","light"]},{"url":"\/images\/multilineStringWhitespace~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"UTF16":{"alt":null,"type":"image","identifier":"UTF16","variants":[{"url":"\/images\/UTF16@2x.png","traits":["2x","light"]},{"url":"\/images\/UTF16~dark@2x.png","traits":["2x","dark"]}]},"https://developer.apple.com/documentation/swift/substring":{"title":"Substring","titleInlineContent":[{"type":"text","text":"Substring"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring","url":"https:\/\/developer.apple.com\/documentation\/swift\/substring"}}}