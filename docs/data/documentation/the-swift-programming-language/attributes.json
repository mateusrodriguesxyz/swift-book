{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You specify an attribute by writing the "},{"type":"codeVoice","code":"@"},{"type":"text","text":" symbol followed by the attribute’s name"},{"type":"text","text":" "},{"type":"text","text":"and any arguments that the attribute accepts:"}]},{"type":"codeListing","syntax":"markdown","code":["@<#attribute name#>","@<#attribute name#>(<#attribute arguments#>)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some declaration attributes accept arguments"},{"type":"text","text":" "},{"type":"text","text":"that specify more information about the attribute"},{"type":"text","text":" "},{"type":"text","text":"and how it applies to a particular declaration."},{"type":"text","text":" "},{"type":"text","text":"These "},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute arguments"}]},{"type":"text","text":" are enclosed in parentheses,"},{"type":"text","text":" "},{"type":"text","text":"and their format is defined by the attribute they belong to."}]},{"anchor":"Declaration-Attributes","level":2,"type":"heading","text":"Declaration Attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply a declaration attribute to declarations only."}]},{"anchor":"available","level":3,"type":"heading","text":"available"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to indicate a declaration’s life cycle"},{"type":"text","text":" "},{"type":"text","text":"relative to certain Swift language versions"},{"type":"text","text":" "},{"type":"text","text":"or certain platforms and operating system versions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute always appears"},{"type":"text","text":" "},{"type":"text","text":"with a list of two or more comma-separated attribute arguments."},{"type":"text","text":" "},{"type":"text","text":"These arguments begin with one of the following platform or language names:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"iOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"iOSApplicationExtension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"macOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"macOSApplicationExtension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"macCatalyst"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"macCatalystApplicationExtension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"watchOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"watchOSApplicationExtension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"tvOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"tvOSApplicationExtension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"swift"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use an asterisk ("},{"type":"codeVoice","code":"*"},{"type":"text","text":") to indicate the"},{"type":"text","text":" "},{"type":"text","text":"availability of the declaration on all of the platform names listed above."},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"that specifies availability using a Swift version number"},{"type":"text","text":" "},{"type":"text","text":"can’t use the asterisk."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The remaining arguments can appear in any order"},{"type":"text","text":" "},{"type":"text","text":"and specify additional information about the declaration’s life cycle,"},{"type":"text","text":" "},{"type":"text","text":"including important milestones."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"unavailable"},{"type":"text","text":" argument indicates that the declaration"},{"type":"text","text":" "},{"type":"text","text":"isn’t available on the specified platform."},{"type":"text","text":" "},{"type":"text","text":"This argument can’t be used when specifying Swift version availability."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"introduced"},{"type":"text","text":" argument indicates the first version"},{"type":"text","text":" "},{"type":"text","text":"of the specified platform or language in which the declaration was introduced."},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["introduced: <#version number#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"version number"}]},{"type":"text","text":" consists of one to three positive integers,"},{"type":"text","text":" "},{"type":"text","text":"separated by periods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"deprecated"},{"type":"text","text":" argument indicates the first version"},{"type":"text","text":" "},{"type":"text","text":"of the specified platform or language in which the declaration was deprecated."},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["deprecated: <#version number#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The optional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"version number"}]},{"type":"text","text":" consists of one to three positive integers,"},{"type":"text","text":" "},{"type":"text","text":"separated by periods."},{"type":"text","text":" "},{"type":"text","text":"Omitting the version number indicates that the declaration is currently deprecated,"},{"type":"text","text":" "},{"type":"text","text":"without giving any information about when the deprecation occurred."},{"type":"text","text":" "},{"type":"text","text":"If you omit the version number, omit the colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":") as well."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"obsoleted"},{"type":"text","text":" argument indicates the first version"},{"type":"text","text":" "},{"type":"text","text":"of the specified platform or language in which the declaration was obsoleted."},{"type":"text","text":" "},{"type":"text","text":"When a declaration is obsoleted,"},{"type":"text","text":" "},{"type":"text","text":"it’s removed from the specified platform or language and can no longer be used."},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["obsoleted: <#version number#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"version number"}]},{"type":"text","text":" consists of one to three positive integers, separated by periods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"message"},{"type":"text","text":" argument provides a textual message that the compiler displays"},{"type":"text","text":" "},{"type":"text","text":"when emitting a warning or error about the use of a deprecated or obsoleted declaration."},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["message: <#message#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"message"}]},{"type":"text","text":" consists of a string literal."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"renamed"},{"type":"text","text":" argument provides a textual message"},{"type":"text","text":" "},{"type":"text","text":"that indicates the new name for a declaration that’s been renamed."},{"type":"text","text":" "},{"type":"text","text":"The compiler displays the new name"},{"type":"text","text":" "},{"type":"text","text":"when emitting an error about the use of a renamed declaration."},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["renamed: <#new name#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"new name"}]},{"type":"text","text":" consists of a string literal.You can apply the "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"renamed"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unavailable"},{"type":"text","text":" arguments"},{"type":"text","text":" "},{"type":"text","text":"to a type alias declaration, as shown below,"},{"type":"text","text":" "},{"type":"text","text":"to indicate that the name of a declaration changed"},{"type":"text","text":" "},{"type":"text","text":"between releases of a framework or library."},{"type":"text","text":" "},{"type":"text","text":"This combination results in a compile-time error"},{"type":"text","text":" "},{"type":"text","text":"that the declaration has been renamed."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ First release","protocol MyProtocol {","    \/\/ protocol definition","}"]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute only specifies an "},{"type":"codeVoice","code":"introduced"},{"type":"text","text":" argument"},{"type":"text","text":" "},{"type":"text","text":"in addition to a platform or language name argument,"},{"type":"text","text":" "},{"type":"text","text":"you can use the following shorthand syntax instead:"}]},{"type":"codeListing","syntax":"markdown","code":["@available(<#platform name#> <#version number#>, *)","@available(swift <#version number#>)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The shorthand syntax for "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"concisely expresses availability for multiple platforms."},{"type":"text","text":" "},{"type":"text","text":"Although the two forms are functionally equivalent,"},{"type":"text","text":" "},{"type":"text","text":"the shorthand form is preferred whenever possible."}]},{"type":"codeListing","syntax":"swift","code":["@available(iOS 10.0, macOS 10.12, *)","class MyClass {","    \/\/ class definition","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"that specifies availability using a Swift version number"},{"type":"text","text":" "},{"type":"text","text":"can’t additionally specify a declaration’s platform availability."},{"type":"text","text":" "},{"type":"text","text":"Instead, use separate "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attributes to specify a Swift"},{"type":"text","text":" "},{"type":"text","text":"version availability and one or more platform availabilities."}]},{"type":"codeListing","syntax":"swift","code":["@available(swift 3.0.2)","@available(macOS 10.12, *)","struct MyStruct {","    \/\/ struct definition","}"]},{"anchor":"discardableResult","level":3,"type":"heading","text":"discardableResult"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a function or method declaration"},{"type":"text","text":" "},{"type":"text","text":"to suppress the compiler warning"},{"type":"text","text":" "},{"type":"text","text":"when the function or method that returns a value"},{"type":"text","text":" "},{"type":"text","text":"is called without using its result."}]},{"anchor":"dynamicCallable","level":3,"type":"heading","text":"dynamicCallable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration, or protocol"},{"type":"text","text":" "},{"type":"text","text":"to treat instances of the type as callable functions."},{"type":"text","text":" "},{"type":"text","text":"The type must implement either a "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"or both."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call an instance of a dynamically callable type"},{"type":"text","text":" "},{"type":"text","text":"as if it’s a function that takes any number of arguments."}]},{"type":"codeListing","syntax":"swift","code":["@dynamicCallable","struct TelephoneExchange {","    func dynamicallyCall(withArguments phoneNumber: [Int]) {","        if phoneNumber == [4, 1, 1] {","            print(\"Get Swift help on forums.swift.org\")","        } else {","            print(\"Unrecognized number\")","        }","    }","}","","let dial = TelephoneExchange()","","\/\/ Use a dynamic method call.","dial(4, 1, 1)","\/\/ Prints \"Get Swift help on forums.swift.org\"","","dial(8, 6, 7, 5, 3, 0, 9)","\/\/ Prints \"Unrecognized number\"","","\/\/ Call the underlying method directly.","dial.dynamicallyCall(withArguments: [4, 1, 1])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration of the "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"must have a single parameter that conforms to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral"},{"type":"text","text":" "},{"type":"text","text":"protocol—like "},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":" in the example above."},{"type":"text","text":" "},{"type":"text","text":"The return type can be any type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can include labels in a dynamic method call"},{"type":"text","text":" "},{"type":"text","text":"if you implement the "},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["@dynamicCallable","struct Repeater {","    func dynamicallyCall(withKeywordArguments pairs: KeyValuePairs<String, Int>) -> String {","        return pairs","            .map { label, count in","                repeatElement(label, count: count).joined(separator: \" \")","            }","            .joined(separator: \"\\n\")","    }","}","","let repeatLabels = Repeater()","print(repeatLabels(a: 1, b: 2, c: 3, b: 2, a: 1))","\/\/ a","\/\/ b b","\/\/ c c c","\/\/ b b","\/\/ a"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration of the "},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"must have a single parameter that conforms to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral"},{"type":"text","text":" "},{"type":"text","text":"protocol,"},{"type":"text","text":" "},{"type":"text","text":"and the return type can be any type."},{"type":"text","text":" "},{"type":"text","text":"The parameter’s "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key"},{"type":"text","text":" "},{"type":"text","text":"must be"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The previous example uses "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs"},{"type":"text","text":" "},{"type":"text","text":"as the parameter type"},{"type":"text","text":" "},{"type":"text","text":"so that callers can include duplicate parameter labels—"},{"type":"text","text":" "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" appear multiple times in the call to "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you implement both "},{"type":"codeVoice","code":"dynamicallyCall"},{"type":"text","text":" methods,"},{"type":"text","text":" "},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"type":"text","text":" is called"},{"type":"text","text":" "},{"type":"text","text":"when the method call includes keyword arguments."},{"type":"text","text":" "},{"type":"text","text":"In all other cases, "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" is called."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can only call a dynamically callable instance"},{"type":"text","text":" "},{"type":"text","text":"with arguments and a return value that match the types you specify"},{"type":"text","text":" "},{"type":"text","text":"in one of your "},{"type":"codeVoice","code":"dynamicallyCall"},{"type":"text","text":" method implementations."},{"type":"text","text":" "},{"type":"text","text":"The call in the following example doesn’t compile because"},{"type":"text","text":" "},{"type":"text","text":"there isn’t an implementation of "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" "},{"type":"text","text":"that takes "},{"type":"codeVoice","code":"KeyValuePairs<String, String>"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["repeatLabels(a: \"four\") \/\/ Error"]},{"anchor":"dynamicMemberLookup","level":3,"type":"heading","text":"dynamicMemberLookup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration, or protocol"},{"type":"text","text":" "},{"type":"text","text":"to enable members to be looked up by name at runtime."},{"type":"text","text":" "},{"type":"text","text":"The type must implement a "},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"type":"text","text":" subscript."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In an explicit member expression,"},{"type":"text","text":" "},{"type":"text","text":"if there isn’t a corresponding declaration for the named member,"},{"type":"text","text":" "},{"type":"text","text":"the expression is understood as a call to"},{"type":"text","text":" "},{"type":"text","text":"the type’s "},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"type":"text","text":" subscript,"},{"type":"text","text":" "},{"type":"text","text":"passing information about the member as the argument."},{"type":"text","text":" "},{"type":"text","text":"The subscript can accept a parameter that’s either a key path or a member name;"},{"type":"text","text":" "},{"type":"text","text":"if you implement both subscripts,"},{"type":"text","text":" "},{"type":"text","text":"the subscript that takes key path argument is used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An implementation of "},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"type":"text","text":" "},{"type":"text","text":"can accept key paths using an argument of type"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It can accept member names using an argument of a type that conforms to the"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"ExpressibleByStringLiteral"}],"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","overridingTitle":"ExpressibleByStringLiteral"},{"type":"text","text":" protocol —"},{"type":"text","text":" "},{"type":"text","text":"in most cases, "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The subscript’s return type can be any type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic member lookup by member name"},{"type":"text","text":" "},{"type":"text","text":"can be used to create a wrapper type around data"},{"type":"text","text":" "},{"type":"text","text":"that can’t be type checked at compile time,"},{"type":"text","text":" "},{"type":"text","text":"such as when bridging data from other languages into Swift."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["@dynamicMemberLookup","struct DynamicStruct {","    let dictionary = [\"someDynamicMember\": 325,","                      \"someOtherMember\": 787]","    subscript(dynamicMember member: String) -> Int {","        return dictionary[member] ?? 1054","    }","}","let s = DynamicStruct()","","\/\/ Use dynamic member lookup.","let dynamic = s.someDynamicMember","print(dynamic)","\/\/ Prints \"325\"","","\/\/ Call the underlying subscript directly.","let equivalent = s[dynamicMember: \"someDynamicMember\"]","print(dynamic == equivalent)","\/\/ Prints \"true\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic member lookup by key path"},{"type":"text","text":" "},{"type":"text","text":"can be used to implement a wrapper type"},{"type":"text","text":" "},{"type":"text","text":"in a way that supports compile-time type checking."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct Point { var x, y: Int }","","@dynamicMemberLookup","struct PassthroughWrapper<Value> {","    var value: Value","    subscript<T>(dynamicMember member: KeyPath<Value, T>) -> T {","        get { return value[keyPath: member] }","    }","}","","let point = Point(x: 381, y: 431)","let wrapper = PassthroughWrapper(value: point)","print(wrapper.x)"]},{"anchor":"frozen","level":3,"type":"heading","text":"frozen"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a structure or enumeration declaration"},{"type":"text","text":" "},{"type":"text","text":"to restrict the kinds of changes you can make to the type."},{"type":"text","text":" "},{"type":"text","text":"This attribute is allowed only when compiling in library evolution mode."},{"type":"text","text":" "},{"type":"text","text":"Future versions of the library can’t change the declaration"},{"type":"text","text":" "},{"type":"text","text":"by adding, removing, or reordering"},{"type":"text","text":" "},{"type":"text","text":"an enumeration’s cases"},{"type":"text","text":" "},{"type":"text","text":"or a structure’s stored instance properties."},{"type":"text","text":" "},{"type":"text","text":"These changes are allowed on nonfrozen types,"},{"type":"text","text":" "},{"type":"text","text":"but they break ABI compatibility for frozen types."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the compiler isn’t in library evolution mode,"},{"type":"text","text":" "},{"type":"text","text":"all structures and enumerations are implicitly frozen,"},{"type":"text","text":" "},{"type":"text","text":"and this attribute is ignored."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In library evolution mode,"},{"type":"text","text":" "},{"type":"text","text":"code that interacts with members of nonfrozen structures and enumerations"},{"type":"text","text":" "},{"type":"text","text":"is compiled in a way that allows it to continue working without recompiling"},{"type":"text","text":" "},{"type":"text","text":"even if a future version of the library"},{"type":"text","text":" "},{"type":"text","text":"adds, removes, or reorders some of that type’s members."},{"type":"text","text":" "},{"type":"text","text":"The compiler makes this possible using techniques like"},{"type":"text","text":" "},{"type":"text","text":"looking up information at runtime"},{"type":"text","text":" "},{"type":"text","text":"and adding a layer of indirection."},{"type":"text","text":" "},{"type":"text","text":"Marking a structure or enumeration as frozen"},{"type":"text","text":" "},{"type":"text","text":"gives up this flexibility to gain performance:"},{"type":"text","text":" "},{"type":"text","text":"Future versions of the library can make only limited changes to the type,"},{"type":"text","text":" "},{"type":"text","text":"but the compiler can make additional optimizations"},{"type":"text","text":" "},{"type":"text","text":"in code that interacts with the type’s members."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Frozen types,"},{"type":"text","text":" "},{"type":"text","text":"the types of the stored properties of frozen structures,"},{"type":"text","text":" "},{"type":"text","text":"and the associated values of frozen enumeration cases"},{"type":"text","text":" "},{"type":"text","text":"must be public or marked with the "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"The properties of a frozen structure can’t have property observers,"},{"type":"text","text":" "},{"type":"text","text":"and expressions that provide the initial value for stored instance properties"},{"type":"text","text":" "},{"type":"text","text":"must follow the same restrictions as inlinable functions,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To enable library evolution mode on the command line,"},{"type":"text","text":" "},{"type":"text","text":"pass the "},{"type":"codeVoice","code":"-enable-library-evolution"},{"type":"text","text":" option to the Swift compiler."},{"type":"text","text":" "},{"type":"text","text":"To enable it in Xcode,"},{"type":"text","text":" "},{"type":"text","text":"set the “Build Libraries for Distribution” build setting"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"BUILD_LIBRARY_FOR_DISTRIBUTION"},{"type":"text","text":") to Yes,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A switch statement over a frozen enumeration doesn’t require a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"text","text":"doc:Statements#Switching-Over-Future-Enumeration-Cases"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Including a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@unknown default"},{"type":"text","text":" case"},{"type":"text","text":" "},{"type":"text","text":"when switching over a frozen enumeration"},{"type":"text","text":" "},{"type":"text","text":"produces a warning because that code is never executed."}]},{"anchor":"GKInspectable","level":3,"type":"heading","text":"GKInspectable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to expose a custom GameplayKit component property"},{"type":"text","text":" "},{"type":"text","text":"to the SpriteKit editor UI."},{"type":"text","text":" "},{"type":"text","text":"Applying this attribute also implies the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"anchor":"inlinable","level":3,"type":"heading","text":"inlinable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"type":"text","text":" "},{"type":"text","text":"function, method, computed property, subscript,"},{"type":"text","text":" "},{"type":"text","text":"convenience initializer, or deinitializer declaration"},{"type":"text","text":" "},{"type":"text","text":"to expose that declaration’s implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of the module’s public interface."},{"type":"text","text":" "},{"type":"text","text":"The compiler is allowed to replace calls to an inlinable symbol"},{"type":"text","text":" "},{"type":"text","text":"with a copy of the symbol’s implementation at the call site."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inlinable code"},{"type":"text","text":" "},{"type":"text","text":"can interact with "},{"type":"codeVoice","code":"public"},{"type":"text","text":" symbols declared in any module,"},{"type":"text","text":" "},{"type":"text","text":"and it can interact with "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" symbols"},{"type":"text","text":" "},{"type":"text","text":"declared in the same module"},{"type":"text","text":" "},{"type":"text","text":"that are marked with the "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"Inlinable code can’t interact with "},{"type":"codeVoice","code":"private"},{"type":"text","text":" or "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" symbols."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This attribute can’t be applied"},{"type":"text","text":" "},{"type":"text","text":"to declarations that are nested inside functions"},{"type":"text","text":" "},{"type":"text","text":"or to "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" or "},{"type":"codeVoice","code":"private"},{"type":"text","text":" declarations."},{"type":"text","text":" "},{"type":"text","text":"Functions and closures that are defined inside an inlinable function"},{"type":"text","text":" "},{"type":"text","text":"are implicitly inlinable,"},{"type":"text","text":" "},{"type":"text","text":"even though they can’t be marked with this attribute."}]},{"anchor":"main","level":3,"type":"heading","text":"main"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a structure, class, or enumeration declaration"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it contains the top-level entry point for program flow."},{"type":"text","text":" "},{"type":"text","text":"The type must provide a "},{"type":"codeVoice","code":"main"},{"type":"text","text":" type function"},{"type":"text","text":" "},{"type":"text","text":"that doesn’t take any arguments and returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyTopLevel {","    static func main() {","        \/\/ Top-level code goes here","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another way to describe the requirements of the "},{"type":"codeVoice","code":"main"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"is that the type you write this attribute on"},{"type":"text","text":" "},{"type":"text","text":"must satisfy the same requirements"},{"type":"text","text":" "},{"type":"text","text":"as types that conform to the following hypothetical protocol:"}]},{"type":"codeListing","syntax":"swift","code":["protocol ProvidesMain {","    static func main() throws","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift code you compile to make an executable"},{"type":"text","text":" "},{"type":"text","text":"can contain at most one top-level entry point,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code"},{"type":"text","text":"."}]},{"anchor":"nonobjc","level":3,"type":"heading","text":"nonobjc"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"type":"text","text":" "},{"type":"text","text":"method, property, subscript, or initializer declaration"},{"type":"text","text":" "},{"type":"text","text":"to suppress an implicit "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute tells the compiler"},{"type":"text","text":" "},{"type":"text","text":"to make the declaration unavailable in Objective-C code,"},{"type":"text","text":" "},{"type":"text","text":"even though it’s possible to represent it in Objective-C."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying this attribute to an extension"},{"type":"text","text":" "},{"type":"text","text":"has the same effect as"},{"type":"text","text":" "},{"type":"text","text":"applying it to every member of that extension"},{"type":"text","text":" "},{"type":"text","text":"that isn’t explicitly marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute to resolve circularity"},{"type":"text","text":" "},{"type":"text","text":"for bridging methods in a class marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"and to allow overloading of methods and initializers"},{"type":"text","text":" "},{"type":"text","text":"in a class marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"can’t override a method marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"However, a method marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"can override a method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"Similarly, a method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"can’t satisfy a protocol requirement"},{"type":"text","text":" "},{"type":"text","text":"for a method marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"anchor":"NSApplicationMain","level":3,"type":"heading","text":"NSApplicationMain"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it’s the application delegate."},{"type":"text","text":" "},{"type":"text","text":"Using this attribute is equivalent to calling the"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSApplicationMain(_:_:)"},{"type":"text","text":" function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t use this attribute,"},{"type":"text","text":" "},{"type":"text","text":"supply a "},{"type":"codeVoice","code":"main.swift"},{"type":"text","text":" file with code at the top level"},{"type":"text","text":" "},{"type":"text","text":"that calls the "},{"type":"codeVoice","code":"NSApplicationMain(_:_:)"},{"type":"text","text":" function as follows:"}]},{"type":"codeListing","syntax":"swift","code":["import AppKit","NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift code you compile to make an executable"},{"type":"text","text":" "},{"type":"text","text":"can contain at most one top-level entry point,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code"},{"type":"text","text":"."}]},{"anchor":"NSCopying","level":3,"type":"heading","text":"NSCopying"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a stored variable property of a class."},{"type":"text","text":" "},{"type":"text","text":"This attribute causes the property’s setter to be synthesized with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"copy"}]},{"type":"text","text":" "},{"type":"text","text":"of the property’s value—returned by the "},{"type":"codeVoice","code":"copyWithZone(_:)"},{"type":"text","text":" method—instead of the"},{"type":"text","text":" "},{"type":"text","text":"value of the property itself."},{"type":"text","text":" "},{"type":"text","text":"The type of the property must conform to the "},{"type":"codeVoice","code":"NSCopying"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NSCopying"},{"type":"text","text":" attribute behaves in a way similar to the Objective-C "},{"type":"codeVoice","code":"copy"},{"type":"text","text":" "},{"type":"text","text":"property attribute."}]},{"anchor":"NSManaged","level":3,"type":"heading","text":"NSManaged"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to an instance method or stored variable property"},{"type":"text","text":" "},{"type":"text","text":"of a class that inherits from "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":" "},{"type":"text","text":"to indicate that Core Data dynamically provides its implementation at runtime,"},{"type":"text","text":" "},{"type":"text","text":"based on the associated entity description."},{"type":"text","text":" "},{"type":"text","text":"For a property marked with the "},{"type":"codeVoice","code":"NSManaged"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"Core Data also provides the storage at runtime."},{"type":"text","text":" "},{"type":"text","text":"Applying this attribute also implies the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"anchor":"objc","level":3,"type":"heading","text":"objc"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to any declaration that can be represented in Objective-C—"},{"type":"text","text":" "},{"type":"text","text":"for example, nonnested classes, protocols,"},{"type":"text","text":" "},{"type":"text","text":"nongeneric enumerations (constrained to integer raw-value types),"},{"type":"text","text":" "},{"type":"text","text":"properties and methods (including getters and setters) of classes,"},{"type":"text","text":" "},{"type":"text","text":"protocols and optional members of a protocol,"},{"type":"text","text":" "},{"type":"text","text":"initializers, and subscripts."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute tells the compiler"},{"type":"text","text":" "},{"type":"text","text":"that a declaration is available to use in Objective-C code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying this attribute to an extension"},{"type":"text","text":" "},{"type":"text","text":"has the same effect as"},{"type":"text","text":" "},{"type":"text","text":"applying it to every member of that extension"},{"type":"text","text":" "},{"type":"text","text":"that isn’t explicitly marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler implicitly adds the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to subclasses of any class defined in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"However, the subclass must not be generic,"},{"type":"text","text":" "},{"type":"text","text":"and must not inherit from any generic classes."},{"type":"text","text":" "},{"type":"text","text":"You can explicitly add the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to a subclass that meets these criteria,"},{"type":"text","text":" "},{"type":"text","text":"to specify its Objective-C name as discussed below."},{"type":"text","text":" "},{"type":"text","text":"Protocols that are marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute can’t inherit"},{"type":"text","text":" "},{"type":"text","text":"from protocols that aren’t marked with this attribute."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute is also implicitly added in the following cases:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration is an override in a subclass,"},{"type":"text","text":" "},{"type":"text","text":"and the superclass’s declaration has the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration satisfies a requirement"},{"type":"text","text":" "},{"type":"text","text":"from a protocol that has the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration has the "},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"IBDesignable"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBInspectable"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"NSManaged"},{"type":"text","text":", or "},{"type":"codeVoice","code":"GKInspectable"},{"type":"text","text":" attribute."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you apply the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute to an enumeration,"},{"type":"text","text":" "},{"type":"text","text":"each enumeration case is exposed to Objective-C code"},{"type":"text","text":" "},{"type":"text","text":"as the concatenation of the enumeration name and the case name."},{"type":"text","text":" "},{"type":"text","text":"The first letter of the case name is capitalized."},{"type":"text","text":" "},{"type":"text","text":"For example, a case named "},{"type":"codeVoice","code":"venus"},{"type":"text","text":" in a Swift "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" enumeration"},{"type":"text","text":" "},{"type":"text","text":"is exposed to Objective-C code as a case named "},{"type":"codeVoice","code":"PlanetVenus"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute optionally accepts a single attribute argument,"},{"type":"text","text":" "},{"type":"text","text":"which consists of an identifier."},{"type":"text","text":" "},{"type":"text","text":"The identifier specifies the name to be exposed to Objective-C"},{"type":"text","text":" "},{"type":"text","text":"for the entity that the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute applies to."},{"type":"text","text":" "},{"type":"text","text":"You can use this argument to name"},{"type":"text","text":" "},{"type":"text","text":"classes, enumerations, enumeration cases, protocols,"},{"type":"text","text":" "},{"type":"text","text":"methods, getters, setters, and initializers."},{"type":"text","text":" "},{"type":"text","text":"If you specify the Objective-C name"},{"type":"text","text":" "},{"type":"text","text":"for a class, protocol, or enumeration,"},{"type":"text","text":" "},{"type":"text","text":"include a three-letter prefix on the name,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The example below exposes"},{"type":"text","text":" "},{"type":"text","text":"the getter for the "},{"type":"codeVoice","code":"enabled"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"ExampleClass"},{"type":"text","text":" "},{"type":"text","text":"to Objective-C code as "},{"type":"codeVoice","code":"isEnabled"},{"type":"text","text":" "},{"type":"text","text":"rather than just as the name of the property itself."}]},{"type":"codeListing","syntax":"swift","code":["class ExampleClass: NSObject {","   @objc var enabled: Bool {","      @objc(isEnabled) get {","         \/\/ Return the appropriate value","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The argument to the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"can also change the runtime name for that declaration."},{"type":"text","text":" "},{"type":"text","text":"You use the runtime name when calling functions"},{"type":"text","text":" "},{"type":"text","text":"that interact with the Objective-C runtime,"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and when specifying class names in an app’s Info.plist file."},{"type":"text","text":" "},{"type":"text","text":"If you specify a name by passing an argument,"},{"type":"text","text":" "},{"type":"text","text":"that name is used as the name in Objective-C code"},{"type":"text","text":" "},{"type":"text","text":"and as the runtime name."},{"type":"text","text":" "},{"type":"text","text":"If you omit the argument,"},{"type":"text","text":" "},{"type":"text","text":"the name used in Objective-C code matches the name in Swift code,"},{"type":"text","text":" "},{"type":"text","text":"and the runtime name follows the normal Swift compiler convention"},{"type":"text","text":" "},{"type":"text","text":"of name mangling."}]}],"type":"aside","name":"Note"},{"anchor":"objcMembers","level":3,"type":"heading","text":"objcMembers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class declaration,"},{"type":"text","text":" "},{"type":"text","text":"to implicitly apply the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to all Objective-C compatible members of the class,"},{"type":"text","text":" "},{"type":"text","text":"its extensions, its subclasses, and all of the extensions of its subclasses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most code should use the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute instead,"},{"type":"text","text":" "},{"type":"text","text":"to expose only the declarations that are needed."},{"type":"text","text":" "},{"type":"text","text":"If you need to expose many declarations,"},{"type":"text","text":" "},{"type":"text","text":"you can group them in an extension that has the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"objcMembers"},{"type":"text","text":" attribute is a convenience for"},{"type":"text","text":" "},{"type":"text","text":"libraries that make heavy use of"},{"type":"text","text":" "},{"type":"text","text":"the introspection facilities of the Objective-C runtime."},{"type":"text","text":" "},{"type":"text","text":"Applying the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute when it isn’t needed"},{"type":"text","text":" "},{"type":"text","text":"can increase your binary size and adversely affect performance."}]},{"anchor":"propertyWrapper","level":3,"type":"heading","text":"propertyWrapper"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, or enumeration declaration"},{"type":"text","text":" "},{"type":"text","text":"to use that type as a property wrapper."},{"type":"text","text":" "},{"type":"text","text":"When you apply this attribute to a type,"},{"type":"text","text":" "},{"type":"text","text":"you create a custom attribute with the same name as the type."},{"type":"text","text":" "},{"type":"text","text":"Apply that new attribute to a property of a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to wrap access to the property through an instance of the wrapper type;"},{"type":"text","text":" "},{"type":"text","text":"apply the attribute to a local stored variable declaration"},{"type":"text","text":" "},{"type":"text","text":"to wrap access to the variable the same way."},{"type":"text","text":" "},{"type":"text","text":"Computed variables, global variables, and constants can’t use property wrappers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The wrapper must define a "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" instance property."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"wrapped value"}]},{"type":"text","text":" of the property"},{"type":"text","text":" "},{"type":"text","text":"is the value that the getter and setter for this property expose."},{"type":"text","text":" "},{"type":"text","text":"In most cases, "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" is a computed value,"},{"type":"text","text":" "},{"type":"text","text":"but it can be a stored value instead."},{"type":"text","text":" "},{"type":"text","text":"The wrapper defines and manages"},{"type":"text","text":" "},{"type":"text","text":"any underlying storage needed by its wrapped value."},{"type":"text","text":" "},{"type":"text","text":"The compiler synthesizes storage for the instance of the wrapper type"},{"type":"text","text":" "},{"type":"text","text":"by prefixing the name of the wrapped property with an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") —"},{"type":"text","text":" "},{"type":"text","text":"for example, the wrapper for "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is stored as "},{"type":"codeVoice","code":"_someProperty"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The synthesized storage for the wrapper has an access control level of "},{"type":"codeVoice","code":"private"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property that has a property wrapper"},{"type":"text","text":" "},{"type":"text","text":"can include "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" blocks,"},{"type":"text","text":" "},{"type":"text","text":"but it can’t override the compiler-synthesized "},{"type":"codeVoice","code":"get"},{"type":"text","text":" or "},{"type":"codeVoice","code":"set"},{"type":"text","text":" blocks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides two forms of syntactic sugar"},{"type":"text","text":" "},{"type":"text","text":"for initialization of a property wrapper."},{"type":"text","text":" "},{"type":"text","text":"You can use assignment syntax in the definition of a wrapped value"},{"type":"text","text":" "},{"type":"text","text":"to pass the expression on the right-hand side of the assignment"},{"type":"text","text":" "},{"type":"text","text":"as the argument to the "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"of the property wrapper’s initializer."},{"type":"text","text":" "},{"type":"text","text":"You can also provide arguments to the attribute"},{"type":"text","text":" "},{"type":"text","text":"when you apply it to a property,"},{"type":"text","text":" "},{"type":"text","text":"and those arguments are passed to the property wrapper’s initializer."},{"type":"text","text":" "},{"type":"text","text":"For example, in the code below,"},{"type":"text","text":" "},{"type":"codeVoice","code":"SomeStruct"},{"type":"text","text":" calls each of the initializers that "},{"type":"codeVoice","code":"SomeWrapper"},{"type":"text","text":" defines."}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct SomeWrapper {","    var wrappedValue: Int","    var someValue: Double","    init() {","        self.wrappedValue = 100","        self.someValue = 12.3","    }","    init(wrappedValue: Int) {","        self.wrappedValue = wrappedValue","        self.someValue = 45.6","    }","    init(wrappedValue value: Int, custom: Double) {","        self.wrappedValue = value","        self.someValue = custom","    }","}","","struct SomeStruct {","    \/\/ Uses init()","    @SomeWrapper var a: Int","","    \/\/ Uses init(wrappedValue:)","    @SomeWrapper var b = 10","","    \/\/ Both use init(wrappedValue:custom:)","    @SomeWrapper(custom: 98.7) var c = 30","    @SomeWrapper(wrappedValue: 30, custom: 98.7) var d","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"projected value"}]},{"type":"text","text":" for a wrapped property is a second value"},{"type":"text","text":" "},{"type":"text","text":"that a property wrapper can use to expose additional functionality."},{"type":"text","text":" "},{"type":"text","text":"The author of a property wrapper type"},{"type":"text","text":" "},{"type":"text","text":"is responsible for determining the meaning of its projected value"},{"type":"text","text":" "},{"type":"text","text":"and defining the interface that the projected value exposes."},{"type":"text","text":" "},{"type":"text","text":"To project a value from a property wrapper,"},{"type":"text","text":" "},{"type":"text","text":"define a "},{"type":"codeVoice","code":"projectedValue"},{"type":"text","text":" instance property on the wrapper type."},{"type":"text","text":" "},{"type":"text","text":"The compiler synthesizes an identifier for the projected value"},{"type":"text","text":" "},{"type":"text","text":"by prefixing the name of the wrapped property with a dollar sign ("},{"type":"codeVoice","code":"$"},{"type":"text","text":") —"},{"type":"text","text":" "},{"type":"text","text":"for example, the projected value for "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is "},{"type":"codeVoice","code":"$someProperty"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The projected value has the same access control level"},{"type":"text","text":" "},{"type":"text","text":"as the original wrapped property."}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct WrapperWithProjection {"," var wrappedValue: Int"," var projectedValue: SomeProjection {","     return SomeProjection(wrapper: self)"," }","}","struct SomeProjection {"," var wrapper: WrapperWithProjection","}","","struct SomeStruct {","    @WrapperWithProjection var x = 123","}","let s = SomeStruct()","s.x           \/\/ Int value","s.$x          \/\/ SomeProjection value","s.$x.wrapper  \/\/ WrapperWithProjection value"]},{"anchor":"resultBuilder","level":3,"type":"heading","text":"resultBuilder"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration"},{"type":"text","text":" "},{"type":"text","text":"to use that type as a result builder."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"result builder"}]},{"type":"text","text":" is a type"},{"type":"text","text":" "},{"type":"text","text":"that builds a nested data structure step by step."},{"type":"text","text":" "},{"type":"text","text":"You use result builders to implement a domain-specific language (DSL)"},{"type":"text","text":" "},{"type":"text","text":"for creating nested data structures in a natural, declarative way."},{"type":"text","text":" "},{"type":"text","text":"For an example of how to use the "},{"type":"codeVoice","code":"resultBuilder"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders"},{"type":"text","text":"."}]},{"anchor":"Result-Building-Methods","level":4,"type":"heading","text":"Result-Building Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A result builder implements static methods described below."},{"type":"text","text":" "},{"type":"text","text":"Because all of the result builder’s functionality"},{"type":"text","text":" "},{"type":"text","text":"is exposed through static methods,"},{"type":"text","text":" "},{"type":"text","text":"you don’t ever initialize an instance of that type."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":" method is required;"},{"type":"text","text":" "},{"type":"text","text":"the other methods —"},{"type":"text","text":" "},{"type":"text","text":"which enable additional functionality in the DSL —"},{"type":"text","text":" "},{"type":"text","text":"are optional."},{"type":"text","text":" "},{"type":"text","text":"The declaration of a result builder type"},{"type":"text","text":" "},{"type":"text","text":"doesn’t actually have to include any protocol conformance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The description of the static methods uses three types as placeholders."},{"type":"text","text":" "},{"type":"text","text":"The type "},{"type":"codeVoice","code":"Expression"},{"type":"text","text":" is a placeholder"},{"type":"text","text":" "},{"type":"text","text":"for the type of the result builder’s input,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" is a placeholder for the type of a partial result,"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"FinalResult"},{"type":"text","text":" is a placeholder"},{"type":"text","text":" "},{"type":"text","text":"for the type of the result that the result builder produces."},{"type":"text","text":" "},{"type":"text","text":"You replace these types with the actual types that your result builder uses."},{"type":"text","text":" "},{"type":"text","text":"If your result-building methods"},{"type":"text","text":" "},{"type":"text","text":"don’t specify a type for "},{"type":"codeVoice","code":"Expression"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FinalResult"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"they default to being the same as "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The result-building methods are as follows:"}]},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Combines an array of partial results into a single partial result. A result builder must implement this method."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildBlock(_ components: Component...) -> Component"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result from a partial result that can be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Implement this method to support "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements that don’t include an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildOptional(_ component: Component?) -> Component"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result whose value varies depending on some condition. Implement both this method and "},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":" to support "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements and "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements that include an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildEither(first: Component) -> Component"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result whose value varies depending on some condition. Implement both this method and "},{"type":"codeVoice","code":"buildEither(first:)"},{"type":"text","text":" to support "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements and "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements that include an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildEither(second: Component) -> Component"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result from an array of partial results. Implement this method to support "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loops."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildArray(_ components: [Component]) -> Component"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result from an expression. You can implement this method to perform preprocessing — for example, converting expressions to an internal type — or to provide additional information for type inference at use sites."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildExpression(_ expression: Expression) -> Component"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a final result from a partial result. You can implement this method as part of a result builder that uses a different type for partial and final results, or to perform other postprocessing on a result before returning it."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildFinalResult(_ component: Component) -> FinalResult"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result that propagates or erases type information outside a compiler-control statement that performs an availability check. You can use this to erase type information that varies between the conditional branches."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildLimitedAvailability(_ component: Component) -> Component"}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the code below defines a simple result builder"},{"type":"text","text":" "},{"type":"text","text":"that builds an array of integers."},{"type":"text","text":" "},{"type":"text","text":"This code defines "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Expression"},{"type":"text","text":" as type aliases,"},{"type":"text","text":" "},{"type":"text","text":"to make it easier to match the examples below to the list of methods above."}]},{"type":"codeListing","syntax":"swift","code":["@resultBuilder","struct ArrayBuilder {","    typealias Component = [Int]","    typealias Expression = Int","    static func buildExpression(_ element: Expression) -> Component {","        return [element]","    }","    static func buildOptional(_ component: Component?) -> Component {","        guard let component = component else { return [] }","        return component","    }","    static func buildEither(first component: Component) -> Component {","        return component","    }","    static func buildEither(second component: Component) -> Component {","        return component","    }","    static func buildArray(_ components: [Component]) -> Component {","        return Array(components.joined())","    }","    static func buildBlock(_ components: Component...) -> Component {","        return Array(components.joined())","    }","}"]},{"anchor":"Result-Transformations","level":4,"type":"heading","text":"Result Transformations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following syntactic transformations are applied recursively"},{"type":"text","text":" "},{"type":"text","text":"to turn code that uses result-builder syntax"},{"type":"text","text":" "},{"type":"text","text":"into code that calls the static methods of the result builder type:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the result builder has a "},{"type":"codeVoice","code":"buildExpression(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"each expression becomes a call to that method."},{"type":"text","text":" "},{"type":"text","text":"This transformation is always first."},{"type":"text","text":" "},{"type":"text","text":"For example, the following declarations are equivalent:"}]},{"type":"codeListing","syntax":"swift","code":["@ArrayBuilder var builderNumber: [Int] { 10 }","var manualNumber = ArrayBuilder.buildExpression(10)"]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although the transformation behavior is described in terms of temporary variables,"},{"type":"text","text":" "},{"type":"text","text":"using a result builder doesn’t actually create any new declarations"},{"type":"text","text":" "},{"type":"text","text":"that are visible from the rest of your code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t use"},{"type":"text","text":" "},{"type":"codeVoice","code":"break"},{"type":"text","text":", "},{"type":"codeVoice","code":"continue"},{"type":"text","text":", "},{"type":"codeVoice","code":"defer"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", or "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"in the code that a result builder transforms."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The transformation process doesn’t change declarations in the code,"},{"type":"text","text":" "},{"type":"text","text":"which lets you use temporary constants and variables"},{"type":"text","text":" "},{"type":"text","text":"to build up expressions piece by piece."},{"type":"text","text":" "},{"type":"text","text":"It also doesn’t change"},{"type":"text","text":" "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"type":"text","text":"compile-time diagnostic statements,"},{"type":"text","text":" "},{"type":"text","text":"or closures that contain a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever possible, transformations are coalesced."},{"type":"text","text":" "},{"type":"text","text":"For example, the expression "},{"type":"codeVoice","code":"4 + 5 * 6"},{"type":"text","text":" becomes"},{"type":"text","text":" "},{"type":"codeVoice","code":"buildExpression(4 + 5 * 6)"},{"type":"text","text":" rather multiple calls to that function."},{"type":"text","text":" "},{"type":"text","text":"Likewise, nested branch statements become"},{"type":"text","text":" "},{"type":"text","text":"a single binary tree of calls to the "},{"type":"codeVoice","code":"buildEither"},{"type":"text","text":" methods."}]},{"anchor":"Custom-Result-Builder-Attributes","level":4,"type":"heading","text":"Custom Result-Builder Attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a result builder type creates a custom attribute with the same name."},{"type":"text","text":" "},{"type":"text","text":"You can apply that attribute in the following places:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a function declaration,"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of the function."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a variable or subscript declaration that includes a getter,"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of the getter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a parameter in a function declaration,"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of a closure"},{"type":"text","text":" "},{"type":"text","text":"that’s passed as the corresponding argument."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying a result builder attribute doesn’t impact ABI compatibility."},{"type":"text","text":" "},{"type":"text","text":"Applying a result builder attribute to a parameter"},{"type":"text","text":" "},{"type":"text","text":"makes that attribute part of the function’s interface,"},{"type":"text","text":" "},{"type":"text","text":"which can effect source compatibility."}]},{"anchor":"requiresstoredpropertyinits","level":3,"type":"heading","text":"requires_stored_property_inits"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class declaration"},{"type":"text","text":" "},{"type":"text","text":"to require all stored properties within the class"},{"type":"text","text":" "},{"type":"text","text":"to provide default values as part of their definitions."},{"type":"text","text":" "},{"type":"text","text":"This attribute is inferred for any class"},{"type":"text","text":" "},{"type":"text","text":"that inherits from "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":"."}]},{"anchor":"testable","level":3,"type":"heading","text":"testable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to an "},{"type":"codeVoice","code":"import"},{"type":"text","text":" declaration"},{"type":"text","text":" "},{"type":"text","text":"to import that module with changes to its access control"},{"type":"text","text":" "},{"type":"text","text":"that simplify testing the module’s code."},{"type":"text","text":" "},{"type":"text","text":"Entities in the imported module"},{"type":"text","text":" "},{"type":"text","text":"that are marked with the "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" access-level modifier"},{"type":"text","text":" "},{"type":"text","text":"are imported as if they were declared with the "},{"type":"codeVoice","code":"public"},{"type":"text","text":" access-level modifier."},{"type":"text","text":" "},{"type":"text","text":"Classes and class members"},{"type":"text","text":" "},{"type":"text","text":"that are marked with the "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" or "},{"type":"codeVoice","code":"public"},{"type":"text","text":" access-level modifier"},{"type":"text","text":" "},{"type":"text","text":"are imported as if they were declared with the "},{"type":"codeVoice","code":"open"},{"type":"text","text":" access-level modifier."},{"type":"text","text":" "},{"type":"text","text":"The imported module must be compiled with testing enabled."}]},{"anchor":"UIApplicationMain","level":3,"type":"heading","text":"UIApplicationMain"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it’s the application delegate."},{"type":"text","text":" "},{"type":"text","text":"Using this attribute is equivalent to calling the"},{"type":"text","text":" "},{"type":"codeVoice","code":"UIApplicationMain"},{"type":"text","text":" function and"},{"type":"text","text":" "},{"type":"text","text":"passing this class’s name as the name of the delegate class."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t use this attribute,"},{"type":"text","text":" "},{"type":"text","text":"supply a "},{"type":"codeVoice","code":"main.swift"},{"type":"text","text":" file with code at the top level"},{"type":"text","text":" "},{"type":"text","text":"that calls the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"if your app uses a custom subclass of "},{"type":"codeVoice","code":"UIApplication"},{"type":"text","text":" "},{"type":"text","text":"as its principal class,"},{"type":"text","text":" "},{"type":"text","text":"call the "},{"type":"codeVoice","code":"UIApplicationMain(_:_:_:_:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"instead of using this attribute."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift code you compile to make an executable"},{"type":"text","text":" "},{"type":"text","text":"can contain at most one top-level entry point,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code"},{"type":"text","text":"."}]},{"anchor":"unchecked","level":3,"type":"heading","text":"unchecked"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aplique esse atributo a um tipo de protocolo"},{"type":"text","text":" "},{"type":"text","text":"como parte da lista de protocolos adotados de uma declaração de tipo"},{"type":"text","text":" "},{"type":"text","text":"para desativar a execução dos requisitos desse protocolo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O único protocolo suportado é "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},{"type":"text","text":"."}]},{"anchor":"usableFromInline","level":3,"type":"heading","text":"usableFromInline"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"type":"text","text":" "},{"type":"text","text":"function, method, computed property, subscript,"},{"type":"text","text":" "},{"type":"text","text":"initializer, or deinitializer declaration"},{"type":"text","text":" "},{"type":"text","text":"to allow that symbol to be used in inlinable code"},{"type":"text","text":" "},{"type":"text","text":"that’s defined in the same module as the declaration."},{"type":"text","text":" "},{"type":"text","text":"The declaration must have the "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" access-level modifier."},{"type":"text","text":" "},{"type":"text","text":"A structure or class marked "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" "},{"type":"text","text":"can use only types that are public or "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" for its properties."},{"type":"text","text":" "},{"type":"text","text":"An enumeration marked "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" "},{"type":"text","text":"can use only types that are public or "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" "},{"type":"text","text":"for the raw values and associated values of its cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the "},{"type":"codeVoice","code":"public"},{"type":"text","text":" access-level modifier,"},{"type":"text","text":" "},{"type":"text","text":"this attribute"},{"type":"text","text":" "},{"type":"text","text":"exposes the declaration as part of the module’s public interface."},{"type":"text","text":" "},{"type":"text","text":"Unlike "},{"type":"codeVoice","code":"public"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the compiler doesn’t allow declarations marked with "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" "},{"type":"text","text":"to be referenced by name in code outside the module,"},{"type":"text","text":" "},{"type":"text","text":"even though the declaration’s symbol is exported."},{"type":"text","text":" "},{"type":"text","text":"However, code outside the module might still be able"},{"type":"text","text":" "},{"type":"text","text":"to interact with the declaration’s symbol by using runtime behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Declarations marked with the "},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"are implicitly usable from inlinable code."},{"type":"text","text":" "},{"type":"text","text":"Although either "},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" or "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" "},{"type":"text","text":"can be applied to "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" declarations,"},{"type":"text","text":" "},{"type":"text","text":"applying both attributes is an error."}]},{"anchor":"warnunqualifiedaccess","level":3,"type":"heading","text":"warn_unqualified_access"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"type":"text","text":" "},{"type":"text","text":"top-level function, instance method, or class or static method"},{"type":"text","text":" "},{"type":"text","text":"to trigger warnings when that function or method is used"},{"type":"text","text":" "},{"type":"text","text":"without a preceding qualifier,"},{"type":"text","text":" "},{"type":"text","text":"such as a module name, type name, or instance variable or constant."},{"type":"text","text":" "},{"type":"text","text":"Use this attribute to help discourage ambiguity between functions"},{"type":"text","text":" "},{"type":"text","text":"with the same name that are accessible from the same scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the Swift standard library includes both a top-level"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/"},{"type":"text","text":" "},{"type":"text","text":"function and a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min"},{"type":"text","text":" "},{"type":"text","text":"method for sequences with comparable elements."},{"type":"text","text":" "},{"type":"text","text":"The sequence method is declared with the "},{"type":"codeVoice","code":"warn_unqualified_access"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to help reduce confusion"},{"type":"text","text":" "},{"type":"text","text":"when attempting to use one or the other from within a "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" extension."}]},{"anchor":"Declaration-Attributes-Used-by-Interface-Builder","level":3,"type":"heading","text":"Declaration Attributes Used by Interface Builder"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Interface Builder attributes are declaration attributes"},{"type":"text","text":" "},{"type":"text","text":"used by Interface Builder to synchronize with Xcode."},{"type":"text","text":" "},{"type":"text","text":"Swift provides the following Interface Builder attributes:"},{"type":"text","text":" "},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"IBDesignable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"IBInspectable"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These attributes are conceptually the same as their"},{"type":"text","text":" "},{"type":"text","text":"Objective-C counterparts."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You apply the "},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"IBInspectable"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to property declarations of a class."},{"type":"text","text":" "},{"type":"text","text":"You apply the "},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":" and "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to method declarations of a class"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"IBDesignable"},{"type":"text","text":" attribute to class declarations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"IBDesignable"},{"type":"text","text":", or "},{"type":"codeVoice","code":"IBInspectable"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"also implies the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"anchor":"Type-Attributes","level":2,"type":"heading","text":"Type Attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply type attributes to types only."}]},{"anchor":"autoclosure","level":3,"type":"heading","text":"autoclosure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to delay the evaluation of an expression"},{"type":"text","text":" "},{"type":"text","text":"by automatically wrapping that expression in a closure with no arguments."},{"type":"text","text":" "},{"type":"text","text":"You apply it to a parameter’s type in a function or method declaration,"},{"type":"text","text":" "},{"type":"text","text":"for a parameter whose type is a function type that takes no arguments"},{"type":"text","text":" "},{"type":"text","text":"and that returns a value of the type of the expression."},{"type":"text","text":" "},{"type":"text","text":"For an example of how to use the "},{"type":"codeVoice","code":"autoclosure"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"type":"text","text":"."}]},{"anchor":"convention","level":3,"type":"heading","text":"convention"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to the type of a function"},{"type":"text","text":" "},{"type":"text","text":"to indicate its calling conventions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"convention"},{"type":"text","text":" attribute always appears with"},{"type":"text","text":" "},{"type":"text","text":"one of the following arguments:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swift"},{"type":"text","text":" argument indicates a Swift function reference."},{"type":"text","text":" "},{"type":"text","text":"This is the standard calling convention for function values in Swift."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"block"},{"type":"text","text":" argument indicates an Objective-C compatible block reference."},{"type":"text","text":" "},{"type":"text","text":"The function value is represented as a reference to the block object,"},{"type":"text","text":" "},{"type":"text","text":"which is an "},{"type":"codeVoice","code":"id"},{"type":"text","text":"-compatible Objective-C object that embeds its invocation"},{"type":"text","text":" "},{"type":"text","text":"function within the object."},{"type":"text","text":" "},{"type":"text","text":"The invocation function uses the C calling convention."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"c"},{"type":"text","text":" argument indicates a C function reference."},{"type":"text","text":" "},{"type":"text","text":"The function value carries no context and uses the C calling convention."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With a few exceptions,"},{"type":"text","text":" "},{"type":"text","text":"a function of any calling convention can be used"},{"type":"text","text":" "},{"type":"text","text":"when a function any other calling convention is needed."},{"type":"text","text":" "},{"type":"text","text":"A nongeneric global function,"},{"type":"text","text":" "},{"type":"text","text":"a local function that doesn’t capture any local variables,"},{"type":"text","text":" "},{"type":"text","text":"or a closure that doesn’t capture any local variables"},{"type":"text","text":" "},{"type":"text","text":"can be converted to the C calling convention."},{"type":"text","text":" "},{"type":"text","text":"Other Swift functions can’t be converted to the C calling convention."},{"type":"text","text":" "},{"type":"text","text":"A function with the Objective-C block calling convention"},{"type":"text","text":" "},{"type":"text","text":"can’t be converted to the C calling convention."}]},{"anchor":"escaping","level":3,"type":"heading","text":"escaping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a parameter’s type in a function or method declaration"},{"type":"text","text":" "},{"type":"text","text":"to indicate that the parameter’s value can be stored for later execution."},{"type":"text","text":" "},{"type":"text","text":"This means that the value is allowed to outlive the lifetime of the call."},{"type":"text","text":" "},{"type":"text","text":"Function type parameters with the "},{"type":"codeVoice","code":"escaping"},{"type":"text","text":" type attribute"},{"type":"text","text":" "},{"type":"text","text":"require explicit use of "},{"type":"codeVoice","code":"self."},{"type":"text","text":" for properties or methods."},{"type":"text","text":" "},{"type":"text","text":"For an example of how to use the "},{"type":"codeVoice","code":"escaping"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures"},{"type":"text","text":"."}]},{"anchor":"Sendable","level":3,"type":"heading","text":"Sendable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to the type of a function"},{"type":"text","text":" "},{"type":"text","text":"to indicate that the function or closure is sendable."},{"type":"text","text":" "},{"type":"text","text":"Applying this attribute to a function type"},{"type":"text","text":" "},{"type":"text","text":"has the same meaning as conforming a non–function type"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"overridingTitleInlineContent":[{"type":"text","text":"Sendable"}],"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","overridingTitle":"Sendable"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This attribute is inferred on functions and closures"},{"type":"text","text":" "},{"type":"text","text":"if the function or closure is used in a context"},{"type":"text","text":" "},{"type":"text","text":"that expects a sendable value,"},{"type":"text","text":" "},{"type":"text","text":"and the function or closure satisfies the requirements to be sendable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sendable function type"},{"type":"text","text":" "},{"type":"text","text":"is a subtype of the corresponding nonsendable function type."}]},{"anchor":"Switch-Case-Attributes","level":2,"type":"heading","text":"Switch Case Attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply switch case attributes to switch cases only."}]},{"anchor":"unknown","level":3,"type":"heading","text":"unknown"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a switch case"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it isn’t expected to be matched"},{"type":"text","text":" "},{"type":"text","text":"by any case of the enumeration that’s known"},{"type":"text","text":" "},{"type":"text","text":"at the time the code is compiled."},{"type":"text","text":" "},{"type":"text","text":"For an example of how to use the "},{"type":"codeVoice","code":"unknown"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"text","text":"doc:Statements#Switching-Over-Future-Enumeration-Cases"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of an attribute","","attribute --> ``@`` attribute-name attribute-argument-clause-OPT","attribute-name --> identifier","attribute-argument-clause --> ``(`` balanced-tokens-OPT ``)``","attributes --> attribute attributes-OPT","","balanced-tokens --> balanced-token balanced-tokens-OPT","balanced-token --> ``(`` balanced-tokens-OPT ``)``","balanced-token --> ``[`` balanced-tokens-OPT ``]``","balanced-token --> ``{`` balanced-tokens-OPT ``}``","balanced-token --> Any identifier, keyword, literal, or operator","balanced-token --> Any punctuation except ``(``, ``)``, ``[``, ``]``, ``{``, or ``}``"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/attributes"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"There are two kinds of attributes in Swift —"},{"type":"text","text":" "},{"type":"text","text":"those that apply to declarations and those that apply to types."},{"type":"text","text":" "},{"type":"text","text":"An attribute provides additional information about the declaration or type."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"discardableResult"},{"type":"text","text":" attribute on a function declaration indicates that,"},{"type":"text","text":" "},{"type":"text","text":"although the function returns a value,"},{"type":"text","text":" "},{"type":"text","text":"the compiler shouldn’t generate a warning if the return value is unused."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Attributes","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Reference","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutTheLanguageReference","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"role":"article","title":"Declarations","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"declaration"}]},{"type":"text","text":" introduces a new name or construct into your program."},{"type":"text","text":" "},{"type":"text","text":"For example, you use declarations to introduce functions and methods,"},{"type":"text","text":" "},{"type":"text","text":"to introduce variables and constants,"},{"type":"text","text":" "},{"type":"text","text":"and to define enumeration, structure, class, and protocol types."},{"type":"text","text":" "},{"type":"text","text":"You can also use a declaration to extend the behavior"},{"type":"text","text":" "},{"type":"text","text":"of an existing named type and to import symbols into your program that are declared elsewhere."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Result-Builders":{"abstract":[],"title":"Result Builders","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Result-Builders"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Top-Level-Code":{"abstract":[],"title":"Top-Level Code","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","url":"\/documentation\/the-swift-programming-language\/declarations#Top-Level-Code"},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral/2294108-key":{"title":"Key","titleInlineContent":[{"type":"text","text":"Key"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"role":"article","title":"Tipos","abstract":[{"type":"text","text":"Em Swift, existem dois tipos de dados: tipos nomeados e tipos compostos."},{"type":"text","text":" "},{"type":"text","text":"Um "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipo nomeado"}]},{"type":"text","text":" é um tipo que pode receber um nome específico quando é definido."},{"type":"text","text":" "},{"type":"text","text":"Tipos nomeados incluem classes, structs, enums, e protocolos."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, instâncias de uma classe definida pelo usuário chamada "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":"  tem o tipo "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Além dos tipos nomeados definidos pelo usuário, a biblioteca padrão do Swift define muitos tipos nomeados que são usados com mais frequência, incluindo aqueles que representam arrays, dicionários, e valores opcionais."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/types"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210":{"title":"Programming with Objective-C","titleInlineContent":[{"type":"text","text":"Programming with Objective-C"}],"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"role":"article","title":"Statements","abstract":[{"type":"text","text":"In Swift, there are three kinds of statements: simple statements, compiler control statements,"},{"type":"text","text":" "},{"type":"text","text":"and control flow statements."},{"type":"text","text":" "},{"type":"text","text":"Simple statements are the most common and consist of either an expression or a declaration."},{"type":"text","text":" "},{"type":"text","text":"Compiler control statements allow the program to change aspects of the compiler’s behavior"},{"type":"text","text":" "},{"type":"text","text":"and include a conditional compilation block and a line control statement."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements"},"https://developer.apple.com/documentation/swift/expressiblebyarrayliteral":{"title":"ExpressibleByArrayLiteral","titleInlineContent":[{"type":"text","text":"ExpressibleByArrayLiteral"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"role":"article","title":"Patterns","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" represents the structure of a single value"},{"type":"text","text":" "},{"type":"text","text":"or a composite value."},{"type":"text","text":" "},{"type":"text","text":"For example, the structure of a tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" is a comma-separated list of two"},{"type":"text","text":" "},{"type":"text","text":"elements. Because patterns represent the structure of a value rather than any"},{"type":"text","text":" "},{"type":"text","text":"one particular value, you can match them with a variety of values."},{"type":"text","text":" "},{"type":"text","text":"For instance, the pattern "},{"type":"codeVoice","code":"(x, y)"},{"type":"text","text":" matches the tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" and any other"},{"type":"text","text":" "},{"type":"text","text":"two-element tuple. In addition to matching a pattern with a value,"},{"type":"text","text":" "},{"type":"text","text":"you can extract part or all of a composite value and bind each part"},{"type":"text","text":" "},{"type":"text","text":"to a constant or variable name."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns"},"https://developer.apple.com/documentation/swift/keypath":{"title":"KeyPath","titleInlineContent":[{"type":"text","text":"KeyPath"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","url":"https:\/\/developer.apple.com\/documentation\/swift\/keypath"},"https://developer.apple.com/documentation/swift/writablekeypath":{"title":"WritableKeyPath","titleInlineContent":[{"type":"text","text":"WritableKeyPath"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","url":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"role":"article","title":"Expressions","abstract":[{"type":"text","text":"In Swift, there are four kinds of expressions:"},{"type":"text","text":" "},{"type":"text","text":"prefix expressions, infix expressions, primary expressions, and postfix expressions."},{"type":"text","text":" "},{"type":"text","text":"Evaluating an expression returns a value,"},{"type":"text","text":" "},{"type":"text","text":"causes a side effect, or both."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions"},"https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain":{"title":"UIApplicationMain(::::)","titleInlineContent":[{"type":"text","text":"UIApplicationMain("},{"type":"emphasis","inlineContent":[{"type":"text","text":":"}]},{"type":"text","text":":"},{"type":"emphasis","inlineContent":[{"type":"text","text":":"}]},{"type":"text","text":":)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","url":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain"},"https://developer.apple.com/documentation/swift/expressiblebystringliteral":{"title":"ExpressibleByStringLiteral","titleInlineContent":[{"type":"text","text":"ExpressibleByStringLiteral"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral"},"https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_swift_into_objective-c":{"title":"Importing Swift into Objective-C","titleInlineContent":[{"type":"text","text":"Importing Swift into Objective-C"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","url":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c"},"https://developer.apple.com/documentation/foundation/1395135-nsclassfromstring":{"title":"NSClassFromString","titleInlineContent":[{"type":"text","text":"NSClassFromString"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","url":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring"},"https://developer.apple.com/documentation/swift/sendable":{"title":"Sendable","titleInlineContent":[{"type":"text","text":"Sendable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},"https://developer.apple.com/documentation/swift/referencewritablekeypath":{"title":"ReferenceWritableKeyPath","titleInlineContent":[{"type":"text","text":"ReferenceWritableKeyPath"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","url":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath"},"https://developer.apple.com/documentation/swift/sequence/1641174-min":{"title":"min()","titleInlineContent":[{"type":"text","text":"min()"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures":{"abstract":[],"title":"Autoclosures","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","url":"\/documentation\/the-swift-programming-language\/closures#Autoclosures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"role":"article","title":"Lexical Structure","abstract":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lexical structure"}]},{"type":"text","text":" of Swift describes what sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"form valid tokens of the language."},{"type":"text","text":" "},{"type":"text","text":"These valid tokens form the lowest-level building blocks of the language"},{"type":"text","text":" "},{"type":"text","text":"and are used to describe the rest of the language in subsequent chapters."},{"type":"text","text":" "},{"type":"text","text":"A token consists of an identifier, keyword, punctuation, literal, or operator."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure"},"https://help.apple.com/xcode/mac/current/#/dev04b3a04ba":{"title":"Xcode Help","titleInlineContent":[{"type":"text","text":"Xcode Help"}],"type":"link","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","url":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#inlinable":{"abstract":[],"title":"inlinable","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable","url":"\/documentation\/the-swift-programming-language\/attributes#inlinable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Escaping-Closures":{"abstract":[],"title":"Escaping Closures","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","url":"\/documentation\/the-swift-programming-language\/closures#Escaping-Closures"},"https://developer.apple.com/documentation/swift/keyvaluepairs":{"title":"KeyValuePairs","titleInlineContent":[{"type":"text","text":"KeyValuePairs"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","url":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs"},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral":{"title":"ExpressibleByDictionaryLiteral","titleInlineContent":[{"type":"text","text":"ExpressibleByDictionaryLiteral"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral","url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"role":"article","title":"Generic Parameters and Arguments","abstract":[{"type":"text","text":"This chapter describes parameters and arguments for generic types, functions, and"},{"type":"text","text":" "},{"type":"text","text":"initializers. When you declare a generic type, function, subscript, or initializer,"},{"type":"text","text":" "},{"type":"text","text":"you specify the type parameters that the generic type, function, or initializer"},{"type":"text","text":" "},{"type":"text","text":"can work with. These type parameters act as placeholders that"},{"type":"text","text":" "},{"type":"text","text":"are replaced by actual concrete type arguments when an instance of a generic type is"},{"type":"text","text":" "},{"type":"text","text":"created or a generic function or initializer is called."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments"},"https://developer.apple.com/documentation/swift/1538339-min/":{"title":"min(::)","titleInlineContent":[{"type":"text","text":"min("},{"type":"emphasis","inlineContent":[{"type":"text","text":":"}]},{"type":"text","text":":)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","url":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AboutTheLanguageReference":{"role":"article","title":"About the Language Reference","abstract":[{"type":"text","text":"This part of the book describes the formal grammar of the Swift programming language."},{"type":"text","text":" "},{"type":"text","text":"The grammar described here is intended to help you understand the language in more"},{"type":"text","text":" "},{"type":"text","text":"detail, rather than to allow you to directly implement a parser or compiler."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutTheLanguageReference","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/aboutthelanguagereference"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"abstract":[],"title":"Function Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","url":"\/documentation\/the-swift-programming-language\/types#Function-Type"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html#//apple_ref/doc/uid/TP40011210-CH10-SW1":{"title":"Conventions","titleInlineContent":[{"type":"text","text":"Conventions"}],"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1"}}}