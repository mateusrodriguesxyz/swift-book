{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are familiar with C,"},{"type":"text","text":" "},{"type":"text","text":"you will know that C enumerations assign related names to a set of integer values."},{"type":"text","text":" "},{"type":"text","text":"Enumerations in Swift are much more flexible,"},{"type":"text","text":" "},{"type":"text","text":"and don’t have to provide a value for each case of the enumeration."},{"type":"text","text":" "},{"type":"text","text":"If a value (known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"raw"}]},{"type":"text","text":" value) is provided for each enumeration case,"},{"type":"text","text":" "},{"type":"text","text":"the value can be a string, a character,"},{"type":"text","text":" "},{"type":"text","text":"or a value of any integer or floating-point type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, enumeration cases can specify"},{"type":"text","text":" "},{"type":"text","text":"associated values of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" type to be stored along with each different case value,"},{"type":"text","text":" "},{"type":"text","text":"much as unions or variants do in other languages."},{"type":"text","text":" "},{"type":"text","text":"You can define a common set of related cases as part of one enumeration,"},{"type":"text","text":" "},{"type":"text","text":"each of which has a different set of values of appropriate types associated with it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enumerations in Swift are first-class types in their own right."},{"type":"text","text":" "},{"type":"text","text":"They adopt many features traditionally supported only by classes,"},{"type":"text","text":" "},{"type":"text","text":"such as computed properties to provide additional information about"},{"type":"text","text":" "},{"type":"text","text":"the enumeration’s current value,"},{"type":"text","text":" "},{"type":"text","text":"and instance methods to provide functionality related to"},{"type":"text","text":" "},{"type":"text","text":"the values the enumeration represents."},{"type":"text","text":" "},{"type":"text","text":"Enumerations can also define initializers to provide an initial case value;"},{"type":"text","text":" "},{"type":"text","text":"can be extended to expand their functionality beyond their original implementation;"},{"type":"text","text":" "},{"type":"text","text":"and can conform to protocols to provide standard functionality."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about these capabilities, see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}]},{"anchor":"Enumeration-Syntax","level":2,"type":"heading","text":"Enumeration Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You introduce enumerations with the "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"and place their entire definition within a pair of braces:"}]},{"type":"codeListing","syntax":"swift","code":["enum SomeEnumeration {","   \/\/ enumeration definition goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example for the four main points of a compass:"}]},{"type":"codeListing","syntax":"swift","code":["enum CompassPoint {","   case north","   case south","   case east","   case west","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values defined in an enumeration"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"north"},{"type":"text","text":", "},{"type":"codeVoice","code":"south"},{"type":"text","text":", "},{"type":"codeVoice","code":"east"},{"type":"text","text":", and "},{"type":"codeVoice","code":"west"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration cases"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You use the "},{"type":"codeVoice","code":"case"},{"type":"text","text":" keyword to introduce new enumeration cases."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift enumeration cases don’t have an integer value set by default,"},{"type":"text","text":" "},{"type":"text","text":"unlike languages like C and Objective-C."},{"type":"text","text":" "},{"type":"text","text":"In the "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" example above,"},{"type":"text","text":" "},{"type":"codeVoice","code":"north"},{"type":"text","text":", "},{"type":"codeVoice","code":"south"},{"type":"text","text":", "},{"type":"codeVoice","code":"east"},{"type":"text","text":" and "},{"type":"codeVoice","code":"west"},{"type":"text","text":" "},{"type":"text","text":"don’t implicitly equal"},{"type":"text","text":" "},{"type":"codeVoice","code":"0"},{"type":"text","text":", "},{"type":"codeVoice","code":"1"},{"type":"text","text":", "},{"type":"codeVoice","code":"2"},{"type":"text","text":" and "},{"type":"codeVoice","code":"3"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Instead, the different enumeration cases are values in their own right,"},{"type":"text","text":" "},{"type":"text","text":"with an explicitly defined type of "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple cases can appear on a single line, separated by commas:"}]},{"type":"codeListing","syntax":"swift","code":["enum Planet {","   case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each enumeration definition defines a new type."},{"type":"text","text":" "},{"type":"text","text":"Like other types in Swift, their names"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"start with a capital letter."},{"type":"text","text":" "},{"type":"text","text":"Give enumeration types singular rather than plural names,"},{"type":"text","text":" "},{"type":"text","text":"so that they read as self-evident:"}]},{"type":"codeListing","syntax":"swift","code":["var directionToHead = CompassPoint.west"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":" is inferred"},{"type":"text","text":" "},{"type":"text","text":"when it’s initialized with one of the possible values of "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Once "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":" is declared as a "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can set it to a different "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" value using a shorter dot syntax:"}]},{"type":"codeListing","syntax":"swift","code":["directionToHead = .east"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":" is already known,"},{"type":"text","text":" "},{"type":"text","text":"and so you can drop the type when setting its value."},{"type":"text","text":" "},{"type":"text","text":"This makes for highly readable code when working with explicitly typed enumeration values."}]},{"anchor":"Matching-Enumeration-Values-with-a-Switch-Statement","level":2,"type":"heading","text":"Matching Enumeration Values with a Switch Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can match individual enumeration values with a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement:"}]},{"type":"codeListing","syntax":"swift","code":["directionToHead = .south","switch directionToHead {","   case .north:","      print(\"Lots of planets have a north\")","   case .south:","      print(\"Watch out for penguins\")","   case .east:","      print(\"Where the sun rises\")","   case .west:","      print(\"Where the skies are blue\")","}","\/\/ Prints \"Watch out for penguins\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can read this code as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Consider the value of "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In the case where it equals "},{"type":"codeVoice","code":".north"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"print "},{"type":"codeVoice","code":"\"Lots of planets have a north\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In the case where it equals "},{"type":"codeVoice","code":".south"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"print "},{"type":"codeVoice","code":"\"Watch out for penguins\""},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and so on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement must be exhaustive when considering an enumeration’s cases."},{"type":"text","text":" "},{"type":"text","text":"If the "},{"type":"codeVoice","code":"case"},{"type":"text","text":" for "},{"type":"codeVoice","code":".west"},{"type":"text","text":" is omitted,"},{"type":"text","text":" "},{"type":"text","text":"this code doesn’t compile,"},{"type":"text","text":" "},{"type":"text","text":"because it doesn’t consider the complete list of "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" cases."},{"type":"text","text":" "},{"type":"text","text":"Requiring exhaustiveness ensures that enumeration cases aren’t accidentally omitted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When it isn’t appropriate to provide a "},{"type":"codeVoice","code":"case"},{"type":"text","text":" for every enumeration case,"},{"type":"text","text":" "},{"type":"text","text":"you can provide a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case to cover any cases that aren’t addressed explicitly:"}]},{"type":"codeListing","syntax":"swift","code":["let somePlanet = Planet.earth","switch somePlanet {","   case .earth:","      print(\"Mostly harmless\")","   default:","      print(\"Not a safe place for humans\")","}","\/\/ Prints \"Mostly harmless\""]},{"anchor":"Iterating-over-Enumeration-Cases","level":2,"type":"heading","text":"Iterating over Enumeration Cases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For some enumerations,"},{"type":"text","text":" "},{"type":"text","text":"it’s useful to have a collection of all of that enumeration’s cases."},{"type":"text","text":" "},{"type":"text","text":"You enable this by"},{"type":"text","text":" "},{"type":"text","text":"writing "},{"type":"codeVoice","code":": CaseIterable"},{"type":"text","text":" after the enumeration’s name."},{"type":"text","text":" "},{"type":"text","text":"Swift exposes a collection of all the cases"},{"type":"text","text":" "},{"type":"text","text":"as an "},{"type":"codeVoice","code":"allCases"},{"type":"text","text":" property of the enumeration type."},{"type":"text","text":" "},{"type":"text","text":"Here’s an example:"}]},{"type":"codeListing","syntax":"swift","code":["enum Beverage: CaseIterable {","    case coffee, tea, juice","}","let numberOfChoices = Beverage.allCases.count","print(\"\\(numberOfChoices) beverages available\")","\/\/ Prints \"3 beverages available\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"you write "},{"type":"codeVoice","code":"Beverage.allCases"},{"type":"text","text":" to access a collection"},{"type":"text","text":" "},{"type":"text","text":"that contains all of the cases of the "},{"type":"codeVoice","code":"Beverage"},{"type":"text","text":" enumeration."},{"type":"text","text":" "},{"type":"text","text":"You can use "},{"type":"codeVoice","code":"allCases"},{"type":"text","text":" like any other collection —"},{"type":"text","text":" "},{"type":"text","text":"the collection’s elements are instances of the enumeration type,"},{"type":"text","text":" "},{"type":"text","text":"so in this case they’re "},{"type":"codeVoice","code":"Beverage"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"The example above counts how many cases there are,"},{"type":"text","text":" "},{"type":"text","text":"and the example below uses a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop to iterate over all the cases."}]},{"type":"codeListing","syntax":"swift","code":["for beverage in Beverage.allCases {","    print(beverage)","}","\/\/ coffee","\/\/ tea","\/\/ juice"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax used in the examples above"},{"type":"text","text":" "},{"type":"text","text":"marks the enumeration as conforming to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"For information about protocols, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}]},{"anchor":"Associated-Values","level":2,"type":"heading","text":"Associated Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples in the previous section show how the cases of an enumeration are"},{"type":"text","text":" "},{"type":"text","text":"a defined (and typed) value in their own right."},{"type":"text","text":" "},{"type":"text","text":"You can set a constant or variable to "},{"type":"codeVoice","code":"Planet.earth"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and check for this value later."},{"type":"text","text":" "},{"type":"text","text":"However, it’s sometimes useful to be able to store"},{"type":"text","text":" "},{"type":"text","text":"values of other types alongside these case values."},{"type":"text","text":" "},{"type":"text","text":"This additional information is called an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"associated value"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and it varies each time you use that case as a value in your code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define Swift enumerations to store associated values of any given type,"},{"type":"text","text":" "},{"type":"text","text":"and the value types can be different for each case of the enumeration if needed."},{"type":"text","text":" "},{"type":"text","text":"Enumerations similar to these are known as"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"discriminated unions"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tagged unions"}]},{"type":"text","text":", or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"variants"}]},{"type":"text","text":" "},{"type":"text","text":"in other programming languages."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose an inventory tracking system needs to"},{"type":"text","text":" "},{"type":"text","text":"track products by two different types of barcode."},{"type":"text","text":" "},{"type":"text","text":"Some products are labeled with 1D barcodes in UPC format,"},{"type":"text","text":" "},{"type":"text","text":"which uses the numbers "},{"type":"codeVoice","code":"0"},{"type":"text","text":" to "},{"type":"codeVoice","code":"9"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Each barcode has a number system digit,"},{"type":"text","text":" "},{"type":"text","text":"followed by five manufacturer code digits and five product code digits."},{"type":"text","text":" "},{"type":"text","text":"These are followed by a check digit to verify that the code has been scanned correctly:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"barcode_UPC"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other products are labeled with 2D barcodes in QR code format,"},{"type":"text","text":" "},{"type":"text","text":"which can use any ISO 8859-1 character"},{"type":"text","text":" "},{"type":"text","text":"and can encode a string up to 2,953 characters long:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"barcode_QR"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s convenient for an inventory tracking system to store UPC barcodes"},{"type":"text","text":" "},{"type":"text","text":"as a tuple of four integers,"},{"type":"text","text":" "},{"type":"text","text":"and QR code barcodes as a string of any length."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, an enumeration to define product barcodes of either type might look like this:"}]},{"type":"codeListing","syntax":"swift","code":["enum Barcode {","   case upc(Int, Int, Int, Int)","   case qrCode(String)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Define an enumeration type called "},{"type":"codeVoice","code":"Barcode"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which can take either a value of "},{"type":"codeVoice","code":"upc"},{"type":"text","text":" "},{"type":"text","text":"with an associated value of type ("},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"or a value of "},{"type":"codeVoice","code":"qrCode"},{"type":"text","text":" with an associated value of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This definition doesn’t provide any actual "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values —"},{"type":"text","text":" "},{"type":"text","text":"it just defines the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" of associated values"},{"type":"text","text":" "},{"type":"text","text":"that "},{"type":"codeVoice","code":"Barcode"},{"type":"text","text":" constants and variables can store"},{"type":"text","text":" "},{"type":"text","text":"when they’re equal to "},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Barcode.qrCode"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then create new barcodes using either type:"}]},{"type":"codeListing","syntax":"swift","code":["var productBarcode = Barcode.upc(8, 85909, 51226, 3)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example creates a new variable called "},{"type":"codeVoice","code":"productBarcode"},{"type":"text","text":" "},{"type":"text","text":"and assigns it a value of "},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" "},{"type":"text","text":"with an associated tuple value of "},{"type":"codeVoice","code":"(8, 85909, 51226, 3)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can assign the same product a different type of barcode:"}]},{"type":"codeListing","syntax":"swift","code":["productBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At this point,"},{"type":"text","text":" "},{"type":"text","text":"the original "},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" and its integer values are replaced by"},{"type":"text","text":" "},{"type":"text","text":"the new "},{"type":"codeVoice","code":"Barcode.qrCode"},{"type":"text","text":" and its string value."},{"type":"text","text":" "},{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Barcode"},{"type":"text","text":" can store either a "},{"type":"codeVoice","code":".upc"},{"type":"text","text":" or a "},{"type":"codeVoice","code":".qrCode"},{"type":"text","text":" "},{"type":"text","text":"(together with their associated values),"},{"type":"text","text":" "},{"type":"text","text":"but they can store only one of them at any given time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can check the different barcode types using a switch statement,"},{"type":"text","text":" "},{"type":"text","text":"similar to the example in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This time, however,"},{"type":"text","text":" "},{"type":"text","text":"the associated values are extracted as part of the switch statement."},{"type":"text","text":" "},{"type":"text","text":"You extract each associated value as a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" prefix)"},{"type":"text","text":" "},{"type":"text","text":"or a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" prefix)"},{"type":"text","text":" "},{"type":"text","text":"for use within the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case’s body:"}]},{"type":"codeListing","syntax":"swift","code":["switch productBarcode {","   case .upc(let numberSystem, let manufacturer, let product, let check):","      print(\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","   case .qrCode(let productCode):","      print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If all of the associated values for an enumeration case"},{"type":"text","text":" "},{"type":"text","text":"are extracted as constants, or if all are extracted as variables,"},{"type":"text","text":" "},{"type":"text","text":"you can place a single "},{"type":"codeVoice","code":"var"},{"type":"text","text":" or "},{"type":"codeVoice","code":"let"},{"type":"text","text":" annotation before the case name, for brevity:"}]},{"type":"codeListing","syntax":"swift","code":["switch productBarcode {","   case let .upc(numberSystem, manufacturer, product, check):","      print(\"UPC : \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","   case let .qrCode(productCode):","      print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""]},{"anchor":"Raw-Values","level":2,"type":"heading","text":"Raw Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The barcode example in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Associated-Values"},{"type":"text","text":" "},{"type":"text","text":"shows how cases of an enumeration can declare that they store"},{"type":"text","text":" "},{"type":"text","text":"associated values of different types."},{"type":"text","text":" "},{"type":"text","text":"As an alternative to associated values,"},{"type":"text","text":" "},{"type":"text","text":"enumeration cases can come prepopulated with default values"},{"type":"text","text":" "},{"type":"text","text":"(called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"raw values"}]},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"which are all of the same type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example that stores raw ASCII values alongside named enumeration cases:"}]},{"type":"codeListing","syntax":"swift","code":["enum ASCIIControlCharacter: Character {","   case tab = \"\\t\"","   case lineFeed = \"\\n\"","   case carriageReturn = \"\\r\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, the raw values for an enumeration called "},{"type":"codeVoice","code":"ASCIIControlCharacter"},{"type":"text","text":" "},{"type":"text","text":"are defined to be of type "},{"type":"codeVoice","code":"Character"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and are set to some of the more common ASCII control characters."},{"type":"text","text":" "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values are described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Raw values can be"},{"type":"text","text":" "},{"type":"text","text":"strings, characters, or any of the integer or floating-point number types."},{"type":"text","text":" "},{"type":"text","text":"Each raw value must be unique within its enumeration declaration."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Raw values are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" the same as associated values."},{"type":"text","text":" "},{"type":"text","text":"Raw values are set to prepopulated values"},{"type":"text","text":" "},{"type":"text","text":"when you first define the enumeration in your code,"},{"type":"text","text":" "},{"type":"text","text":"like the three ASCII codes above."},{"type":"text","text":" "},{"type":"text","text":"The raw value for a particular enumeration case is always the same."},{"type":"text","text":" "},{"type":"text","text":"Associated values are set when you create a new constant or variable"},{"type":"text","text":" "},{"type":"text","text":"based on one of the enumeration’s cases,"},{"type":"text","text":" "},{"type":"text","text":"and can be different each time you do so."}]}],"type":"aside","name":"Note"},{"anchor":"Implicitly-Assigned-Raw-Values","level":3,"type":"heading","text":"Implicitly Assigned Raw Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you’re working with enumerations that store integer or string raw values,"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to explicitly assign a raw value for each case."},{"type":"text","text":" "},{"type":"text","text":"When you don’t, Swift automatically assigns the values for you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, when integers are used for raw values,"},{"type":"text","text":" "},{"type":"text","text":"the implicit value for each case is one more than the previous case."},{"type":"text","text":" "},{"type":"text","text":"If the first case doesn’t have a value set, its value is "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The enumeration below is a refinement of the earlier "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" enumeration,"},{"type":"text","text":" "},{"type":"text","text":"with integer raw values to represent each planet’s order from the sun:"}]},{"type":"codeListing","syntax":"swift","code":["enum Planet: Int {","   case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Planet.mercury"},{"type":"text","text":" has an explicit raw value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"Planet.venus"},{"type":"text","text":" has an implicit raw value of "},{"type":"codeVoice","code":"2"},{"type":"text","text":", and so on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When strings are used for raw values,"},{"type":"text","text":" "},{"type":"text","text":"the implicit value for each case is the text of that case’s name."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The enumeration below is a refinement of the earlier "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" enumeration,"},{"type":"text","text":" "},{"type":"text","text":"with string raw values to represent each direction’s name:"}]},{"type":"codeListing","syntax":"swift","code":["enum CompassPoint: String {","   case north, south, east, west","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"codeVoice","code":"CompassPoint.south"},{"type":"text","text":" has an implicit raw value of "},{"type":"codeVoice","code":"\"south\""},{"type":"text","text":", and so on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access the raw value of an enumeration case with its "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["let earthsOrder = Planet.earth.rawValue","\/\/ earthsOrder is 3","","let sunsetDirection = CompassPoint.west.rawValue","\/\/ sunsetDirection is \"west\""]},{"anchor":"Initializing-from-a-Raw-Value","level":3,"type":"heading","text":"Initializing from a Raw Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define an enumeration with a raw-value type,"},{"type":"text","text":" "},{"type":"text","text":"the enumeration automatically receives an initializer"},{"type":"text","text":" "},{"type":"text","text":"that takes a value of the raw value’s type (as a parameter called "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and returns either an enumeration case or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can use this initializer to try to create a new instance of the enumeration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example identifies Uranus from its raw value of "},{"type":"codeVoice","code":"7"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let possiblePlanet = Planet(rawValue: 7)","\/\/ possiblePlanet is of type Planet? and equals Planet.uranus"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not all possible "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values will find a matching planet, however."},{"type":"text","text":" "},{"type":"text","text":"Because of this, the raw value initializer always returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" enumeration case."},{"type":"text","text":" "},{"type":"text","text":"In the example above, "},{"type":"codeVoice","code":"possiblePlanet"},{"type":"text","text":" is of type "},{"type":"codeVoice","code":"Planet?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":".”"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The raw value initializer is a failable initializer,"},{"type":"text","text":" "},{"type":"text","text":"because not every raw value will return an enumeration case."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to find a planet with a position of "},{"type":"codeVoice","code":"11"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" value returned by the raw value initializer will be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let positionToFind = 11","if let somePlanet = Planet(rawValue: positionToFind) {","   switch somePlanet {","      case .earth:","         print(\"Mostly harmless\")","      default:","         print(\"Not a safe place for humans\")","   }","} else {","   print(\"There isn't a planet at position \\(positionToFind)\")","}","\/\/ Prints \"There isn't a planet at position 11\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses optional binding to try to access a planet with a raw value of "},{"type":"codeVoice","code":"11"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The statement "},{"type":"codeVoice","code":"if let somePlanet = Planet(rawValue: 11)"},{"type":"text","text":" creates an optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and sets "},{"type":"codeVoice","code":"somePlanet"},{"type":"text","text":" to the value of that optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" if it can be retrieved."},{"type":"text","text":" "},{"type":"text","text":"In this case, it isn’t possible to retrieve a planet with a position of "},{"type":"codeVoice","code":"11"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" branch is executed instead."}]},{"anchor":"Recursive-Enumerations","level":2,"type":"heading","text":"Recursive Enumerations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"recursive enumeration"}]},{"type":"text","text":" is an enumeration"},{"type":"text","text":" "},{"type":"text","text":"that has another instance of the enumeration"},{"type":"text","text":" "},{"type":"text","text":"as the associated value for one or more of the enumeration cases."},{"type":"text","text":" "},{"type":"text","text":"You indicate that an enumeration case is recursive"},{"type":"text","text":" "},{"type":"text","text":"by writing "},{"type":"codeVoice","code":"indirect"},{"type":"text","text":" before it,"},{"type":"text","text":" "},{"type":"text","text":"which tells the compiler to insert the necessary layer of indirection."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, here is an enumeration that stores simple arithmetic expressions:"}]},{"type":"codeListing","syntax":"swift","code":["enum ArithmeticExpression {","    case number(Int)","    indirect case addition(ArithmeticExpression, ArithmeticExpression)","    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also write "},{"type":"codeVoice","code":"indirect"},{"type":"text","text":" before the beginning of the enumeration"},{"type":"text","text":" "},{"type":"text","text":"to enable indirection for all of the enumeration’s cases that have an associated value:"}]},{"type":"codeListing","syntax":"swift","code":["indirect enum ArithmeticExpression {","    case number(Int)","    case addition(ArithmeticExpression, ArithmeticExpression)","    case multiplication(ArithmeticExpression, ArithmeticExpression)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This enumeration can store three kinds of arithmetic expressions:"},{"type":"text","text":" "},{"type":"text","text":"a plain number,"},{"type":"text","text":" "},{"type":"text","text":"the addition of two expressions,"},{"type":"text","text":" "},{"type":"text","text":"and the multiplication of two expressions."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"addition"},{"type":"text","text":" and "},{"type":"codeVoice","code":"multiplication"},{"type":"text","text":" cases have associated values"},{"type":"text","text":" "},{"type":"text","text":"that are also arithmetic expressions —"},{"type":"text","text":" "},{"type":"text","text":"these associated values make it possible to nest expressions."},{"type":"text","text":" "},{"type":"text","text":"For example, the expression "},{"type":"codeVoice","code":"(5 + 4) * 2"},{"type":"text","text":" "},{"type":"text","text":"has a number on the right-hand side of the multiplication"},{"type":"text","text":" "},{"type":"text","text":"and another expression on the left-hand side of the multiplication."},{"type":"text","text":" "},{"type":"text","text":"Because the data is nested,"},{"type":"text","text":" "},{"type":"text","text":"the enumeration used to store the data also needs to support nesting —"},{"type":"text","text":" "},{"type":"text","text":"this means the enumeration needs to be recursive."},{"type":"text","text":" "},{"type":"text","text":"The code below shows the "},{"type":"codeVoice","code":"ArithmeticExpression"},{"type":"text","text":" recursive enumeration"},{"type":"text","text":" "},{"type":"text","text":"being created for "},{"type":"codeVoice","code":"(5 + 4) * 2"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let five = ArithmeticExpression.number(5)","let four = ArithmeticExpression.number(4)","let sum = ArithmeticExpression.addition(five, four)","let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A recursive function is a straightforward way"},{"type":"text","text":" "},{"type":"text","text":"to work with data that has a recursive structure."},{"type":"text","text":" "},{"type":"text","text":"For example, here’s a function that evaluates an arithmetic expression:"}]},{"type":"codeListing","syntax":"swift","code":["func evaluate(_ expression: ArithmeticExpression) -> Int {","    switch expression {","        case let .number(value):","            return value","        case let .addition(left, right):","            return evaluate(left) + evaluate(right)","        case let .multiplication(left, right):","            return evaluate(left) * evaluate(right)","    }","}","","print(evaluate(product))","\/\/ Prints \"18\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function evaluates a plain number"},{"type":"text","text":" "},{"type":"text","text":"by simply returning the associated value."},{"type":"text","text":" "},{"type":"text","text":"It evaluates an addition or multiplication"},{"type":"text","text":" "},{"type":"text","text":"by evaluating the expression on the left-hand side,"},{"type":"text","text":" "},{"type":"text","text":"evaluating the expression on the right-hand side,"},{"type":"text","text":" "},{"type":"text","text":"and then adding them or multiplying them."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/enumerations"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Enumerations","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"https://developer.apple.com/documentation/swift/caseiterable":{"title":"CaseIterable","titleInlineContent":[{"type":"text","text":"CaseIterable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","url":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"barcode_QR":{"alt":null,"type":"image","identifier":"barcode_QR","variants":[{"url":"\/images\/barcode_QR@2x.png","traits":["2x","light"]},{"url":"\/images\/barcode_QR~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement":{"abstract":[],"title":"Matching Enumeration Values with a Switch Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement","url":"\/documentation\/the-swift-programming-language\/enumerations#Matching-Enumeration-Values-with-a-Switch-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Associated-Values":{"abstract":[],"title":"Associated Values","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Associated-Values","url":"\/documentation\/the-swift-programming-language\/enumerations#Associated-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Failable-Initializers":{"abstract":[],"title":"Failable Initializers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers","url":"\/documentation\/the-swift-programming-language\/declarations#Failable-Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"barcode_UPC":{"alt":null,"type":"image","identifier":"barcode_UPC","variants":[{"url":"\/images\/barcode_UPC@2x.png","traits":["2x","light"]},{"url":"\/images\/barcode_UPC~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"}}}