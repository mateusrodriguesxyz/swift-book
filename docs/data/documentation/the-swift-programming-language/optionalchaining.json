{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional chaining in Swift is similar to messaging "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" in Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"but in a way that works for any type, and that can be checked for success or failure."}]}],"type":"aside","name":"Note"},{"anchor":"Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","level":2,"type":"heading","text":"Optional Chaining as an Alternative to Forced Unwrapping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You specify optional chaining by placing a question mark ("},{"type":"codeVoice","code":"?"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"after the optional value on which you wish to call a property, method or subscript"},{"type":"text","text":" "},{"type":"text","text":"if the optional is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is very similar to placing an exclamation point ("},{"type":"codeVoice","code":"!"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"after an optional value to force the unwrapping of its value."},{"type":"text","text":" "},{"type":"text","text":"The main difference is that optional chaining fails gracefully when the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereas forced unwrapping triggers a runtime error when the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To reflect the fact that optional chaining can be called on a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"the result of an optional chaining call is always an optional value,"},{"type":"text","text":" "},{"type":"text","text":"even if the property, method, or subscript you are querying returns a non-optional value."},{"type":"text","text":" "},{"type":"text","text":"You can use this optional return value to check whether"},{"type":"text","text":" "},{"type":"text","text":"the optional chaining call was successful"},{"type":"text","text":" "},{"type":"text","text":"(the returned optional contains a value),"},{"type":"text","text":" "},{"type":"text","text":"or didn’t succeed due to a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value in the chain"},{"type":"text","text":" "},{"type":"text","text":"(the returned optional value is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Specifically, the result of an optional chaining call"},{"type":"text","text":" "},{"type":"text","text":"is of the same type as the expected return value, but wrapped in an optional."},{"type":"text","text":" "},{"type":"text","text":"A property that normally returns an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" will return an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" "},{"type":"text","text":"when accessed through optional chaining."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next several code snippets demonstrate"},{"type":"text","text":" "},{"type":"text","text":"how optional chaining differs from forced unwrapping"},{"type":"text","text":" "},{"type":"text","text":"and enables you to check for success."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, two classes called "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" are defined:"}]},{"type":"codeListing","syntax":"swift","code":["class Person {","   var residence: Residence?","}","","class Residence {","   var numberOfRooms = 1","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instances have a single "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instances have an optional "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"Residence?"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"its "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property is default initialized to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"by virtue of being optional."},{"type":"text","text":" "},{"type":"text","text":"In the code below, "},{"type":"codeVoice","code":"john"},{"type":"text","text":" has a "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let john = Person()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to access the "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" property of this person’s "},{"type":"codeVoice","code":"residence"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"by placing an exclamation point after "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" to force the unwrapping of its value,"},{"type":"text","text":" "},{"type":"text","text":"you trigger a runtime error,"},{"type":"text","text":" "},{"type":"text","text":"because there’s no "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" value to unwrap:"}]},{"type":"codeListing","syntax":"swift","code":["let roomCount = john.residence!.numberOfRooms","\/\/ this triggers a runtime error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above succeeds when "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" has a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"and will set "},{"type":"codeVoice","code":"roomCount"},{"type":"text","text":" to an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value containing the appropriate number of rooms."},{"type":"text","text":" "},{"type":"text","text":"However, this code always triggers a runtime error when "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as illustrated above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional chaining provides an alternative way to access the value of "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To use optional chaining, use a question mark in place of the exclamation point:"}]},{"type":"codeListing","syntax":"swift","code":["if let roomCount = john.residence?.numberOfRooms {","   print(\"John's residence has \\(roomCount) room(s).\")","} else {","   print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"Unable to retrieve the number of rooms.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This tells Swift to “chain” on the optional "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"and to retrieve the value of "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" if "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" exists."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the attempt to access "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" has the potential to fail,"},{"type":"text","text":" "},{"type":"text","text":"the optional chaining attempt returns a value of type "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":", or “optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"”."},{"type":"text","text":" "},{"type":"text","text":"When "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", as in the example above,"},{"type":"text","text":" "},{"type":"text","text":"this optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" will also be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that it was not possible to access "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is accessed through optional binding"},{"type":"text","text":" "},{"type":"text","text":"to unwrap the integer and assign the non-optional value"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"roomCount"},{"type":"text","text":" constant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this is true even though "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" is a non-optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The fact that it’s queried through an optional chain"},{"type":"text","text":" "},{"type":"text","text":"means that the call to "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" "},{"type":"text","text":"will always return an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" instead of an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can assign a "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instance to "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so that it no longer has a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value:"}]},{"type":"codeListing","syntax":"swift","code":["john.residence = Residence()"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" now contains an actual "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instance, rather than "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If you try to access "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" with the same optional chaining as before,"},{"type":"text","text":" "},{"type":"text","text":"it will now return an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" that contains"},{"type":"text","text":" "},{"type":"text","text":"the default "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if let roomCount = john.residence?.numberOfRooms {","   print(\"John's residence has \\(roomCount) room(s).\")","} else {","   print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"John's residence has 1 room(s).\""]},{"anchor":"Defining-Model-Classes-for-Optional-Chaining","level":2,"type":"heading","text":"Defining Model Classes for Optional Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional chaining with calls to properties, methods, and subscripts"},{"type":"text","text":" "},{"type":"text","text":"that are more than one level deep."},{"type":"text","text":" "},{"type":"text","text":"This enables you to drill down into subproperties"},{"type":"text","text":" "},{"type":"text","text":"within complex models of interrelated types,"},{"type":"text","text":" "},{"type":"text","text":"and to check whether it’s possible to access"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on those subproperties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code snippets below define four model classes"},{"type":"text","text":" "},{"type":"text","text":"for use in several subsequent examples,"},{"type":"text","text":" "},{"type":"text","text":"including examples of multilevel optional chaining."},{"type":"text","text":" "},{"type":"text","text":"These classes expand upon the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" model from above"},{"type":"text","text":" "},{"type":"text","text":"by adding a "},{"type":"codeVoice","code":"Room"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class,"},{"type":"text","text":" "},{"type":"text","text":"with associated properties, methods, and subscripts."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" class is defined in the same way as before:"}]},{"type":"codeListing","syntax":"swift","code":["class Person {","   var residence: Residence?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" class is more complex than before."},{"type":"text","text":" "},{"type":"text","text":"This time, the "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" class defines a variable property called "},{"type":"codeVoice","code":"rooms"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is initialized with an empty array of type "},{"type":"codeVoice","code":"[Room]"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Residence {","   var rooms: [Room] = []","   var numberOfRooms: Int {","      return rooms.count","   }","   subscript(i: Int) -> Room {","      get {","         return rooms[i]","      }","      set {","         rooms[i] = newValue","      }","   }","   func printNumberOfRooms() {","      print(\"The number of rooms is \\(numberOfRooms)\")","   }","   var address: Address?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because this version of "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" stores an array of "},{"type":"codeVoice","code":"Room"},{"type":"text","text":" instances,"},{"type":"text","text":" "},{"type":"text","text":"its "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" property is implemented as a computed property,"},{"type":"text","text":" "},{"type":"text","text":"not a stored property."},{"type":"text","text":" "},{"type":"text","text":"The computed "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" property simply returns"},{"type":"text","text":" "},{"type":"text","text":"the value of the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property from the "},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a shortcut to accessing its "},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array,"},{"type":"text","text":" "},{"type":"text","text":"this version of "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" provides a read-write subscript that provides access to"},{"type":"text","text":" "},{"type":"text","text":"the room at the requested index in the "},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This version of "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" also provides a method called "},{"type":"codeVoice","code":"printNumberOfRooms"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which simply prints the number of rooms in the residence."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" defines an optional property called "},{"type":"codeVoice","code":"address"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a type of "},{"type":"codeVoice","code":"Address?"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class type for this property is defined below."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Room"},{"type":"text","text":" class used for the "},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array is"},{"type":"text","text":" "},{"type":"text","text":"a simple class with one property called "},{"type":"codeVoice","code":"name"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and an initializer to set that property to a suitable room name:"}]},{"type":"codeListing","syntax":"swift","code":["class Room {","   let name: String","   init(name: String) { self.name = name }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final class in this model is called "},{"type":"codeVoice","code":"Address"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This class has three optional properties of type "},{"type":"codeVoice","code":"String?"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The first two properties, "},{"type":"codeVoice","code":"buildingName"},{"type":"text","text":" and "},{"type":"codeVoice","code":"buildingNumber"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"are alternative ways to identify a particular building as part of an address."},{"type":"text","text":" "},{"type":"text","text":"The third property, "},{"type":"codeVoice","code":"street"},{"type":"text","text":", is used to name the street for that address:"}]},{"type":"codeListing","syntax":"swift","code":["class Address {","   var buildingName: String?","   var buildingNumber: String?","   var street: String?","   func buildingIdentifier() -> String? {","      if let buildingNumber = buildingNumber, let street = street {","          return \"\\(buildingNumber) \\(street)\"","      } else if buildingName != nil {","          return buildingName","      } else {","          return nil","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class also provides a method called "},{"type":"codeVoice","code":"buildingIdentifier()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has a return type of "},{"type":"codeVoice","code":"String?"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method checks the properties of the address"},{"type":"text","text":" "},{"type":"text","text":"and returns "},{"type":"codeVoice","code":"buildingName"},{"type":"text","text":" if it has a value,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"buildingNumber"},{"type":"text","text":" concatenated with "},{"type":"codeVoice","code":"street"},{"type":"text","text":" if both have values,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" otherwise."}]},{"anchor":"Accessing-Properties-Through-Optional-Chaining","level":2,"type":"heading","text":"Accessing Properties Through Optional Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As demonstrated in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can use optional chaining to access a property on an optional value,"},{"type":"text","text":" "},{"type":"text","text":"and to check if that property access is successful."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the classes defined above to create a new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and try to access its "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" property as before:"}]},{"type":"codeListing","syntax":"swift","code":["let john = Person()","if let roomCount = john.residence?.numberOfRooms {","   print(\"John's residence has \\(roomCount) room(s).\")","} else {","   print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"Unable to retrieve the number of rooms.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"this optional chaining call fails in the same way as before."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also attempt to set a property’s value through optional chaining:"}]},{"type":"codeListing","syntax":"swift","code":["let someAddress = Address()","someAddress.buildingNumber = \"29\"","someAddress.street = \"Acacia Road\"","john.residence?.address = someAddress"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the attempt to set the "},{"type":"codeVoice","code":"address"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" will fail,"},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The assignment is part of the optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"which means none of the code on the right-hand side of the "},{"type":"codeVoice","code":"="},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"is evaluated."},{"type":"text","text":" "},{"type":"text","text":"In the previous example,"},{"type":"text","text":" "},{"type":"text","text":"it’s not easy to see that "},{"type":"codeVoice","code":"someAddress"},{"type":"text","text":" is never evaluated,"},{"type":"text","text":" "},{"type":"text","text":"because accessing a constant doesn’t have any side effects."},{"type":"text","text":" "},{"type":"text","text":"The listing below does the same assignment,"},{"type":"text","text":" "},{"type":"text","text":"but it uses a function to create the address."},{"type":"text","text":" "},{"type":"text","text":"The function prints “Function was called” before returning a value,"},{"type":"text","text":" "},{"type":"text","text":"which lets you see"},{"type":"text","text":" "},{"type":"text","text":"whether the right-hand side of the "},{"type":"codeVoice","code":"="},{"type":"text","text":" operator was evaluated."}]},{"type":"codeListing","syntax":"swift","code":["func createAddress() -> Address {","    print(\"Function was called.\")","","    let someAddress = Address()","    someAddress.buildingNumber = \"29\"","    someAddress.street = \"Acacia Road\"","","    return someAddress","}","john.residence?.address = createAddress()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can tell that the "},{"type":"codeVoice","code":"createAddress()"},{"type":"text","text":" function isn’t called,"},{"type":"text","text":" "},{"type":"text","text":"because nothing is printed."}]},{"anchor":"Calling-Methods-Through-Optional-Chaining","level":2,"type":"heading","text":"Calling Methods Through Optional Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional chaining to call a method on an optional value,"},{"type":"text","text":" "},{"type":"text","text":"and to check whether that method call is successful."},{"type":"text","text":" "},{"type":"text","text":"You can do this even if that method doesn’t define a return value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"printNumberOfRooms()"},{"type":"text","text":" method on the "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" class"},{"type":"text","text":" "},{"type":"text","text":"prints the current value of "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Here’s how the method looks:"}]},{"type":"codeListing","syntax":"swift","code":["func printNumberOfRooms() {","   print(\"The number of rooms is \\(numberOfRooms)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method doesn’t specify a return type."},{"type":"text","text":" "},{"type":"text","text":"However, functions and methods with no return type have an implicit return type of "},{"type":"codeVoice","code":"Void"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-Without-Return-Values"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means that they return a value of "},{"type":"codeVoice","code":"()"},{"type":"text","text":", or an empty tuple."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you call this method on an optional value with optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"the method’s return type will be "},{"type":"codeVoice","code":"Void?"},{"type":"text","text":", not "},{"type":"codeVoice","code":"Void"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because return values are always of an optional type when called through optional chaining."},{"type":"text","text":" "},{"type":"text","text":"This enables you to use an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to check whether it was possible to call the "},{"type":"codeVoice","code":"printNumberOfRooms()"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"even though the method doesn’t itself define a return value."},{"type":"text","text":" "},{"type":"text","text":"Compare the return value from the "},{"type":"codeVoice","code":"printNumberOfRooms"},{"type":"text","text":" call against "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"to see if the method call was successful:"}]},{"type":"codeListing","syntax":"swift","code":["if john.residence?.printNumberOfRooms() != nil {","   print(\"It was possible to print the number of rooms.\")","} else {","   print(\"It was not possible to print the number of rooms.\")","}","\/\/ Prints \"It was not possible to print the number of rooms.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same is true if you attempt to set a property through optional chaining."},{"type":"text","text":" "},{"type":"text","text":"The example above in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining"},{"type":"text","text":" "},{"type":"text","text":"attempts to set an "},{"type":"codeVoice","code":"address"},{"type":"text","text":" value for "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"even though the "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Any attempt to set a property through optional chaining returns a value of type "},{"type":"codeVoice","code":"Void?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which enables you to compare against "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to see if the property was set successfully:"}]},{"type":"codeListing","syntax":"swift","code":["if (john.residence?.address = someAddress) != nil {","   print(\"It was possible to set the address.\")","} else {","   print(\"It was not possible to set the address.\")","}","\/\/ Prints \"It was not possible to set the address.\""]},{"anchor":"Accessing-Subscripts-Through-Optional-Chaining","level":2,"type":"heading","text":"Accessing Subscripts Through Optional Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional chaining to try to retrieve and set"},{"type":"text","text":" "},{"type":"text","text":"a value from a subscript on an optional value,"},{"type":"text","text":" "},{"type":"text","text":"and to check whether that subscript call is successful."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When you access a subscript on an optional value through optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"you place the question mark "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" the subscript’s brackets, not after."},{"type":"text","text":" "},{"type":"text","text":"The optional chaining question mark always follows immediately after"},{"type":"text","text":" "},{"type":"text","text":"the part of the expression that’s optional."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below tries to retrieve the name of"},{"type":"text","text":" "},{"type":"text","text":"the first room in the "},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array of the "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"using the subscript defined on the "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the subscript call fails:"}]},{"type":"codeListing","syntax":"swift","code":["if let firstRoomName = john.residence?[0].name {","   print(\"The first room name is \\(firstRoomName).\")","} else {","   print(\"Unable to retrieve the first room name.\")","}","\/\/ Prints \"Unable to retrieve the first room name.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The optional chaining question mark in this subscript call"},{"type":"text","text":" "},{"type":"text","text":"is placed immediately after "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":", before the subscript brackets,"},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" is the optional value"},{"type":"text","text":" "},{"type":"text","text":"on which optional chaining is being attempted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, you can try to set a new value through a subscript with optional chaining:"}]},{"type":"codeListing","syntax":"swift","code":["john.residence?[0] = Room(name: \"Bathroom\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This subscript setting attempt also fails, because "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create and assign an actual "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instance to "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with one or more "},{"type":"codeVoice","code":"Room"},{"type":"text","text":" instances in its "},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array,"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" subscript to access"},{"type":"text","text":" "},{"type":"text","text":"the actual items in the "},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array through optional chaining:"}]},{"type":"codeListing","syntax":"swift","code":["let johnsHouse = Residence()","johnsHouse.rooms.append(Room(name: \"Living Room\"))","johnsHouse.rooms.append(Room(name: \"Kitchen\"))","john.residence = johnsHouse","","if let firstRoomName = john.residence?[0].name {","   print(\"The first room name is \\(firstRoomName).\")","} else {","   print(\"Unable to retrieve the first room name.\")","}","\/\/ Prints \"The first room name is Living Room.\""]},{"anchor":"Accessing-Subscripts-of-Optional-Type","level":3,"type":"heading","text":"Accessing Subscripts of Optional Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a subscript returns a value of optional type —"},{"type":"text","text":" "},{"type":"text","text":"such as the key subscript of Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type —"},{"type":"text","text":" "},{"type":"text","text":"place a question mark "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" the subscript’s closing bracket"},{"type":"text","text":" "},{"type":"text","text":"to chain on its optional return value:"}]},{"type":"codeListing","syntax":"swift","code":["var testScores = [\"Dave\": [86, 82, 84], \"Bev\": [79, 94, 81]]","testScores[\"Dave\"]?[0] = 91","testScores[\"Bev\"]?[0] += 1","testScores[\"Brian\"]?[0] = 72","\/\/ the \"Dave\" array is now [91, 82, 84] and the \"Bev\" array is now [80, 94, 81]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above defines a dictionary called "},{"type":"codeVoice","code":"testScores"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which contains two key-value pairs that map a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" key to an array of "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"The example uses optional chaining to set the first item in the "},{"type":"codeVoice","code":"\"Dave\""},{"type":"text","text":" array to "},{"type":"codeVoice","code":"91"},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"to increment the first item in the "},{"type":"codeVoice","code":"\"Bev\""},{"type":"text","text":" array by "},{"type":"codeVoice","code":"1"},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"and to try to set the first item in an array for a key of "},{"type":"codeVoice","code":"\"Brian\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The first two calls succeed, because the "},{"type":"codeVoice","code":"testScores"},{"type":"text","text":" dictionary"},{"type":"text","text":" "},{"type":"text","text":"contains keys for "},{"type":"codeVoice","code":"\"Dave\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"Bev\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The third call fails, because the "},{"type":"codeVoice","code":"testScores"},{"type":"text","text":" dictionary"},{"type":"text","text":" "},{"type":"text","text":"doesn’t contain a key for "},{"type":"codeVoice","code":"\"Brian\""},{"type":"text","text":"."}]},{"anchor":"Linking-Multiple-Levels-of-Chaining","level":2,"type":"heading","text":"Linking Multiple Levels of Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can link together multiple levels of optional chaining"},{"type":"text","text":" "},{"type":"text","text":"to drill down to properties, methods, and subscripts deeper within a model."},{"type":"text","text":" "},{"type":"text","text":"However, multiple levels of optional chaining"},{"type":"text","text":" "},{"type":"text","text":"don’t add more levels of optionality to the returned value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To put it another way:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the type you are trying to retrieve isn’t optional,"},{"type":"text","text":" "},{"type":"text","text":"it will become optional because of the optional chaining."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the type you are trying to retrieve is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"already"}]},{"type":"text","text":" optional,"},{"type":"text","text":" "},{"type":"text","text":"it will not become "},{"type":"emphasis","inlineContent":[{"type":"text","text":"more"}]},{"type":"text","text":" optional because of the chaining."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Therefore:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to retrieve an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value through optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" is always returned,"},{"type":"text","text":" "},{"type":"text","text":"no matter how many levels of chaining are used."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, if you try to retrieve an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" value through optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" is always returned,"},{"type":"text","text":" "},{"type":"text","text":"no matter how many levels of chaining are used."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below tries to access the "},{"type":"codeVoice","code":"street"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"address"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"john"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"There are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"two"}]},{"type":"text","text":" levels of optional chaining in use here,"},{"type":"text","text":" "},{"type":"text","text":"to chain through the "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" and "},{"type":"codeVoice","code":"address"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"type":"text","text":"both of which are of optional type:"}]},{"type":"codeListing","syntax":"swift","code":["if let johnsStreet = john.residence?.address?.street {","   print(\"John's street name is \\(johnsStreet).\")","} else {","   print(\"Unable to retrieve the address.\")","}","\/\/ Prints \"Unable to retrieve the address.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" currently contains a valid "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"However, the value of "},{"type":"codeVoice","code":"john.residence.address"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because of this, the call to "},{"type":"codeVoice","code":"john.residence?.address?.street"},{"type":"text","text":" fails."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that in the example above,"},{"type":"text","text":" "},{"type":"text","text":"you are trying to retrieve the value of the "},{"type":"codeVoice","code":"street"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The type of this property is "},{"type":"codeVoice","code":"String?"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The return value of "},{"type":"codeVoice","code":"john.residence?.address?.street"},{"type":"text","text":" is therefore also "},{"type":"codeVoice","code":"String?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"even though two levels of optional chaining are applied in addition to"},{"type":"text","text":" "},{"type":"text","text":"the underlying optional type of the property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you set an actual "},{"type":"codeVoice","code":"Address"},{"type":"text","text":" instance as the value for "},{"type":"codeVoice","code":"john.residence.address"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and set an actual value for the address’s "},{"type":"codeVoice","code":"street"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"you can access the value of the "},{"type":"codeVoice","code":"street"},{"type":"text","text":" property through multilevel optional chaining:"}]},{"type":"codeListing","syntax":"swift","code":["let johnsAddress = Address()","johnsAddress.buildingName = \"The Larches\"","johnsAddress.street = \"Laurel Street\"","john.residence?.address = johnsAddress","","if let johnsStreet = john.residence?.address?.street {","   print(\"John's street name is \\(johnsStreet).\")","} else {","   print(\"Unable to retrieve the address.\")","}","\/\/ Prints \"John's street name is Laurel Street.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the attempt to set the "},{"type":"codeVoice","code":"address"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" will succeed,"},{"type":"text","text":" "},{"type":"text","text":"because the value of "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" "},{"type":"text","text":"currently contains a valid "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instance."}]},{"anchor":"Chaining-on-Methods-with-Optional-Return-Values","level":2,"type":"heading","text":"Chaining on Methods with Optional Return Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The previous example shows how to retrieve the value of"},{"type":"text","text":" "},{"type":"text","text":"a property of optional type through optional chaining."},{"type":"text","text":" "},{"type":"text","text":"You can also use optional chaining to call a method that returns a value of optional type,"},{"type":"text","text":" "},{"type":"text","text":"and to chain on that method’s return value if needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below calls the "},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class’s "},{"type":"codeVoice","code":"buildingIdentifier()"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"through optional chaining. This method returns a value of type "},{"type":"codeVoice","code":"String?"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"As described above, the ultimate return type of this method call after optional chaining"},{"type":"text","text":" "},{"type":"text","text":"is also "},{"type":"codeVoice","code":"String?"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {","   print(\"John's building identifier is \\(buildingIdentifier).\")","}","\/\/ Prints \"John's building identifier is The Larches.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to perform further optional chaining on this method’s return value,"},{"type":"text","text":" "},{"type":"text","text":"place the optional chaining question mark "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" the method’s parentheses:"}]},{"type":"codeListing","syntax":"swift","code":["if let beginsWithThe =","   john.residence?.address?.buildingIdentifier()?.hasPrefix(\"The\") {","   if beginsWithThe {","      print(\"John's building identifier begins with \\\"The\\\".\")","   } else {","      print(\"John's building identifier doesn't begin with \\\"The\\\".\")","   }","}","\/\/ Prints \"John's building identifier begins with \"The\".\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"you place the optional chaining question mark "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" the parentheses,"},{"type":"text","text":" "},{"type":"text","text":"because the optional value you are chaining on is"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buildingIdentifier()"},{"type":"text","text":" method’s return value,"},{"type":"text","text":" "},{"type":"text","text":"and not the "},{"type":"codeVoice","code":"buildingIdentifier()"},{"type":"text","text":" method itself."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/optionalchaining"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Optional Chaining","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping":{"abstract":[],"title":"Optional Chaining as an Alternative to Forced Unwrapping","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-Without-Return-Values":{"abstract":[],"title":"Functions Without Return Values","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-Without-Return-Values","url":"\/documentation\/the-swift-programming-language\/functions#Functions-Without-Return-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"abstract":[],"title":"Accessing Properties Through Optional Chaining","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"}}}