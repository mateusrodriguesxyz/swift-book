{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can assign specific access levels to individual types"},{"type":"text","text":" "},{"type":"text","text":"(classes, structures, and enumerations),"},{"type":"text","text":" "},{"type":"text","text":"as well as to properties, methods, initializers, and subscripts belonging to those types."},{"type":"text","text":" "},{"type":"text","text":"Protocols can be restricted to a certain context,"},{"type":"text","text":" "},{"type":"text","text":"as can global constants, variables, and functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to offering various levels of access control,"},{"type":"text","text":" "},{"type":"text","text":"Swift reduces the need to specify explicit access control levels"},{"type":"text","text":" "},{"type":"text","text":"by providing default access levels for typical scenarios."},{"type":"text","text":" "},{"type":"text","text":"Indeed, if you are writing a single-target app,"},{"type":"text","text":" "},{"type":"text","text":"you may not need to specify explicit access control levels at all."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The various aspects of your code that can have access control applied to them"},{"type":"text","text":" "},{"type":"text","text":"(properties, types, functions, and so on)"},{"type":"text","text":" "},{"type":"text","text":"are referred to as “entities” in the sections below, for brevity."}]}],"type":"aside","name":"Note"},{"anchor":"Modules-and-Source-Files","level":2,"type":"heading","text":"Modules and Source Files"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s access control model is based on the concept of modules and source files."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"module"}]},{"type":"text","text":" is a single unit of code distribution —"},{"type":"text","text":" "},{"type":"text","text":"a framework or application that’s built and shipped as a single unit"},{"type":"text","text":" "},{"type":"text","text":"and that can be imported by another module with Swift’s "},{"type":"codeVoice","code":"import"},{"type":"text","text":" keyword."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each build target (such as an app bundle or framework) in Xcode"},{"type":"text","text":" "},{"type":"text","text":"is treated as a separate module in Swift."},{"type":"text","text":" "},{"type":"text","text":"If you group together aspects of your app’s code as a stand-alone framework —"},{"type":"text","text":" "},{"type":"text","text":"perhaps to encapsulate and reuse that code across multiple applications —"},{"type":"text","text":" "},{"type":"text","text":"then everything you define within that framework will be part of a separate module"},{"type":"text","text":" "},{"type":"text","text":"when it’s imported and used within an app,"},{"type":"text","text":" "},{"type":"text","text":"or when it’s used within another framework."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"source file"}]},{"type":"text","text":" is a single Swift source code file within a module"},{"type":"text","text":" "},{"type":"text","text":"(in effect, a single file within an app or framework)."},{"type":"text","text":" "},{"type":"text","text":"Although it’s common to define individual types in separate source files,"},{"type":"text","text":" "},{"type":"text","text":"a single source file can contain definitions for multiple types, functions, and so on."}]},{"anchor":"Access-Levels","level":2,"type":"heading","text":"Access Levels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides five different "},{"type":"emphasis","inlineContent":[{"type":"text","text":"access levels"}]},{"type":"text","text":" for entities within your code."},{"type":"text","text":" "},{"type":"text","text":"These access levels are relative to the source file in which an entity is defined,"},{"type":"text","text":" "},{"type":"text","text":"and also relative to the module that source file belongs to."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Open access"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"public access"}]},{"type":"text","text":" "},{"type":"text","text":"enable entities to be used within any source file from their defining module,"},{"type":"text","text":" "},{"type":"text","text":"and also in a source file from another module that imports the defining module."},{"type":"text","text":" "},{"type":"text","text":"You typically use open or public access when specifying the public interface to a framework."},{"type":"text","text":" "},{"type":"text","text":"The difference between open and public access is described below."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Internal access"}]},{"type":"text","text":" "},{"type":"text","text":"enables entities to be used within any source file from their defining module,"},{"type":"text","text":" "},{"type":"text","text":"but not in any source file outside of that module."},{"type":"text","text":" "},{"type":"text","text":"You typically use internal access when defining"},{"type":"text","text":" "},{"type":"text","text":"an app’s or a framework’s internal structure."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"File-private access"}]},{"type":"text","text":" "},{"type":"text","text":"restricts the use of an entity to its own defining source file."},{"type":"text","text":" "},{"type":"text","text":"Use file-private access to hide the implementation details of"},{"type":"text","text":" "},{"type":"text","text":"a specific piece of functionality"},{"type":"text","text":" "},{"type":"text","text":"when those details are used within an entire file."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Private access"}]},{"type":"text","text":" "},{"type":"text","text":"restricts the use of an entity to the enclosing declaration,"},{"type":"text","text":" "},{"type":"text","text":"and to extensions of that declaration that are in the same file."},{"type":"text","text":" "},{"type":"text","text":"Use private access to hide the implementation details of"},{"type":"text","text":" "},{"type":"text","text":"a specific piece of functionality"},{"type":"text","text":" "},{"type":"text","text":"when those details are used only within a single declaration."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Open access is the highest (least restrictive) access level"},{"type":"text","text":" "},{"type":"text","text":"and private access is the lowest (most restrictive) access level."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Open access applies only to classes and class members,"},{"type":"text","text":" "},{"type":"text","text":"and it differs from public access"},{"type":"text","text":" "},{"type":"text","text":"by allowing code outside the module to subclass and override,"},{"type":"text","text":" "},{"type":"text","text":"as discussed below in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Subclassing"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Marking a class as open explicitly indicates"},{"type":"text","text":" "},{"type":"text","text":"that you’ve considered the impact of code from other modules"},{"type":"text","text":" "},{"type":"text","text":"using that class as a superclass,"},{"type":"text","text":" "},{"type":"text","text":"and that you’ve designed your class’s code accordingly."}]},{"anchor":"Guiding-Principle-of-Access-Levels","level":3,"type":"heading","text":"Guiding Principle of Access Levels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Access levels in Swift follow an overall guiding principle:"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"No entity can be defined in terms of another entity that has"},{"type":"text","text":" "},{"type":"text","text":"a lower (more restrictive) access level."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A public variable can’t be defined as having an internal, file-private, or private type,"},{"type":"text","text":" "},{"type":"text","text":"because the type might not be available everywhere that the public variable is used."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function can’t have a higher access level than its parameter types and return type,"},{"type":"text","text":" "},{"type":"text","text":"because the function could be used in situations where"},{"type":"text","text":" "},{"type":"text","text":"its constituent types are unavailable to the surrounding code."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The specific implications of this guiding principle for different aspects of the language"},{"type":"text","text":" "},{"type":"text","text":"are covered in detail below."}]},{"anchor":"Default-Access-Levels","level":3,"type":"heading","text":"Default Access Levels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All entities in your code"},{"type":"text","text":" "},{"type":"text","text":"(with a few specific exceptions, as described later in this chapter)"},{"type":"text","text":" "},{"type":"text","text":"have a default access level of internal"},{"type":"text","text":" "},{"type":"text","text":"if you don’t specify an explicit access level yourself."},{"type":"text","text":" "},{"type":"text","text":"As a result, in many cases you don’t need to specify"},{"type":"text","text":" "},{"type":"text","text":"an explicit access level in your code."}]},{"anchor":"Access-Levels-for-Single-Target-Apps","level":3,"type":"heading","text":"Access Levels for Single-Target Apps"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write a simple single-target app,"},{"type":"text","text":" "},{"type":"text","text":"the code in your app is typically self-contained within the app"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t need to be made available outside of the app’s module."},{"type":"text","text":" "},{"type":"text","text":"The default access level of internal already matches this requirement."},{"type":"text","text":" "},{"type":"text","text":"Therefore, you don’t need to specify a custom access level."},{"type":"text","text":" "},{"type":"text","text":"You may, however, want to mark some parts of your code as file private or private"},{"type":"text","text":" "},{"type":"text","text":"in order to hide their implementation details from other code within the app’s module."}]},{"anchor":"Access-Levels-for-Frameworks","level":3,"type":"heading","text":"Access Levels for Frameworks"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you develop a framework,"},{"type":"text","text":" "},{"type":"text","text":"mark the public-facing interface to that framework"},{"type":"text","text":" "},{"type":"text","text":"as open or public so that it can be viewed and accessed by other modules,"},{"type":"text","text":" "},{"type":"text","text":"such as an app that imports the framework."},{"type":"text","text":" "},{"type":"text","text":"This public-facing interface is the application programming interface"},{"type":"text","text":" "},{"type":"text","text":"(or API) for the framework."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any internal implementation details of your framework can still use"},{"type":"text","text":" "},{"type":"text","text":"the default access level of internal,"},{"type":"text","text":" "},{"type":"text","text":"or can be marked as private or file private if you want to hide them from"},{"type":"text","text":" "},{"type":"text","text":"other parts of the framework’s internal code."},{"type":"text","text":" "},{"type":"text","text":"You need to mark an entity as open or public only if you want it to become"},{"type":"text","text":" "},{"type":"text","text":"part of your framework’s API."}]}],"type":"aside","name":"Note"},{"anchor":"Access-Levels-for-Unit-Test-Targets","level":3,"type":"heading","text":"Access Levels for Unit Test Targets"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write an app with a unit test target,"},{"type":"text","text":" "},{"type":"text","text":"the code in your app needs to be made available to that module in order to be tested."},{"type":"text","text":" "},{"type":"text","text":"By default, only entities marked as open or public"},{"type":"text","text":" "},{"type":"text","text":"are accessible to other modules."},{"type":"text","text":" "},{"type":"text","text":"However, a unit test target can access any internal entity,"},{"type":"text","text":" "},{"type":"text","text":"if you mark the import declaration for a product module with the "},{"type":"codeVoice","code":"@testable"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"and compile that product module with testing enabled."}]},{"anchor":"Access-Control-Syntax","level":2,"type":"heading","text":"Access Control Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the access level for an entity by placing"},{"type":"text","text":" "},{"type":"text","text":"one of the "},{"type":"codeVoice","code":"open"},{"type":"text","text":", "},{"type":"codeVoice","code":"public"},{"type":"text","text":", "},{"type":"codeVoice","code":"internal"},{"type":"text","text":", "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":", or "},{"type":"codeVoice","code":"private"},{"type":"text","text":" modifiers"},{"type":"text","text":" "},{"type":"text","text":"at the beginning of the entity’s declaration."}]},{"type":"codeListing","syntax":"swift","code":["public class SomePublicClass {}","internal class SomeInternalClass {}","fileprivate class SomeFilePrivateClass {}","private class SomePrivateClass {}","","public var somePublicVariable = 0","internal let someInternalConstant = 0","fileprivate func someFilePrivateFunction() {}","private func somePrivateFunction() {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless otherwise specified, the default access level is internal,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Default-Access-Levels"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means that "},{"type":"codeVoice","code":"SomeInternalClass"},{"type":"text","text":" and "},{"type":"codeVoice","code":"someInternalConstant"},{"type":"text","text":" can be written"},{"type":"text","text":" "},{"type":"text","text":"without an explicit access-level modifier,"},{"type":"text","text":" "},{"type":"text","text":"and will still have an access level of internal:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeInternalClass {}              \/\/ implicitly internal","let someInternalConstant = 0            \/\/ implicitly internal"]},{"anchor":"Custom-Types","level":2,"type":"heading","text":"Custom Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to specify an explicit access level for a custom type,"},{"type":"text","text":" "},{"type":"text","text":"do so at the point that you define the type."},{"type":"text","text":" "},{"type":"text","text":"The new type can then be used wherever its access level permits."},{"type":"text","text":" "},{"type":"text","text":"For example, if you define a file-private class,"},{"type":"text","text":" "},{"type":"text","text":"that class can only be used as the type of a property,"},{"type":"text","text":" "},{"type":"text","text":"or as a function parameter or return type,"},{"type":"text","text":" "},{"type":"text","text":"in the source file in which the file-private class is defined."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access control level of a type also affects"},{"type":"text","text":" "},{"type":"text","text":"the default access level of that type’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"members"}]},{"type":"text","text":" "},{"type":"text","text":"(its properties, methods, initializers, and subscripts)."},{"type":"text","text":" "},{"type":"text","text":"If you define a type’s access level as private or file private,"},{"type":"text","text":" "},{"type":"text","text":"the default access level of its members will also be private or file private."},{"type":"text","text":" "},{"type":"text","text":"If you define a type’s access level as internal or public"},{"type":"text","text":" "},{"type":"text","text":"(or use the default access level of internal"},{"type":"text","text":" "},{"type":"text","text":"without specifying an access level explicitly),"},{"type":"text","text":" "},{"type":"text","text":"the default access level of the type’s members will be internal."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A public type defaults to having internal members, not public members."},{"type":"text","text":" "},{"type":"text","text":"If you want a type member to be public, you must explicitly mark it as such."},{"type":"text","text":" "},{"type":"text","text":"This requirement ensures that the public-facing API for a type is"},{"type":"text","text":" "},{"type":"text","text":"something you opt in to publishing,"},{"type":"text","text":" "},{"type":"text","text":"and avoids presenting the internal workings of a type as public API by mistake."}]}],"type":"aside","name":"Important"},{"type":"codeListing","syntax":"swift","code":["public class SomePublicClass {                  \/\/ explicitly public class","   public var somePublicProperty = 0            \/\/ explicitly public class member","   var someInternalProperty = 0                 \/\/ implicitly internal class member","   fileprivate func someFilePrivateMethod() {}  \/\/ explicitly file-private class member","   private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","class SomeInternalClass {                       \/\/ implicitly internal class","   var someInternalProperty = 0                 \/\/ implicitly internal class member","   fileprivate func someFilePrivateMethod() {}  \/\/ explicitly file-private class member","   private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","fileprivate class SomeFilePrivateClass {        \/\/ explicitly file-private class","   func someFilePrivateMethod() {}              \/\/ implicitly file-private class member","   private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","private class SomePrivateClass {                \/\/ explicitly private class","   func somePrivateMethod() {}                  \/\/ implicitly private class member","}"]},{"anchor":"Tuple-Types","level":3,"type":"heading","text":"Tuple Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access level for a tuple type is"},{"type":"text","text":" "},{"type":"text","text":"the most restrictive access level of all types used in that tuple."},{"type":"text","text":" "},{"type":"text","text":"For example, if you compose a tuple from two different types,"},{"type":"text","text":" "},{"type":"text","text":"one with internal access and one with private access,"},{"type":"text","text":" "},{"type":"text","text":"the access level for that compound tuple type will be private."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuple types don’t have a standalone definition in the way that"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, enumerations, and functions do."},{"type":"text","text":" "},{"type":"text","text":"A tuple type’s access level is determined automatically"},{"type":"text","text":" "},{"type":"text","text":"from the types that make up the tuple type,"},{"type":"text","text":" "},{"type":"text","text":"and can’t be specified explicitly."}]}],"type":"aside","name":"Note"},{"anchor":"Function-Types","level":3,"type":"heading","text":"Function Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access level for a function type is calculated as"},{"type":"text","text":" "},{"type":"text","text":"the most restrictive access level of the function’s parameter types and return type."},{"type":"text","text":" "},{"type":"text","text":"You must specify the access level explicitly as part of the function’s definition"},{"type":"text","text":" "},{"type":"text","text":"if the function’s calculated access level doesn’t match the contextual default."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a global function called "},{"type":"codeVoice","code":"someFunction()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"without providing a specific access-level modifier for the function itself."},{"type":"text","text":" "},{"type":"text","text":"You might expect this function to have the default access level of “internal”,"},{"type":"text","text":" "},{"type":"text","text":"but this isn’t the case."},{"type":"text","text":" "},{"type":"text","text":"In fact, "},{"type":"codeVoice","code":"someFunction()"},{"type":"text","text":" won’t compile as written below:"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction() -> (SomeInternalClass, SomePrivateClass) {","   \/\/ function implementation goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function’s return type is"},{"type":"text","text":" "},{"type":"text","text":"a tuple type composed from two of the custom classes defined above in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Custom-Types"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"One of these classes is defined as internal,"},{"type":"text","text":" "},{"type":"text","text":"and the other is defined as private."},{"type":"text","text":" "},{"type":"text","text":"Therefore, the overall access level of the compound tuple type is private"},{"type":"text","text":" "},{"type":"text","text":"(the minimum access level of the tuple’s constituent types)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the function’s return type is private,"},{"type":"text","text":" "},{"type":"text","text":"you must mark the function’s overall access level with the "},{"type":"codeVoice","code":"private"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"for the function declaration to be valid:"}]},{"type":"codeListing","syntax":"swift","code":["private func someFunction() -> (SomeInternalClass, SomePrivateClass) {","   \/\/ function implementation goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s not valid to mark the definition of "},{"type":"codeVoice","code":"someFunction()"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"public"},{"type":"text","text":" or "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" modifiers,"},{"type":"text","text":" "},{"type":"text","text":"or to use the default setting of internal,"},{"type":"text","text":" "},{"type":"text","text":"because public or internal users of the function might not have appropriate access"},{"type":"text","text":" "},{"type":"text","text":"to the private class used in the function’s return type."}]},{"anchor":"Enumeration-Types","level":3,"type":"heading","text":"Enumeration Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The individual cases of an enumeration automatically receive the same access level as"},{"type":"text","text":" "},{"type":"text","text":"the enumeration they belong to."},{"type":"text","text":" "},{"type":"text","text":"You can’t specify a different access level for individual enumeration cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example below,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" enumeration has an explicit access level of public."},{"type":"text","text":" "},{"type":"text","text":"The enumeration cases "},{"type":"codeVoice","code":"north"},{"type":"text","text":", "},{"type":"codeVoice","code":"south"},{"type":"text","text":", "},{"type":"codeVoice","code":"east"},{"type":"text","text":", and "},{"type":"codeVoice","code":"west"},{"type":"text","text":" "},{"type":"text","text":"therefore also have an access level of public:"}]},{"type":"codeListing","syntax":"swift","code":["public enum CompassPoint {","   case north","   case south","   case east","   case west","}"]},{"anchor":"Raw-Values-and-Associated-Values","level":4,"type":"heading","text":"Raw Values and Associated Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The types used for any raw values or associated values in an enumeration definition"},{"type":"text","text":" "},{"type":"text","text":"must have an access level at least as high as the enumeration’s access level."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"you can’t use a private type as the raw-value type of"},{"type":"text","text":" "},{"type":"text","text":"an enumeration with an internal access level."}]},{"anchor":"Nested-Types","level":3,"type":"heading","text":"Nested Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access level of a nested type is the same as its containing type,"},{"type":"text","text":" "},{"type":"text","text":"unless the containing type is public."},{"type":"text","text":" "},{"type":"text","text":"Nested types defined within a public type"},{"type":"text","text":" "},{"type":"text","text":"have an automatic access level of internal."},{"type":"text","text":" "},{"type":"text","text":"If you want a nested type within a public type to be publicly available,"},{"type":"text","text":" "},{"type":"text","text":"you must explicitly declare the nested type as public."}]},{"anchor":"Subclassing","level":2,"type":"heading","text":"Subclassing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can subclass any class"},{"type":"text","text":" "},{"type":"text","text":"that can be accessed in the current access context"},{"type":"text","text":" "},{"type":"text","text":"and that’s defined in the same module as the subclass."},{"type":"text","text":" "},{"type":"text","text":"You can also subclass any open class"},{"type":"text","text":" "},{"type":"text","text":"that’s defined in a different module."},{"type":"text","text":" "},{"type":"text","text":"A subclass can’t have a higher access level than its superclass —"},{"type":"text","text":" "},{"type":"text","text":"for example, you can’t write a public subclass of an internal superclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition,"},{"type":"text","text":" "},{"type":"text","text":"for classes that are defined in the same module,"},{"type":"text","text":" "},{"type":"text","text":"you can override any class member"},{"type":"text","text":" "},{"type":"text","text":"(method, property, initializer, or subscript)"},{"type":"text","text":" "},{"type":"text","text":"that’s visible in a certain access context."},{"type":"text","text":" "},{"type":"text","text":"For classes that are defined in another module,"},{"type":"text","text":" "},{"type":"text","text":"you can override any open class member."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An override can make an inherited class member more accessible than its superclass version."},{"type":"text","text":" "},{"type":"text","text":"In the example below, class "},{"type":"codeVoice","code":"A"},{"type":"text","text":" is a public class with a file-private method called "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Class "},{"type":"codeVoice","code":"B"},{"type":"text","text":" is a subclass of "},{"type":"codeVoice","code":"A"},{"type":"text","text":", with a reduced access level of “internal”."},{"type":"text","text":" "},{"type":"text","text":"Nonetheless, class "},{"type":"codeVoice","code":"B"},{"type":"text","text":" provides an override of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" "},{"type":"text","text":"with an access level of “internal”, which is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"higher"}]},{"type":"text","text":" than"},{"type":"text","text":" "},{"type":"text","text":"the original implementation of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["public class A {","   fileprivate func someMethod() {}","}","","internal class B: A {","   override internal func someMethod() {}","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s even valid for a subclass member to call"},{"type":"text","text":" "},{"type":"text","text":"a superclass member that has lower access permissions than the subclass member,"},{"type":"text","text":" "},{"type":"text","text":"as long as the call to the superclass’s member takes place within"},{"type":"text","text":" "},{"type":"text","text":"an allowed access level context"},{"type":"text","text":" "},{"type":"text","text":"(that is, within the same source file as the superclass for a file-private member call,"},{"type":"text","text":" "},{"type":"text","text":"or within the same module as the superclass for an internal member call):"}]},{"type":"codeListing","syntax":"swift","code":["public class A {","   fileprivate func someMethod() {}","}","","internal class B: A {","   override internal func someMethod() {","      super.someMethod()","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because superclass "},{"type":"codeVoice","code":"A"},{"type":"text","text":" and subclass "},{"type":"codeVoice","code":"B"},{"type":"text","text":" are defined in the same source file,"},{"type":"text","text":" "},{"type":"text","text":"it’s valid for the "},{"type":"codeVoice","code":"B"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" to call"},{"type":"text","text":" "},{"type":"codeVoice","code":"super.someMethod()"},{"type":"text","text":"."}]},{"anchor":"Constants-Variables-Properties-and-Subscripts","level":2,"type":"heading","text":"Constants, Variables, Properties, and Subscripts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A constant, variable, or property can’t be more public than its type."},{"type":"text","text":" "},{"type":"text","text":"It’s not valid to write a public property with a private type, for example."},{"type":"text","text":" "},{"type":"text","text":"Similarly, a subscript can’t be more public than either its index type or return type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a constant, variable, property, or subscript makes use of a private type,"},{"type":"text","text":" "},{"type":"text","text":"the constant, variable, property, or subscript must also be marked as "},{"type":"codeVoice","code":"private"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["private var privateInstance = SomePrivateClass()"]},{"anchor":"Getters-and-Setters","level":3,"type":"heading","text":"Getters and Setters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Getters and setters for constants, variables, properties, and subscripts"},{"type":"text","text":" "},{"type":"text","text":"automatically receive the same access level as"},{"type":"text","text":" "},{"type":"text","text":"the constant, variable, property, or subscript they belong to."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can give a setter a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lower"}]},{"type":"text","text":" access level than its corresponding getter,"},{"type":"text","text":" "},{"type":"text","text":"to restrict the read-write scope of that variable, property, or subscript."},{"type":"text","text":" "},{"type":"text","text":"You assign a lower access level by writing"},{"type":"text","text":" "},{"type":"codeVoice","code":"fileprivate(set)"},{"type":"text","text":", "},{"type":"codeVoice","code":"private(set)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"internal(set)"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" or "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" introducer."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This rule applies to stored properties as well as computed properties."},{"type":"text","text":" "},{"type":"text","text":"Even though you don’t write an explicit getter and setter for a stored property,"},{"type":"text","text":" "},{"type":"text","text":"Swift still synthesizes an implicit getter and setter for you"},{"type":"text","text":" "},{"type":"text","text":"to provide access to the stored property’s backing storage."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"fileprivate(set)"},{"type":"text","text":", "},{"type":"codeVoice","code":"private(set)"},{"type":"text","text":", and "},{"type":"codeVoice","code":"internal(set)"},{"type":"text","text":" to change the access level"},{"type":"text","text":" "},{"type":"text","text":"of this synthesized setter in exactly the same way as for an explicit setter"},{"type":"text","text":" "},{"type":"text","text":"in a computed property."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which keeps track of the number of times a string property is modified:"}]},{"type":"codeListing","syntax":"swift","code":["struct TrackedString {","   private(set) var numberOfEdits = 0","   var value: String = \"\" {","      didSet {","         numberOfEdits += 1","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" structure defines a stored string property called "},{"type":"codeVoice","code":"value"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with an initial value of "},{"type":"codeVoice","code":"\"\""},{"type":"text","text":" (an empty string)."},{"type":"text","text":" "},{"type":"text","text":"The structure also defines a stored integer property called "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is used to track the number of times that "},{"type":"codeVoice","code":"value"},{"type":"text","text":" is modified."},{"type":"text","text":" "},{"type":"text","text":"This modification tracking is implemented with"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" property observer on the "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which increments "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" every time the "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property is set to a new value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" structure and the "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"don’t provide an explicit access-level modifier,"},{"type":"text","text":" "},{"type":"text","text":"and so they both receive the default access level of internal."},{"type":"text","text":" "},{"type":"text","text":"However, the access level for the "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"is marked with a "},{"type":"codeVoice","code":"private(set)"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"to indicate that"},{"type":"text","text":" "},{"type":"text","text":"the property’s getter still has the default access level of internal,"},{"type":"text","text":" "},{"type":"text","text":"but the property is settable only from within"},{"type":"text","text":" "},{"type":"text","text":"code that’s part of the "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" structure."},{"type":"text","text":" "},{"type":"text","text":"This enables "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" to modify the "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" property internally,"},{"type":"text","text":" "},{"type":"text","text":"but to present the property as a read-only property"},{"type":"text","text":" "},{"type":"text","text":"when it’s used outside the structure’s definition."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" instance and modify its string value a few times,"},{"type":"text","text":" "},{"type":"text","text":"you can see the "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" property value update to match the number of modifications:"}]},{"type":"codeListing","syntax":"swift","code":["var stringToEdit = TrackedString()","stringToEdit.value = \"This string will be tracked.\"","stringToEdit.value += \" This edit will increment numberOfEdits.\"","stringToEdit.value += \" So will this one.\"","print(\"The number of edits is \\(stringToEdit.numberOfEdits)\")","\/\/ Prints \"The number of edits is 3\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although you can query the current value of the "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"from within another source file,"},{"type":"text","text":" "},{"type":"text","text":"you can’t "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modify"}]},{"type":"text","text":" the property from another source file."},{"type":"text","text":" "},{"type":"text","text":"This restriction protects the implementation details of"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" edit-tracking functionality,"},{"type":"text","text":" "},{"type":"text","text":"while still providing convenient access to an aspect of that functionality."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you can assign an explicit access level for both"},{"type":"text","text":" "},{"type":"text","text":"a getter and a setter if required."},{"type":"text","text":" "},{"type":"text","text":"The example below shows a version of the "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" structure"},{"type":"text","text":" "},{"type":"text","text":"in which the structure is defined with an explicit access level of public."},{"type":"text","text":" "},{"type":"text","text":"The structure’s members (including the "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" property)"},{"type":"text","text":" "},{"type":"text","text":"therefore have an internal access level by default."},{"type":"text","text":" "},{"type":"text","text":"You can make the structure’s "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" property getter public,"},{"type":"text","text":" "},{"type":"text","text":"and its property setter private,"},{"type":"text","text":" "},{"type":"text","text":"by combining the "},{"type":"codeVoice","code":"public"},{"type":"text","text":" and "},{"type":"codeVoice","code":"private(set)"},{"type":"text","text":" access-level modifiers:"}]},{"type":"codeListing","syntax":"swift","code":["public struct TrackedString {","   public private(set) var numberOfEdits = 0","   public var value: String = \"\" {","      didSet {","         numberOfEdits += 1","      }","   }","   public init() {}","}"]},{"anchor":"Initializers","level":2,"type":"heading","text":"Initializers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom initializers can be assigned an access level less than or equal to"},{"type":"text","text":" "},{"type":"text","text":"the type that they initialize."},{"type":"text","text":" "},{"type":"text","text":"The only exception is for required initializers"},{"type":"text","text":" "},{"type":"text","text":"(as defined in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"A required initializer must have the same access level as the class it belongs to."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with function and method parameters,"},{"type":"text","text":" "},{"type":"text","text":"the types of an initializer’s parameters can’t be more private than"},{"type":"text","text":" "},{"type":"text","text":"the initializer’s own access level."}]},{"anchor":"Default-Initializers","level":3,"type":"heading","text":"Default Initializers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As described in "},{"type":"text","text":"doc:Initialization#Default-Initializers"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift automatically provides a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"default initializer"}]},{"type":"text","text":" without any arguments"},{"type":"text","text":" "},{"type":"text","text":"for any structure or base class"},{"type":"text","text":" "},{"type":"text","text":"that provides default values for all of its properties"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t provide at least one initializer itself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A default initializer has the same access level as the type it initializes,"},{"type":"text","text":" "},{"type":"text","text":"unless that type is defined as "},{"type":"codeVoice","code":"public"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For a type that’s defined as "},{"type":"codeVoice","code":"public"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the default initializer is considered internal."},{"type":"text","text":" "},{"type":"text","text":"If you want a public type to be initializable with a no-argument initializer"},{"type":"text","text":" "},{"type":"text","text":"when used in another module,"},{"type":"text","text":" "},{"type":"text","text":"you must explicitly provide a public no-argument initializer yourself"},{"type":"text","text":" "},{"type":"text","text":"as part of the type’s definition."}]},{"anchor":"Default-Memberwise-Initializers-for-Structure-Types","level":3,"type":"heading","text":"Default Memberwise Initializers for Structure Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default memberwise initializer for a structure type is considered private"},{"type":"text","text":" "},{"type":"text","text":"if any of the structure’s stored properties are private."},{"type":"text","text":" "},{"type":"text","text":"Likewise, if any of the structure’s stored properties are file private,"},{"type":"text","text":" "},{"type":"text","text":"the initializer is file private."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the initializer has an access level of internal."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with the default initializer above,"},{"type":"text","text":" "},{"type":"text","text":"if you want a public structure type to be initializable with a memberwise initializer"},{"type":"text","text":" "},{"type":"text","text":"when used in another module,"},{"type":"text","text":" "},{"type":"text","text":"you must provide a public memberwise initializer yourself as part of the type’s definition."}]},{"anchor":"Protocols","level":2,"type":"heading","text":"Protocols"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to assign an explicit access level to a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"do so at the point that you define the protocol."},{"type":"text","text":" "},{"type":"text","text":"This enables you to create protocols that can only be adopted within"},{"type":"text","text":" "},{"type":"text","text":"a certain access context."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access level of each requirement within a protocol definition"},{"type":"text","text":" "},{"type":"text","text":"is automatically set to the same access level as the protocol."},{"type":"text","text":" "},{"type":"text","text":"You can’t set a protocol requirement to a different access level than"},{"type":"text","text":" "},{"type":"text","text":"the protocol it supports."},{"type":"text","text":" "},{"type":"text","text":"This ensures that all of the protocol’s requirements will be visible"},{"type":"text","text":" "},{"type":"text","text":"on any type that adopts the protocol."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define a public protocol,"},{"type":"text","text":" "},{"type":"text","text":"the protocol’s requirements require a public access level"},{"type":"text","text":" "},{"type":"text","text":"for those requirements when they’re implemented."},{"type":"text","text":" "},{"type":"text","text":"This behavior is different from other types,"},{"type":"text","text":" "},{"type":"text","text":"where a public type definition implies"},{"type":"text","text":" "},{"type":"text","text":"an access level of internal for the type’s members."}]}],"type":"aside","name":"Note"},{"anchor":"Protocol-Inheritance","level":3,"type":"heading","text":"Protocol Inheritance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define a new protocol that inherits from an existing protocol,"},{"type":"text","text":" "},{"type":"text","text":"the new protocol can have at most the same access level as the protocol it inherits from."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"you can’t write a public protocol that inherits from an internal protocol."}]},{"anchor":"Protocol-Conformance","level":3,"type":"heading","text":"Protocol Conformance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A type can conform to a protocol with a lower access level than the type itself."},{"type":"text","text":" "},{"type":"text","text":"For example, you can define a public type that can be used in other modules,"},{"type":"text","text":" "},{"type":"text","text":"but whose conformance to an internal protocol can only be used"},{"type":"text","text":" "},{"type":"text","text":"within the internal protocol’s defining module."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The context in which a type conforms to a particular protocol"},{"type":"text","text":" "},{"type":"text","text":"is the minimum of the type’s access level and the protocol’s access level."},{"type":"text","text":" "},{"type":"text","text":"For example, if a type is public, but a protocol it conforms to is internal,"},{"type":"text","text":" "},{"type":"text","text":"the type’s conformance to that protocol is also internal."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write or extend a type to conform to a protocol,"},{"type":"text","text":" "},{"type":"text","text":"you must ensure that the type’s implementation of each protocol requirement"},{"type":"text","text":" "},{"type":"text","text":"has at least the same access level as the type’s conformance to that protocol."},{"type":"text","text":" "},{"type":"text","text":"For example, if a public type conforms to an internal protocol,"},{"type":"text","text":" "},{"type":"text","text":"the type’s implementation of each protocol requirement must be at least internal."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, as in Objective-C, protocol conformance is global —"},{"type":"text","text":" "},{"type":"text","text":"it isn’t possible for a type to conform to a protocol in two different ways"},{"type":"text","text":" "},{"type":"text","text":"within the same program."}]}],"type":"aside","name":"Note"},{"anchor":"Extensions","level":2,"type":"heading","text":"Extensions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can extend a class, structure, or enumeration in any access context"},{"type":"text","text":" "},{"type":"text","text":"in which the class, structure, or enumeration is available."},{"type":"text","text":" "},{"type":"text","text":"Any type members added in an extension have the same default access level as"},{"type":"text","text":" "},{"type":"text","text":"type members declared in the original type being extended."},{"type":"text","text":" "},{"type":"text","text":"If you extend a public or internal type, any new type members you add"},{"type":"text","text":" "},{"type":"text","text":"have a default access level of internal."},{"type":"text","text":" "},{"type":"text","text":"If you extend a file-private type, any new type members you add"},{"type":"text","text":" "},{"type":"text","text":"have a default access level of file private."},{"type":"text","text":" "},{"type":"text","text":"If you extend a private type, any new type members you add"},{"type":"text","text":" "},{"type":"text","text":"have a default access level of private."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, you can mark an extension with an explicit access-level modifier"},{"type":"text","text":" "},{"type":"text","text":"(for example, "},{"type":"codeVoice","code":"private"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to set a new default access level for all members defined within the extension."},{"type":"text","text":" "},{"type":"text","text":"This new default can still be overridden within the extension"},{"type":"text","text":" "},{"type":"text","text":"for individual type members."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t provide an explicit access-level modifier for an extension"},{"type":"text","text":" "},{"type":"text","text":"if you’re using that extension to add protocol conformance."},{"type":"text","text":" "},{"type":"text","text":"Instead, the protocol’s own access level is used to provide"},{"type":"text","text":" "},{"type":"text","text":"the default access level for each protocol requirement implementation within the extension."}]},{"anchor":"Private-Members-in-Extensions","level":3,"type":"heading","text":"Private Members in Extensions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions that are in the same file as"},{"type":"text","text":" "},{"type":"text","text":"the class, structure, or enumeration that they extend"},{"type":"text","text":" "},{"type":"text","text":"behave as if the code in the extension"},{"type":"text","text":" "},{"type":"text","text":"had been written as part of the original type’s declaration."},{"type":"text","text":" "},{"type":"text","text":"As a result, you can:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a private member in the original declaration,"},{"type":"text","text":" "},{"type":"text","text":"and access that member from extensions in the same file."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a private member in one extension,"},{"type":"text","text":" "},{"type":"text","text":"and access that member from another extension in the same file."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a private member in an extension,"},{"type":"text","text":" "},{"type":"text","text":"and access that member from the original declaration in the same file."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This behavior means you can use extensions in the same way"},{"type":"text","text":" "},{"type":"text","text":"to organize your code,"},{"type":"text","text":" "},{"type":"text","text":"whether or not your types have private entities."},{"type":"text","text":" "},{"type":"text","text":"For example, given the following simple protocol:"}]},{"type":"codeListing","syntax":"swift","code":["protocol SomeProtocol {","    func doSomething()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use an extension to add protocol conformance, like this:"}]},{"type":"codeListing","syntax":"swift","code":["struct SomeStruct {","    private var privateVariable = 12","}","","extension SomeStruct: SomeProtocol {","    func doSomething() {","        print(privateVariable)","    }","}"]},{"anchor":"Generics","level":2,"type":"heading","text":"Generics"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access level for a generic type or generic function is"},{"type":"text","text":" "},{"type":"text","text":"the minimum of the access level of the generic type or function itself"},{"type":"text","text":" "},{"type":"text","text":"and the access level of any type constraints on its type parameters."}]},{"anchor":"Type-Aliases","level":2,"type":"heading","text":"Type Aliases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any type aliases you define are treated as distinct types for the purposes of access control."},{"type":"text","text":" "},{"type":"text","text":"A type alias can have an access level less than or equal to the access level of the type it aliases."},{"type":"text","text":" "},{"type":"text","text":"For example, a private type alias can alias a private, file-private, internal, public, or open type,"},{"type":"text","text":" "},{"type":"text","text":"but a public type alias can’t alias an internal, file-private, or private type."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This rule also applies to type aliases for associated types used to satisfy protocol conformances."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/accesscontrol"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Access Control","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Required-Initializers":{"abstract":[],"title":"Required Initializers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers","url":"\/documentation\/the-swift-programming-language\/initialization#Required-Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl#Default-Access-Levels":{"abstract":[],"title":"Default Access Levels","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Default-Access-Levels","url":"\/documentation\/the-swift-programming-language\/accesscontrol#Default-Access-Levels"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl#Subclassing":{"abstract":[],"title":"Subclassing","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Subclassing","url":"\/documentation\/the-swift-programming-language\/accesscontrol#Subclassing"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl#Custom-Types":{"abstract":[],"title":"Custom Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Custom-Types","url":"\/documentation\/the-swift-programming-language\/accesscontrol#Custom-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"}}}