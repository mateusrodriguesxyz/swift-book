{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some operations"},{"type":"text","text":" "},{"type":"text","text":"aren’t guaranteed to always complete execution or produce a useful output."},{"type":"text","text":" "},{"type":"text","text":"Optionals are used to represent the absence of a value,"},{"type":"text","text":" "},{"type":"text","text":"but when an operation fails,"},{"type":"text","text":" "},{"type":"text","text":"it’s often useful to understand what caused the failure,"},{"type":"text","text":" "},{"type":"text","text":"so that your code can respond accordingly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider the task of reading and processing data from a file on disk."},{"type":"text","text":" "},{"type":"text","text":"There are a number of ways this task can fail, including"},{"type":"text","text":" "},{"type":"text","text":"the file not existing at the specified path,"},{"type":"text","text":" "},{"type":"text","text":"the file not having read permissions, or"},{"type":"text","text":" "},{"type":"text","text":"the file not being encoded in a compatible format."},{"type":"text","text":" "},{"type":"text","text":"Distinguishing among these different situations"},{"type":"text","text":" "},{"type":"text","text":"allows a program to resolve some errors"},{"type":"text","text":" "},{"type":"text","text":"and to communicate to the user any errors it can’t resolve."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Error handling in Swift interoperates with error handling patterns"},{"type":"text","text":" "},{"type":"text","text":"that use the "},{"type":"codeVoice","code":"NSError"},{"type":"text","text":" class in Cocoa and Objective-C."},{"type":"text","text":" "},{"type":"text","text":"For more information about this class,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Representing-and-Throwing-Errors","level":2,"type":"heading","text":"Representing and Throwing Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, errors are represented by"},{"type":"text","text":" "},{"type":"text","text":"values of types that conform to the "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"This empty protocol indicates that a type"},{"type":"text","text":" "},{"type":"text","text":"can be used for error handling."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift enumerations are particularly well suited to modeling"},{"type":"text","text":" "},{"type":"text","text":"a group of related error conditions,"},{"type":"text","text":" "},{"type":"text","text":"with associated values allowing for additional information"},{"type":"text","text":" "},{"type":"text","text":"about the nature of an error to be communicated."},{"type":"text","text":" "},{"type":"text","text":"For example, here’s how you might represent the error conditions"},{"type":"text","text":" "},{"type":"text","text":"of operating a vending machine inside a game:"}]},{"type":"codeListing","syntax":"swift","code":["enum VendingMachineError: Error {","    case invalidSelection","    case insufficientFunds(coinsNeeded: Int)","    case outOfStock","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing an error lets you indicate that something unexpected happened"},{"type":"text","text":" "},{"type":"text","text":"and the normal flow of execution can’t continue."},{"type":"text","text":" "},{"type":"text","text":"You use a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement to throw an error."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the following code throws an error to indicate"},{"type":"text","text":" "},{"type":"text","text":"that five additional coins are needed by the vending machine:"}]},{"type":"codeListing","syntax":"swift","code":["throw VendingMachineError.insufficientFunds(coinsNeeded: 5)"]},{"anchor":"Handling-Errors","level":2,"type":"heading","text":"Handling Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When an error is thrown,"},{"type":"text","text":" "},{"type":"text","text":"some surrounding piece of code must be responsible"},{"type":"text","text":" "},{"type":"text","text":"for handling the error —"},{"type":"text","text":" "},{"type":"text","text":"for example, by correcting the problem,"},{"type":"text","text":" "},{"type":"text","text":"trying an alternative approach,"},{"type":"text","text":" "},{"type":"text","text":"or informing the user of the failure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are four ways to handle errors in Swift."},{"type":"text","text":" "},{"type":"text","text":"You can propagate the error from a function to the code that calls that function,"},{"type":"text","text":" "},{"type":"text","text":"handle the error using a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"handle the error as an optional value,"},{"type":"text","text":" "},{"type":"text","text":"or assert that the error will not occur."},{"type":"text","text":" "},{"type":"text","text":"Each approach is described in a section below."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a function throws an error,"},{"type":"text","text":" "},{"type":"text","text":"it changes the flow of your program,"},{"type":"text","text":" "},{"type":"text","text":"so it’s important that you can quickly identify places in your code that can throw errors."},{"type":"text","text":" "},{"type":"text","text":"To identify these places in your code, write the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" keyword —"},{"type":"text","text":" "},{"type":"text","text":"or the "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"try!"},{"type":"text","text":" variation —"},{"type":"text","text":" "},{"type":"text","text":"before a piece of code that calls a function, method, or initializer that can throw an error."},{"type":"text","text":" "},{"type":"text","text":"These keywords are described in the sections below."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Error handling in Swift resembles exception handling in other languages,"},{"type":"text","text":" "},{"type":"text","text":"with the use of the "},{"type":"codeVoice","code":"try"},{"type":"text","text":", "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" and "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" keywords."},{"type":"text","text":" "},{"type":"text","text":"Unlike exception handling in many languages —"},{"type":"text","text":" "},{"type":"text","text":"including Objective-C —"},{"type":"text","text":" "},{"type":"text","text":"error handling in Swift doesn’t involve unwinding the call stack,"},{"type":"text","text":" "},{"type":"text","text":"a process that can be computationally expensive."},{"type":"text","text":" "},{"type":"text","text":"As such, the performance characteristics"},{"type":"text","text":" "},{"type":"text","text":"of a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"are comparable to those of a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement."}]}],"type":"aside","name":"Note"},{"anchor":"Propagating-Errors-Using-Throwing-Functions","level":3,"type":"heading","text":"Propagating Errors Using Throwing Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To indicate that a function, method, or initializer can throw an error,"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword in the function’s declaration"},{"type":"text","text":" "},{"type":"text","text":"after its parameters."},{"type":"text","text":" "},{"type":"text","text":"A function marked with "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"throwing function"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the function specifies a return type,"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword before the return arrow ("},{"type":"codeVoice","code":"->"},{"type":"text","text":")."}]},{"type":"codeListing","syntax":"swift","code":["func canThrowErrors() throws -> String","","func cannotThrowErrors() -> String"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A throwing function propagates errors that are thrown inside of it"},{"type":"text","text":" "},{"type":"text","text":"to the scope from which it’s called."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only throwing functions can propagate errors."},{"type":"text","text":" "},{"type":"text","text":"Any errors thrown inside a nonthrowing function"},{"type":"text","text":" "},{"type":"text","text":"must be handled inside the function."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example below,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"VendingMachine"},{"type":"text","text":" class has a "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"that throws an appropriate "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" "},{"type":"text","text":"if the requested item isn’t available,"},{"type":"text","text":" "},{"type":"text","text":"is out of stock,"},{"type":"text","text":" "},{"type":"text","text":"or has a cost that exceeds the current deposited amount:"}]},{"type":"codeListing","syntax":"swift","code":["struct Item {","   var price: Int","   var count: Int","}","","class VendingMachine {","    var inventory = [","        \"Candy Bar\": Item(price: 12, count: 7),","        \"Chips\": Item(price: 10, count: 4),","        \"Pretzels\": Item(price: 7, count: 11)","    ]","    var coinsDeposited = 0","","    func vend(itemNamed name: String) throws {","        guard let item = inventory[name] else {","            throw VendingMachineError.invalidSelection","        }","","        guard item.count > 0 else {","            throw VendingMachineError.outOfStock","        }","","        guard item.price <= coinsDeposited else {","            throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)","        }","","        coinsDeposited -= item.price","","        var newItem = item","        newItem.count -= 1","        inventory[name] = newItem","","        print(\"Dispensing \\(name)\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation of the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"uses "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statements to exit the method early and throw appropriate errors"},{"type":"text","text":" "},{"type":"text","text":"if any of the requirements for purchasing a snack aren’t met."},{"type":"text","text":" "},{"type":"text","text":"Because a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement immediately transfers program control,"},{"type":"text","text":" "},{"type":"text","text":"an item will be vended only if all of these requirements are met."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method propagates any errors it throws,"},{"type":"text","text":" "},{"type":"text","text":"any code that calls this method must either handle the errors —"},{"type":"text","text":" "},{"type":"text","text":"using a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement, "},{"type":"codeVoice","code":"try?"},{"type":"text","text":", or "},{"type":"codeVoice","code":"try!"},{"type":"text","text":"—"},{"type":"text","text":" "},{"type":"text","text":"or continue to propagate them."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" in the example below"},{"type":"text","text":" "},{"type":"text","text":"is also a throwing function,"},{"type":"text","text":" "},{"type":"text","text":"and any errors that the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method throws will"},{"type":"text","text":" "},{"type":"text","text":"propagate up to the point where the "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" function is called."}]},{"type":"codeListing","syntax":"swift","code":["let favoriteSnacks = [","    \"Alice\": \"Chips\",","    \"Bob\": \"Licorice\",","    \"Eve\": \"Pretzels\",","]","func buyFavoriteSnack(person: String, vendingMachine: VendingMachine) throws {","    let snackName = favoriteSnacks[person] ?? \"Candy Bar\"","    try vendingMachine.vend(itemNamed: snackName)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buyFavoriteSnack(person: vendingMachine:)"},{"type":"text","text":" function looks up a given person’s favorite snack"},{"type":"text","text":" "},{"type":"text","text":"and tries to buy it for them by calling the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"Because the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method can throw an error,"},{"type":"text","text":" "},{"type":"text","text":"it’s called with the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" keyword in front of it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing initializers can propagate errors in the same way as throwing functions."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the initializer for the "},{"type":"codeVoice","code":"PurchasedSnack"},{"type":"text","text":" structure in the listing below"},{"type":"text","text":" "},{"type":"text","text":"calls a throwing function as part of the initialization process,"},{"type":"text","text":" "},{"type":"text","text":"and it handles any errors that it encounters by propagating them to its caller."}]},{"type":"codeListing","syntax":"swift","code":["struct PurchasedSnack {","    let name: String","    init(name: String, vendingMachine: VendingMachine) throws {","        try vendingMachine.vend(itemNamed: name)","        self.name = name","    }","}"]},{"anchor":"Handling-Errors-Using-Do-Catch","level":3,"type":"heading","text":"Handling Errors Using Do-Catch"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement to handle errors"},{"type":"text","text":" "},{"type":"text","text":"by running a block of code."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown by the code in the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" clause,"},{"type":"text","text":" "},{"type":"text","text":"it’s matched against the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses"},{"type":"text","text":" "},{"type":"text","text":"to determine which one of them can handle the error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is the general form of a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement:"}]},{"type":"codeListing","syntax":"markdown","code":["do {","    try <#expression#>","    <#statements#>","} catch <#pattern 1#> {","    <#statements#>","} catch <#pattern 2#> where <#condition#> {","    <#statements#>","} catch <#pattern 3#>, <#pattern 4#> where <#condition#> {","    <#statements#>","} catch {","    <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write a pattern after "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" to indicate what errors"},{"type":"text","text":" "},{"type":"text","text":"that clause can handle."},{"type":"text","text":" "},{"type":"text","text":"If a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause doesn’t have a pattern,"},{"type":"text","text":" "},{"type":"text","text":"the clause matches any error"},{"type":"text","text":" "},{"type":"text","text":"and binds the error to a local constant named "},{"type":"codeVoice","code":"error"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For more information about pattern matching,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following code matches against all three cases"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" enumeration."}]},{"type":"codeListing","syntax":"swift","code":["var vendingMachine = VendingMachine()","vendingMachine.coinsDeposited = 8","do {","    try buyFavoriteSnack(person: \"Alice\", vendingMachine: vendingMachine)","    print(\"Success! Yum.\")","} catch VendingMachineError.invalidSelection {","    print(\"Invalid Selection.\")","} catch VendingMachineError.outOfStock {","    print(\"Out of Stock.\")","} catch VendingMachineError.insufficientFunds(let coinsNeeded) {","    print(\"Insufficient funds. Please insert an additional \\(coinsNeeded) coins.\")","} catch {","    print(\"Unexpected error: \\(error).\")","}","\/\/ Prints \"Insufficient funds. Please insert an additional 2 coins.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" function is called in a "},{"type":"codeVoice","code":"try"},{"type":"text","text":" expression,"},{"type":"text","text":" "},{"type":"text","text":"because it can throw an error."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown,"},{"type":"text","text":" "},{"type":"text","text":"execution immediately transfers to the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses,"},{"type":"text","text":" "},{"type":"text","text":"which decide whether to allow propagation to continue."},{"type":"text","text":" "},{"type":"text","text":"If no pattern is matched, the error gets caught by the final "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" "},{"type":"text","text":"clause and is bound to a local "},{"type":"codeVoice","code":"error"},{"type":"text","text":" constant."},{"type":"text","text":" "},{"type":"text","text":"If no error is thrown,"},{"type":"text","text":" "},{"type":"text","text":"the remaining statements in the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement are executed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses don’t have to handle every possible error"},{"type":"text","text":" "},{"type":"text","text":"that the code in the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" clause can throw."},{"type":"text","text":" "},{"type":"text","text":"If none of the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses handle the error,"},{"type":"text","text":" "},{"type":"text","text":"the error propagates to the surrounding scope."},{"type":"text","text":" "},{"type":"text","text":"However, the propagated error"},{"type":"text","text":" "},{"type":"text","text":"must be handled by "},{"type":"emphasis","inlineContent":[{"type":"text","text":"some"}]},{"type":"text","text":" surrounding scope."},{"type":"text","text":" "},{"type":"text","text":"In a nonthrowing function,"},{"type":"text","text":" "},{"type":"text","text":"an enclosing "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"must handle the error."},{"type":"text","text":" "},{"type":"text","text":"In a throwing function,"},{"type":"text","text":" "},{"type":"text","text":"either an enclosing "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"or the caller"},{"type":"text","text":" "},{"type":"text","text":"must handle the error."},{"type":"text","text":" "},{"type":"text","text":"If the error propagates to the top-level scope"},{"type":"text","text":" "},{"type":"text","text":"without being handled,"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a runtime error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the above example can be written so any"},{"type":"text","text":" "},{"type":"text","text":"error that isn’t a "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" is instead"},{"type":"text","text":" "},{"type":"text","text":"caught by the calling function:"}]},{"type":"codeListing","syntax":"swift","code":["func nourish(with item: String) throws {","    do {","        try vendingMachine.vend(itemNamed: item)","    } catch is VendingMachineError {","        print(\"Couldn't buy that from the vending machine.\")","    }","}","","do {","    try nourish(with: \"Beet-Flavored Chips\")","} catch {","    print(\"Unexpected non-vending-machine-related error: \\(error)\")","}","\/\/ Prints \"Couldn't buy that from the vending machine.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"nourish(with:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"if "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" throws an error that’s"},{"type":"text","text":" "},{"type":"text","text":"one of the cases of the "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" enumeration,"},{"type":"text","text":" "},{"type":"codeVoice","code":"nourish(with:)"},{"type":"text","text":" handles the error by printing a message."},{"type":"text","text":" "},{"type":"text","text":"Otherwise,"},{"type":"text","text":" "},{"type":"codeVoice","code":"nourish(with:)"},{"type":"text","text":" propagates the error to its call site."},{"type":"text","text":" "},{"type":"text","text":"The error is then caught by the general "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another way to catch several related errors"},{"type":"text","text":" "},{"type":"text","text":"is to list them after "},{"type":"codeVoice","code":"catch"},{"type":"text","text":", separated by commas."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["func eat(item: String) throws {","    do {","        try vendingMachine.vend(itemNamed: item)","    } catch VendingMachineError.invalidSelection, VendingMachineError.insufficientFunds, VendingMachineError.outOfStock {","        print(\"Invalid selection, out of stock, or not enough money.\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"eat(item:)"},{"type":"text","text":" function lists the vending machine errors to catch,"},{"type":"text","text":" "},{"type":"text","text":"and its error text corresponds to the items in that list."},{"type":"text","text":" "},{"type":"text","text":"If any of the three listed errors are thrown,"},{"type":"text","text":" "},{"type":"text","text":"this "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause handles them by printing a message."},{"type":"text","text":" "},{"type":"text","text":"Any other errors are propagated to the surrounding scope,"},{"type":"text","text":" "},{"type":"text","text":"including any vending-machine errors that might be added later."}]},{"anchor":"Converting-Errors-to-Optional-Values","level":3,"type":"heading","text":"Converting Errors to Optional Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" to handle an error by converting it to an optional value."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown while evaluating the "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" expression,"},{"type":"text","text":" "},{"type":"text","text":"the value of the expression is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"in the following code "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" have the same value and behavior:"}]},{"type":"codeListing","syntax":"swift","code":["func someThrowingFunction() throws -> Int {","   \/\/ ...","}","","let x = try? someThrowingFunction()","","let y: Int?","do {","    y = try someThrowingFunction()","} catch {","    y = nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"someThrowingFunction()"},{"type":"text","text":" throws an error,"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the value of "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" is the value that the function returned."},{"type":"text","text":" "},{"type":"text","text":"Note that "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" are an optional of whatever type "},{"type":"codeVoice","code":"someThrowingFunction()"},{"type":"text","text":" returns."},{"type":"text","text":" "},{"type":"text","text":"Here the function returns an integer, so "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" are optional integers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" lets you write concise error handling code"},{"type":"text","text":" "},{"type":"text","text":"when you want to handle all errors in the same way."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the following code"},{"type":"text","text":" "},{"type":"text","text":"uses several approaches to fetch data,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if all of the approaches fail."}]},{"type":"codeListing","syntax":"swift","code":["func fetchData() -> Data? {","    if let data = try? fetchDataFromDisk() { return data }","    if let data = try? fetchDataFromServer() { return data }","    return nil","}"]},{"anchor":"Disabling-Error-Propagation","level":3,"type":"heading","text":"Disabling Error Propagation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes you know a throwing function or method"},{"type":"text","text":" "},{"type":"text","text":"won’t, in fact, throw an error at runtime."},{"type":"text","text":" "},{"type":"text","text":"On those occasions,"},{"type":"text","text":" "},{"type":"text","text":"you can write "},{"type":"codeVoice","code":"try!"},{"type":"text","text":" before the expression to disable error propagation"},{"type":"text","text":" "},{"type":"text","text":"and wrap the call in a runtime assertion that no error will be thrown."},{"type":"text","text":" "},{"type":"text","text":"If an error actually is thrown, you’ll get a runtime error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following code uses a "},{"type":"codeVoice","code":"loadImage(atPath:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"which loads the image resource at a given path"},{"type":"text","text":" "},{"type":"text","text":"or throws an error if the image can’t be loaded."},{"type":"text","text":" "},{"type":"text","text":"In this case, because the image is shipped with the application,"},{"type":"text","text":" "},{"type":"text","text":"no error will be thrown at runtime,"},{"type":"text","text":" "},{"type":"text","text":"so it’s appropriate to disable error propagation."}]},{"type":"codeListing","syntax":"swift","code":["let photo = try! loadImage(atPath: \".\/Resources\/John Appleseed.jpg\")"]},{"anchor":"Specifying-Cleanup-Actions","level":2,"type":"heading","text":"Specifying Cleanup Actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement to execute a set of statements"},{"type":"text","text":" "},{"type":"text","text":"just before code execution leaves the current block of code."},{"type":"text","text":" "},{"type":"text","text":"This statement lets you do any necessary cleanup"},{"type":"text","text":" "},{"type":"text","text":"that should be performed regardless"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"how"}]},{"type":"text","text":" execution leaves the current block of code —"},{"type":"text","text":" "},{"type":"text","text":"whether it leaves because an error was thrown"},{"type":"text","text":" "},{"type":"text","text":"or because of a statement such as "},{"type":"codeVoice","code":"return"},{"type":"text","text":" or "},{"type":"codeVoice","code":"break"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example, you can use a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to ensure that file descriptors are closed"},{"type":"text","text":" "},{"type":"text","text":"and manually allocated memory is freed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement defers execution until the current scope is exited."},{"type":"text","text":" "},{"type":"text","text":"This statement consists of the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" keyword and the statements to be executed later."},{"type":"text","text":" "},{"type":"text","text":"The deferred statements may not contain any code"},{"type":"text","text":" "},{"type":"text","text":"that would transfer control out of the statements,"},{"type":"text","text":" "},{"type":"text","text":"such as a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" or a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"or by throwing an error."},{"type":"text","text":" "},{"type":"text","text":"Deferred actions are executed in the reverse of"},{"type":"text","text":" "},{"type":"text","text":"the order that they’re written in your source code."},{"type":"text","text":" "},{"type":"text","text":"That is, the code in the first "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement executes last,"},{"type":"text","text":" "},{"type":"text","text":"the code in the second "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement executes second to last,"},{"type":"text","text":" "},{"type":"text","text":"and so on."},{"type":"text","text":" "},{"type":"text","text":"The last "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement in source code order executes first."}]},{"type":"codeListing","syntax":"swift","code":["func processFile(filename: String) throws {","   if exists(filename) {","      let file = open(filename)","      defer {","         close(file)","      }","      while let line = try file.readline() {","         \/\/ Work with the file.","      }","      \/\/ close(file) is called here, at the end of the scope.","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above example uses a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to ensure that the "},{"type":"codeVoice","code":"open(_:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"has a corresponding call to "},{"type":"codeVoice","code":"close(_:)"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"even when no error handling code is involved."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/errorhandling"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Error Handling","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"role":"article","title":"Patterns","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" represents the structure of a single value"},{"type":"text","text":" "},{"type":"text","text":"or a composite value."},{"type":"text","text":" "},{"type":"text","text":"For example, the structure of a tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" is a comma-separated list of two"},{"type":"text","text":" "},{"type":"text","text":"elements. Because patterns represent the structure of a value rather than any"},{"type":"text","text":" "},{"type":"text","text":"one particular value, you can match them with a variety of values."},{"type":"text","text":" "},{"type":"text","text":"For instance, the pattern "},{"type":"codeVoice","code":"(x, y)"},{"type":"text","text":" matches the tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" and any other"},{"type":"text","text":" "},{"type":"text","text":"two-element tuple. In addition to matching a pattern with a value,"},{"type":"text","text":" "},{"type":"text","text":"you can extract part or all of a composite value and bind each part"},{"type":"text","text":" "},{"type":"text","text":"to a constant or variable name."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"https://developer.apple.com/documentation/swift/cocoa_design_patterns/handling_cocoa_errors_in_swift":{"title":"Handling Cocoa Errors in Swift","titleInlineContent":[{"type":"text","text":"Handling Cocoa Errors in Swift"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift","url":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"}}}