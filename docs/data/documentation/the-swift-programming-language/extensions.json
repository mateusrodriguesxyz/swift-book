{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensões no Swift podem:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adicionar propriedades de instância computadas e propriedades de tipo computado"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Definir métodos de instância e métodos de tipo"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Fornecer novos inicializadores"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Definir subscritos"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Definir e usar novos tipos aninhados"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deixar um tipo existente em conformidade com um protocolo"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Em Swift, você pode, inclusive, estender um protocolo para fornecer implementações de seus requisitos"},{"type":"text","text":" "},{"type":"text","text":"ou adicionar funcionalidades extras que os tipos em conformidade podem aproveitar. Para mais detalhes, consulte "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As extensões podem adicionar novas funcionalidades a um tipo, mas eles não podem substituir a funcionalidade existente."}]}],"type":"aside","name":"Nota"},{"anchor":"Sintaxe-de-Extensão","level":2,"type":"heading","text":"Sintaxe de Extensão"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare extensões com a palavra-chave "},{"type":"codeVoice","code":"extension"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["extension SomeType {","   \/\/ nova funcionalidade para adicionar a 'SomeType' vai aqui","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Uma extensão pode estender um tipo existente para que ele adote um ou mais protocolos. Para adicionar conformidade de protocolo, você escreve os nomes dos protocolos da mesma maneira que você os escreve para uma classe ou estrutura:"}]},{"type":"codeListing","syntax":"swift","code":["extension SomeType: SomeProtocol, AnotherProtocol {","   \/\/ implementação de requisitos do protocolo vai aqui","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A adição de conformidade de protocolo dessa maneira é descrita em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adding-Protocol-Conformance-with-an-Extension"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Uma extensão pode ser usada para estender um tipo genérico existente, como descrito em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Você também pode estender um tipo genérico para adicionar funcionalidade condicionalmente, conforme descrito em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você definir uma extensão para adicionar uma nova funcionalidade a um tipo existente, a nova funcionalidade estará disponível em todas as instâncias existentes desse tipo, mesmo que tenham sido criadas antes da definição da extensão."}]}],"type":"aside","name":"Nota"},{"anchor":"Propriedades-Computadas","level":2,"type":"heading","text":"Propriedades Computadas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensões podem adicionar propriedades computadas de instância e propriedades computadas de tipo a tipos existentes."},{"type":"text","text":" "},{"type":"text","text":"Este exemplo adiciona cinco propriedades computadas de instância ao tipo primitivo "},{"type":"codeVoice","code":"_Double_"},{"type":"text","text":" do Swift,"},{"type":"text","text":" "},{"type":"text","text":"para fornecer suporte básico para trabalhar com unidades de distância:"}]},{"type":"codeListing","syntax":"swift","code":["extension Double {","   var km: Double { return self * 1_000.0 }","   var m: Double { return self }","   var cm: Double { return self \/ 100.0 }","   var mm: Double { return self \/ 1_000.0 }","   var ft: Double { return self \/ 3.28084 }","}","let oneInch = 25.4.mm","print(\"Uma polegada é \\(oneInch) metros\")","\/\/ imprime \"Uma polegada é 0.0254 metros\"","let threeFeet = 3.ft","print(\"Três pés é \\(threeFeet) metros\")","\/\/ Imprime \"Três pés é 0.914399970739201 metros\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Estas propriedades computadas expressam que o valor de um "},{"type":"codeVoice","code":"_Double_"},{"type":"text","text":" "},{"type":"text","text":"deve ser considerado como uma certa unidade de comprimento."},{"type":"text","text":" "},{"type":"text","text":"Apesar de serem implementadas como propriedades computadas,"},{"type":"text","text":" "},{"type":"text","text":"os nomes destas propriedades podem ser anexados a um"},{"type":"text","text":" "},{"type":"text","text":"literal de ponto flutuante com sintaxe de ponto,"},{"type":"text","text":" "},{"type":"text","text":"como uma forma de usar aquele valor literal para realizar conversões de distância."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Neste exemplo, um "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" de valor "},{"type":"codeVoice","code":"1.0"},{"type":"text","text":" é coonsiderado para representar “um metro”."},{"type":"text","text":" "},{"type":"text","text":"E é por isso que a propriedade computada "},{"type":"codeVoice","code":"m"},{"type":"text","text":" reforta "},{"type":"codeVoice","code":"self"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"a expressão "},{"type":"codeVoice","code":"1.m"},{"type":"text","text":" é considerada para calcular um "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"de valor "},{"type":"codeVoice","code":"1.0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Outras unidades requerem alguma conversão para serem expressas como um valor medido em metros."},{"type":"text","text":" "},{"type":"text","text":"Um quilometro é mesma coisa de 1.000 metros,"},{"type":"text","text":" "},{"type":"text","text":"então a propriedade computada "},{"type":"codeVoice","code":"km"},{"type":"text","text":" multiplica o valor por "},{"type":"codeVoice","code":"1_000.00"},{"type":"text","text":" "},{"type":"text","text":"para convertê-lo em um numero expresso em metros."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, temos 3,28084 pés em metros,"},{"type":"text","text":" "},{"type":"text","text":"e então a propriedade computada "},{"type":"codeVoice","code":"ft"},{"type":"text","text":" divide o valor “Double” subjacente"},{"type":"text","text":" "},{"type":"text","text":"por  "},{"type":"codeVoice","code":"3.28084"},{"type":"text","text":" para convertê-lo de pés para metros."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Essas propriedades são propriedades computadas apenas para leitura,"},{"type":"text","text":" "},{"type":"text","text":"então elas são expressadas sem a palavra-chave "},{"type":"codeVoice","code":"_get_"},{"type":"text","text":", para fins de abreviação."},{"type":"text","text":" "},{"type":"text","text":"Seu retorno é do tipo "},{"type":"codeVoice","code":"_Double_"},{"type":"text","text":" e pode ser"},{"type":"text","text":" "},{"type":"text","text":"usado dentro de cálculos matemáticos sempre que um "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" é aceito:"}]},{"type":"codeListing","syntax":"swift","code":["let aMarathon = 42.km + 195.m","print(\"A maratona é de \\(aMarathon) metros\")","\/\/ imprime \"A maratona é de 42195.0 metros\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensões podem adicionar novas propriedades computadas, mas não podem adicionar"},{"type":"text","text":" "},{"type":"text","text":"propriedades guardadas, ou adicionar observadores em propriedades existentes."}]}],"type":"aside","name":"Note"},{"anchor":"Inicializadores","level":2,"type":"heading","text":"Inicializadores"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensões podem adicionar novos inicializadores a tipos existentes."},{"type":"text","text":" "},{"type":"text","text":"Isso permite você extender outros tipos para aceitar"},{"type":"text","text":" "},{"type":"text","text":"seus próprios tipos personalizados como parâmetros de inicialização,"},{"type":"text","text":" "},{"type":"text","text":"ou então para providenciar opções adicionais de inicialização"},{"type":"text","text":" "},{"type":"text","text":"que antes não eram parte da implementação original do tipo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensões podem adicionar novos inicializadores de conveniência a uma classe,"},{"type":"text","text":" "},{"type":"text","text":"mas eles não podem adicionar nosos inicializadores designados ou desinicializadores a uma classe."},{"type":"text","text":" "},{"type":"text","text":"Inicializadores designados e desinicializadores"},{"type":"text","text":" "},{"type":"text","text":"devem sempre ser providenciados pela implementação original da classe."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você usa uma extensão para adicionar um inicializador a um tipo de valor que"},{"type":"text","text":" "},{"type":"text","text":"provê valores padrões para todas as suas propriedades armazenadas"},{"type":"text","text":" "},{"type":"text","text":"e não define nenhum inicializador customizado,"},{"type":"text","text":" "},{"type":"text","text":"você pode chamar o inicializador padrão e inicializador "},{"type":"emphasis","inlineContent":[{"type":"text","text":"memberwise"}]},{"type":"text","text":"  para o"},{"type":"text","text":" "},{"type":"text","text":"tipo de valor de dentro de seu inicializador da extensão."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Este não seria o caso se você tivesse escrito o inicializador"},{"type":"text","text":" "},{"type":"text","text":"como parte da implementação original do tipo de valor,"},{"type":"text","text":" "},{"type":"text","text":"como descrito em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você usa uma extensão para adicionar um inicializador a uma estrutura"},{"type":"text","text":" "},{"type":"text","text":"que foi declarada em outro módulo,"},{"type":"text","text":" "},{"type":"text","text":"o novo inicializador não pode acessar "},{"type":"codeVoice","code":"self"},{"type":"text","text":" até"},{"type":"text","text":" "},{"type":"text","text":"ele chamar um inicializador do módulo definidor."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O exemplo abaixo define uma estrutura "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" customizada para representar um retângulo geométrico."},{"type":"text","text":" "},{"type":"text","text":"O exemplo também define duas estrutura de suporte chamadas "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" e "},{"type":"codeVoice","code":"Point"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Ambos provêm valores padrões de "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" para todas as suas propriedades:"}]},{"type":"codeListing","syntax":"swift","code":["struct Size {","   var width = 0.0, height = 0.0","}","struct Point {","   var x = 0.0, y = 0.0","}","struct Rect {","   var origin = Point()","   var size = Size()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Por causa da estrutura "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" prover valores padrões para todas as suas propriedades,"},{"type":"text","text":" "},{"type":"text","text":"ela recebe um inicializador padrão e um inicializador "},{"type":"emphasis","inlineContent":[{"type":"text","text":"memberwise"}]},{"type":"text","text":" automaticamente,"},{"type":"text","text":" "},{"type":"text","text":"como descrito em "},{"type":"text","text":"doc:Initialization#Default-Initializers"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Estes inicializadores podem ser usados para criar novas instâncias "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let defaultRect = Rect()","let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),","   size: Size(width: 5.0, height: 5.0))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode extender a estrutura "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" para prover um inicializador adicional"},{"type":"text","text":" "},{"type":"text","text":"que recebe um tamanho e ponto central específico:"}]},{"type":"codeListing","syntax":"swift","code":["extension Rect {","   init(center: Point, size: Size) {","      let originX = center.x - (size.width \/ 2)","      let originY = center.y - (size.height \/ 2)","      self.init(origin: Point(x: originX, y: originY), size: size)","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esse novo inicializador inicia calculando um ponto de origem apropriados baseado"},{"type":"text","text":" "},{"type":"text","text":"no ponto "},{"type":"codeVoice","code":"center"},{"type":"text","text":" e valor "},{"type":"codeVoice","code":"size"},{"type":"text","text":" dados."},{"type":"text","text":" "},{"type":"text","text":"O inicializador então chama o inicializador "},{"type":"emphasis","inlineContent":[{"type":"text","text":"memberwise"}]},{"type":"text","text":" automático da estrutura "},{"type":"codeVoice","code":"init(origin:size:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"que armazena a nova origem e valor do tamanho nas propriedades adequadas:"}]},{"type":"codeListing","syntax":"swift","code":["let centerRect = Rect(center: Point(x: 4.0, y: 4.0),","   size: Size(width: 3.0, height: 3.0))","\/\/ centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"se você provê um novo inicializardor com uma extensão,"},{"type":"text","text":" "},{"type":"text","text":"você ainda é responsável por certificar-se que cada instância foi completamente inicializada"},{"type":"text","text":" "},{"type":"text","text":"uma vez que o inicializador tenha completado."}]}],"type":"aside","name":"Nome"},{"anchor":"Methods","level":2,"type":"heading","text":"Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new instance methods and type methods to existing types."},{"type":"text","text":" "},{"type":"text","text":"The following example adds a new instance method called "},{"type":"codeVoice","code":"repetitions"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type:"}]},{"type":"codeListing","syntax":"swift","code":["extension Int {","   func repetitions(task: () -> Void) {","      for _ in 0..<self {","         task()","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"repetitions(task:)"},{"type":"text","text":" method takes a single argument of type "},{"type":"codeVoice","code":"() -> Void"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which indicates a function that has no parameters and doesn’t return a value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After defining this extension,"},{"type":"text","text":" "},{"type":"text","text":"you can call the "},{"type":"codeVoice","code":"repetitions(task:)"},{"type":"text","text":" method on any integer"},{"type":"text","text":" "},{"type":"text","text":"to perform a task that many number of times:"}]},{"type":"codeListing","syntax":"swift","code":["3.repetitions {","   print(\"Hello!\")","}","\/\/ Hello!","\/\/ Hello!","\/\/ Hello!"]},{"anchor":"Mutating-Instance-Methods","level":3,"type":"heading","text":"Mutating Instance Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance methods added with an extension can also modify (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutate"}]},{"type":"text","text":") the instance itself."},{"type":"text","text":" "},{"type":"text","text":"Structure and enumeration methods that modify "},{"type":"codeVoice","code":"self"},{"type":"text","text":" or its properties"},{"type":"text","text":" "},{"type":"text","text":"must mark the instance method as "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"just like mutating methods from an original implementation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below adds a new mutating method called "},{"type":"codeVoice","code":"square"},{"type":"text","text":" to Swift’s "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"which squares the original value:"}]},{"type":"codeListing","syntax":"swift","code":["extension Int {","   mutating func square() {","      self = self * self","   }","}","var someInt = 3","someInt.square()","\/\/ someInt is now 9"]},{"anchor":"Subscripts","level":2,"type":"heading","text":"Subscripts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new subscripts to an existing type."},{"type":"text","text":" "},{"type":"text","text":"This example adds an integer subscript to Swift’s built-in "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"This subscript "},{"type":"codeVoice","code":"[n]"},{"type":"text","text":" returns the decimal digit "},{"type":"codeVoice","code":"n"},{"type":"text","text":" places in"},{"type":"text","text":" "},{"type":"text","text":"from the right of the number:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"123456789[0]"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"9"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"123456789[1]"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"8"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and so on:"}]},{"type":"codeListing","syntax":"swift","code":["extension Int {","   subscript(digitIndex: Int) -> Int {","      var decimalBase = 1","      for _ in 0..<digitIndex {","         decimalBase *= 10","      }","      return (self \/ decimalBase) % 10","   }","}","746381295[0]","\/\/ returns 5","746381295[1]","\/\/ returns 9","746381295[2]","\/\/ returns 2","746381295[8]","\/\/ returns 7"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value doesn’t have enough digits for the requested index,"},{"type":"text","text":" "},{"type":"text","text":"the subscript implementation returns "},{"type":"codeVoice","code":"0"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as if the number had been padded with zeros to the left:"}]},{"type":"codeListing","syntax":"swift","code":["746381295[9]","\/\/ returns 0, as if you had requested:","0746381295[9]"]},{"anchor":"Nested-Types","level":2,"type":"heading","text":"Nested Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new nested types to existing classes, structures, and enumerations:"}]},{"type":"codeListing","syntax":"swift","code":["extension Int {","   enum Kind {","      case negative, zero, positive","   }","   var kind: Kind {","      switch self {","         case 0:","            return .zero","         case let x where x > 0:","            return .positive","         default:","            return .negative","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example adds a new nested enumeration to "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This enumeration, called "},{"type":"codeVoice","code":"Kind"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"expresses the kind of number that a particular integer represents."},{"type":"text","text":" "},{"type":"text","text":"Specifically, it expresses whether the number is"},{"type":"text","text":" "},{"type":"text","text":"negative, zero, or positive."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also adds a new computed instance property to "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"kind"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns the appropriate "},{"type":"codeVoice","code":"Kind"},{"type":"text","text":" enumeration case for that integer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The nested enumeration can now be used with any "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value:"}]},{"type":"codeListing","syntax":"swift","code":["func printIntegerKinds(_ numbers: [Int]) {","   for number in numbers {","      switch number.kind {","         case .negative:","            print(\"- \", terminator: \"\")","         case .zero:","            print(\"0 \", terminator: \"\")","         case .positive:","            print(\"+ \", terminator: \"\")","      }","   }","   print(\"\")","}","printIntegerKinds([3, 19, -27, 0, -6, 0, 7])","\/\/ Prints \"+ + - 0 - 0 + \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function, "},{"type":"codeVoice","code":"printIntegerKinds(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"takes an input array of "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values and iterates over those values in turn."},{"type":"text","text":" "},{"type":"text","text":"For each integer in the array,"},{"type":"text","text":" "},{"type":"text","text":"the function considers the "},{"type":"codeVoice","code":"kind"},{"type":"text","text":" computed property for that integer,"},{"type":"text","text":" "},{"type":"text","text":"and prints an appropriate description."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"number.kind"},{"type":"text","text":" is already known to be of type "},{"type":"codeVoice","code":"Int.Kind"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because of this, all of the "},{"type":"codeVoice","code":"Int.Kind"},{"type":"text","text":" case values"},{"type":"text","text":" "},{"type":"text","text":"can be written in shorthand form inside the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":".negative"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"Int.Kind.negative"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/extensions"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Extensões","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Value-Types":{"abstract":[],"title":"Initializer Delegation for Value Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Value-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"abstract":[],"title":"Protocol Extensions","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"abstract":[],"title":"Extensions with a Generic Where Clause","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"abstract":[],"title":"Extending a Generic Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Adding-Protocol-Conformance-with-an-Extension":{"abstract":[],"title":"Adding Protocol Conformance with an Extension","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adding-Protocol-Conformance-with-an-Extension","url":"\/documentation\/the-swift-programming-language\/protocols#Adding-Protocol-Conformance-with-an-Extension"}}}