{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"CollectionTypes_intro"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays, sets e dicionários em Swift são sempre claros sobre os tipos de valores e chaves que podem armazenar. Isso significa que você não pode inserir um valor do tipo errado em uma coleção por engano. Isso também significa que você pode ter certeza sobre o tipo de valores que recuperará de uma coleção."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Os tipos de array, sets e dicionário em Swift são implementados como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"coleções genéricas"}]},{"type":"text","text":". Para saber mais sobre tipos genéricos e coleções, consulte "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"type":"text","text":"."}]}],"type":"aside","name":"Nota"},{"anchor":"Mutabilidade-de-Coleções","level":2,"type":"heading","text":"Mutabilidade de Coleções"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você criar um array, um set ou um dicionário e atribuí-lo a uma variável, a coleção criada será "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutável"}]},{"type":"text","text":". Isso significa que você pode alterar (ou "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutar"}]},{"type":"text","text":") a coleção depois de criada adicionando, removendo ou alterando itens na coleção. Se você atribuir um array, um set ou um dicionário a uma constante,"},{"type":"text","text":" "},{"type":"text","text":"essa coleção é "},{"type":"emphasis","inlineContent":[{"type":"text","text":"imutável"}]},{"type":"text","text":" e seu tamanho e conteúdo não podem ser alterados."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"É uma boa prática criar coleções imutáveis em todos os casos em que a coleção não precisa ser alterada. Fazer isso torna mais fácil raciocinar sobre seu código e permite que o compilador Swift otimize o desempenho das coleções que você cria."}]}],"type":"aside","name":"Nota"},{"anchor":"Arrays","level":2,"type":"heading","text":"Arrays"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Um "},{"type":"emphasis","inlineContent":[{"type":"text","text":"array"}]},{"type":"text","text":" armazena valores do mesmo tipo em uma lista ordenada. O mesmo valor pode aparecer em um array várias vezes em posições diferentes."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"o tipo "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" de Swift é uma ponte para a classe "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" do Foundation. Para obter mais informações sobre como usar "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" com Foundation e Cocoa, consulte "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730"},{"type":"text","text":"."}]}],"type":"aside","name":"Nota"},{"anchor":"Sintaxe-Abreviada-de-Array","level":3,"type":"heading","text":"Sintaxe Abreviada de Array"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O tipo de um array Swift é escrito por completo como "},{"type":"codeVoice","code":"Array<Element>"},{"type":"text","text":", onde "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" é o tipo de valores que a array pode armazenar. Você também pode escrever o tipo de um array de forma abreviada como "},{"type":"codeVoice","code":"[Element]"},{"type":"text","text":". Embora as duas formas sejam funcionalmente idênticas, a forma abreviada é preferida e é usada ao longo deste guia ao se referir ao tipo de um array."}]},{"anchor":"Criando-um-Array-vazio","level":3,"type":"heading","text":"Criando um Array vazio"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode criar um array vazio de um determinado tipo usando a sintaxe de inicialização:"}]},{"type":"codeListing","syntax":"swift","code":["var someInts: [Int] = []","print(\"someInts is of type [Int] with \\(someInts.count) items.\")","\/\/ Imprime \"someInts is of type [Int] with 0 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note que o tipo da variável "},{"type":"codeVoice","code":"someInts"},{"type":"text","text":" é inferido como "},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":" a partir do tipo do inicializador."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternativamente, se o contexto já fornece informações de tipo, como um argumento de função ou uma variável ou constante já digitada, você pode criar um array vazio com um literal de array vazio, que é escrito como "},{"type":"codeVoice","code":"[]"},{"type":"text","text":" (um par vazio de colchetes):"}]},{"type":"codeListing","syntax":"swift","code":["someInts.append(3)","\/\/ someInts agora contém um valor do tipo Int","someInts = []","\/\/ someInts agora é uma array vazia, mas ainda é do tipo [Int]"]},{"anchor":"Criando-um-Array-com-um-Valor-Padrão","level":3,"type":"heading","text":"Criando um Array com um Valor Padrão"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O tipo "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" do Swift também fornece um inicializador para criar uma array de um determinado tamanho com todos os seus valores definidos como mesmo valor padrão. Você passa a esse inicializador um valor padrão do tipo apropriado (chamado "},{"type":"codeVoice","code":"repeating"},{"type":"text","text":") e o número de vezes que esse valor é repetido (chamado "},{"type":"codeVoice","code":"count"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["var threeDoubles = Array(repeating: 0.0, count: 3)","\/\/ threeDoubles é do tipo [Double], e igual a [0.0, 0.0, 0.0]"]},{"anchor":"Criando-um-Array-para-Somar-Dois-Arrays","level":3,"type":"heading","text":"Criando um Array para Somar Dois Arrays"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode criar um novo array adicionando dois arrays existentes com tipos compatíveis com o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":"). O tipo do novo array é inferido a partir do tipo dos dois arrays que você adiciona:"}]},{"type":"codeListing","syntax":"swift","code":["var anotherThreeDoubles = Array(repeating: 2.5, count: 3)","\/\/ anotherThreeDoubles é do tipo [Double], e igual a [2.5, 2.5, 2.5]","","var sixDoubles = threeDoubles + anotherThreeDoubles","\/\/ sixDoubles é inferido como [Double], e igual a [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]"]},{"anchor":"Criando-um-Array-com-um-Literal-de-Array","level":3,"type":"heading","text":"Criando um Array com um Literal de Array"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você também pode inicializar um array com um "},{"type":"emphasis","inlineContent":[{"type":"text","text":"literal de array"}]},{"type":"text","text":", que é uma forma abreviada de escrever um ou mais valores como uma coleção de array. Um literal de array é escrito como uma lista de valores, separados por vírgulas, entre colchetes:"}]},{"type":"codeListing","syntax":"markdown","code":["[<#value 1#>, <#value 2#>, <#value 3#>]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O exemplo abaixo cria um array chamado "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" para armazenar valores "},{"type":"codeVoice","code":"String"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var shoppingList: [String] = [\"Eggs\", \"Milk\"]","\/\/ shoppingList inicializado com dois items iniciais"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A variável "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" é declarada como “um array de valores de string”, escrita como "},{"type":"codeVoice","code":"[String]"},{"type":"text","text":". Como esse array especificou um tipo de valor "},{"type":"codeVoice","code":"String"},{"type":"text","text":", é permitido armazenar apenas valores "},{"type":"codeVoice","code":"String"},{"type":"text","text":". Aqui, o array "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" é inicializado com dois valores "},{"type":"codeVoice","code":"String"},{"type":"text","text":" ("},{"type":"codeVoice","code":"\"Eggs\""},{"type":"text","text":" e "},{"type":"codeVoice","code":"\"Milk\""},{"type":"text","text":"), escritos dentro de um  literal de array."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O array "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" é declarado como uma variável (com o introdutor "},{"type":"codeVoice","code":"var"},{"type":"text","text":") e não uma constante (com o introdutor "},{"type":"codeVoice","code":"let"},{"type":"text","text":") porque mais itens são adicionados à lista de compras nos exemplos abaixo."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nesse caso, o literal de array contém dois valores "},{"type":"codeVoice","code":"String"},{"type":"text","text":" e nada mais. Isso corresponde ao tipo de declaração da variável "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" (um array que só pode conter valores "},{"type":"codeVoice","code":"String"},{"type":"text","text":") e, portanto, a atribuição do literal do array é permitida como uma forma de inicializar "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" com dois itens iniciais."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Graças à inferência de tipo em Swift, você não precisa escrever o tipo do array se estiver inicializando-o com um literal de array contendo valores do mesmo tipo. A inicialização de "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" poderia ter sido escrita de uma forma mais curta:"}]},{"type":"codeListing","syntax":"swift","code":["var shoppingList = [\"Eggs\", \"Milk\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Como todos os valores no literal de array são do mesmo tipo, é possivel inferir que "},{"type":"codeVoice","code":"[String]"},{"type":"text","text":" é o tipo correto a ser usado para a variável "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":"."}]},{"anchor":"Acessando-e-Modificando-um-Array","level":3,"type":"heading","text":"Acessando e Modificando um Array"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você acessa e modifica um array por meio de seus métodos e propriedades ou usando a sintaxe de subscrito."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para descobrir o número de itens em um array, verifique sua propriedade "},{"type":"codeVoice","code":"count"},{"type":"text","text":" que é somente de leitura:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The shopping list contains \\(shoppingList.count) items.\")","\/\/ Imprime \"The shopping list contains 2 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use a propriedade booleana "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" como um atalho para verificar se a propriedade "},{"type":"codeVoice","code":"count"},{"type":"text","text":" é igual a "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if shoppingList.isEmpty {","   print(\"The shopping list is empty.\")","} else {","   print(\"The shopping list isn't empty.\")","}","\/\/ Imprime \"The shopping list isn't empty.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode adicionar um novo item ao final de um array chamando o método "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" do array:"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList.append(\"Flour\")","\/\/ shoppingList agora contém 3 itens e alguém está fazendo panquecas"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternativamentea, anexe um array de um ou mais itens compatíveis com o operador de atribuição de adição ("},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList += [\"Baking Powder\"]","\/\/ shoppingList agora contém 4 itens","shoppingList += [\"Chocolate Spread\", \"Cheese\", \"Butter\"]","\/\/ shoppingList agora contém 7 itens"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Recupere um valor do array usando "},{"type":"emphasis","inlineContent":[{"type":"text","text":"sintaxe de subscrito"}]},{"type":"text","text":", passando o índice do valor que deseja recuperar entre colchetes imediatamente após o nome do array:"}]},{"type":"codeListing","syntax":"swift","code":["var firstItem = shoppingList[0]","\/\/ firstItem é igual a \"Eggs\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O primeiro item no array tem um índice de "},{"type":"codeVoice","code":"0"},{"type":"text","text":", não "},{"type":"codeVoice","code":"1"},{"type":"text","text":". Arrays em Swift são sempre indexados por zero."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode usar a sintaxe de subscrito para alterar um valor existente em um determinado índice:"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList[0] = \"Six eggs\"","\/\/ o primeiro item da lista agora é igual a \"Six eggs\" em vez de \"Eggs\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ao usar a sintaxe de subscrito, o índice especificado precisa ser válido. Por exemplo, escrever "},{"type":"codeVoice","code":"shoppingList[shoppingList.count] = \"Salt\""},{"type":"text","text":" para tentar anexar um item ao final do array resulta em um erro de tempo de execução."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você também pode usar a sintaxe de subscrito para alterar um intervalo de valores de uma só vez, mesmo se o conjunto de valores de substituição tiver um comprimento diferente do intervalo que você está substituindo. O exemplo a seguir substitui "},{"type":"codeVoice","code":"\"Chocolate Spread\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"Cheese\""},{"type":"text","text":" e "},{"type":"codeVoice","code":"\"Butter\""},{"type":"text","text":" por "},{"type":"codeVoice","code":"\"Bananas\""},{"type":"text","text":" e "},{"type":"codeVoice","code":"\"Apples\""},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList[4...6] = [\"Bananas\", \"Apples\"]","\/\/ shoppingList agora contém 6 itens"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para inserir um item no array em um índice especificado, chame o método "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" do array:"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList.insert(\"Maple Syrup\", at: 0)","\/\/ shoppingList agora contém 7 itens","\/\/ \"Maple Syrup\" é agora o primeiro item da lista"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Essa chamada para o método "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" insere um novo item com um valor de "},{"type":"codeVoice","code":"\"Maple Syrup\""},{"type":"text","text":" bem no início da lista de compras, indicado por um índice de "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Da mesma forma, você remove um item do array com o método "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":". Este método remove o item no índice especificado e retorna o item removido (embora você possa ignorar o valor retornado se não precisar dele):"}]},{"type":"codeListing","syntax":"swift","code":["let mapleSyrup = shoppingList.remove(at: 0)","\/\/ o item que estava no índice 0 foi removido","\/\/ shoppingList agora contém 6 itens, sem Maple Syrup","\/\/ a constante mapleSyrup agora é igual a string \"Maple Syrup\" removida"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você tentar acessar ou modificar um valor para um índice que está fora dos limites existentes de um array, você irá disparar um erro de tempo de execução. Você pode verificar se um índice é válido antes de usá-lo, comparando-o com a propriedade "},{"type":"codeVoice","code":"count"},{"type":"text","text":" do array. O maior índice válido em uma matriz é "},{"type":"codeVoice","code":"count - 1"},{"type":"text","text":" porque arrays são indexados a partir de zero — no entanto, quando "},{"type":"codeVoice","code":"count"},{"type":"text","text":" é "},{"type":"codeVoice","code":"0"},{"type":"text","text":" (o que significa que o array está vazio), não há índices válidos."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Quaisquer lacunas em um array são fechadas quando um item é removido e, portanto, o valor no índice "},{"type":"codeVoice","code":"0"},{"type":"text","text":" é novamente igual a "},{"type":"codeVoice","code":"\"Six eggs\""},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["firstItem = shoppingList[0]","\/\/ firstItem é igual a \"Six eggs\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você deseja remover o item final de um array, use o método "},{"type":"codeVoice","code":"removeLast()"},{"type":"text","text":" em vez do método "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" para evitar a necessidade de consultar a propriedade "},{"type":"codeVoice","code":"count"},{"type":"text","text":" do array. Como o método "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"removeLast()"},{"type":"text","text":" retorna o item removido:"}]},{"type":"codeListing","syntax":"swift","code":["let apples = shoppingList.removeLast()","\/\/ O último item do array foi removido","\/\/ shoppingList agora contém 5 itens","\/\/ a constante apples é igual a string \"Apples\" removida"]},{"anchor":"Iterando-em-um-Array","level":3,"type":"heading","text":"Iterando em um Array"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode iterar sobre todo o conjunto de valores em um array com o loop "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["for item in shoppingList {","   print(item)","}","\/\/ Six eggs","\/\/ Milk","\/\/ Flour","\/\/ Baking Powder","\/\/ Bananas"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você precisar do índice inteiro de cada item, bem como de seu valor, use o método "},{"type":"codeVoice","code":"enumerated()"},{"type":"text","text":" para iterar sobre o array. Para cada item no array, o método "},{"type":"codeVoice","code":"enumerated()"},{"type":"text","text":" retorna uma tupla composta por um inteiro e o item. Os inteiros começam em zero e contam para cima em um para cada item; se você enumerar sobre todo um array, esses inteiros corresponderão aos índices dos itens. Você pode decompor a tupla em constantes ou variáveis temporárias como parte da iteração:"}]},{"type":"codeListing","syntax":"swift","code":["for (index, value) in shoppingList.enumerated() {","   print(\"Item \\(index + 1): \\(value)\")","}","\/\/ Item 1: Six eggs","\/\/ Item 2: Milk","\/\/ Item 3: Flour","\/\/ Item 4: Baking Powder","\/\/ Item 5: Bananas"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para saber mais sobre o loop "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":", consulte "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"anchor":"Sets","level":2,"type":"heading","text":"Sets"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"set"}]},{"type":"text","text":" stores distinct values of the same type"},{"type":"text","text":" "},{"type":"text","text":"in a collection with no defined ordering."},{"type":"text","text":" "},{"type":"text","text":"You can use a set instead of an array when the order of items isn’t important,"},{"type":"text","text":" "},{"type":"text","text":"or when you need to ensure that an item only appears once."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" type is bridged to Foundation’s "},{"type":"codeVoice","code":"NSSet"},{"type":"text","text":" class.For more information about using "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Hash-Values-for-Set-Types","level":3,"type":"heading","text":"Hash Values for Set Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A type must be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"hashable"}]},{"type":"text","text":" in order to be stored in a set —"},{"type":"text","text":" "},{"type":"text","text":"that is, the type must provide a way to compute a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"hash value"}]},{"type":"text","text":" for itself."},{"type":"text","text":" "},{"type":"text","text":"A hash value is an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value that’s the same for all objects that compare equally,"},{"type":"text","text":" "},{"type":"text","text":"such that if "},{"type":"codeVoice","code":"a == b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the hash value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is equal to the hash value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of Swift’s basic types (such as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are hashable by default, and can be used as set value types or dictionary key types."},{"type":"text","text":" "},{"type":"text","text":"Enumeration case values without associated values"},{"type":"text","text":" "},{"type":"text","text":"(as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are also hashable by default."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use your own custom types as set value types or dictionary key types"},{"type":"text","text":" "},{"type":"text","text":"by making them conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"from the Swift standard library."},{"type":"text","text":" "},{"type":"text","text":"For information about implementing the required "},{"type":"codeVoice","code":"hash(into:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For information about conforming to protocols, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Set-Type-Syntax","level":3,"type":"heading","text":"Set Type Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of a Swift set is written as "},{"type":"codeVoice","code":"Set<Element>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" is the type that the set is allowed to store."},{"type":"text","text":" "},{"type":"text","text":"Unlike arrays, sets don’t have an equivalent shorthand form."}]},{"anchor":"Creating-and-Initializing-an-Empty-Set","level":3,"type":"heading","text":"Creating and Initializing an Empty Set"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create an empty set of a certain type"},{"type":"text","text":" "},{"type":"text","text":"using initializer syntax:"}]},{"type":"codeListing","syntax":"swift","code":["var letters = Set<Character>()","print(\"letters is of type Set<Character> with \\(letters.count) items.\")","\/\/ Prints \"letters is of type Set<Character> with 0 items.\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"letters"},{"type":"text","text":" variable is inferred to be "},{"type":"codeVoice","code":"Set<Character>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"from the type of the initializer."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, if the context already provides type information,"},{"type":"text","text":" "},{"type":"text","text":"such as a function argument or an already typed variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty set with an empty array literal:"}]},{"type":"codeListing","syntax":"swift","code":["letters.insert(\"a\")","\/\/ letters now contains 1 value of type Character","letters = []","\/\/ letters is now an empty set, but is still of type Set<Character>"]},{"anchor":"Creating-a-Set-with-an-Array-Literal","level":3,"type":"heading","text":"Creating a Set with an Array Literal"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize a set with an array literal,"},{"type":"text","text":" "},{"type":"text","text":"as a shorthand way to write one or more values as a set collection."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below creates a set called "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values:"}]},{"type":"codeListing","syntax":"swift","code":["var favoriteGenres: Set<String> = [\"Rock\", \"Classical\", \"Hip hop\"]","\/\/ favoriteGenres has been initialized with three initial items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" variable is declared as"},{"type":"text","text":" "},{"type":"text","text":"“a set of "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values”, written as "},{"type":"codeVoice","code":"Set<String>"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because this particular set has specified a value type of "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" allowed to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Here, the "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" set is initialized with three "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"\"Rock\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"Classical\""},{"type":"text","text":", and "},{"type":"codeVoice","code":"\"Hip hop\""},{"type":"text","text":"), written within an array literal."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" set is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer)"},{"type":"text","text":" "},{"type":"text","text":"and not a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer)"},{"type":"text","text":" "},{"type":"text","text":"because items are added and removed in the examples below."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A set type can’t be inferred from an array literal alone,"},{"type":"text","text":" "},{"type":"text","text":"so the type "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" must be explicitly declared."},{"type":"text","text":" "},{"type":"text","text":"However, because of Swift’s type inference,"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to write the type of the set’s elements"},{"type":"text","text":" "},{"type":"text","text":"if you’re initializing it with an array literal"},{"type":"text","text":" "},{"type":"text","text":"that contains values of just one type."},{"type":"text","text":" "},{"type":"text","text":"The initialization of "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"type":"codeListing","syntax":"swift","code":["var favoriteGenres: Set = [\"Rock\", \"Classical\", \"Hip hop\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because all values in the array literal are of the same type,"},{"type":"text","text":" "},{"type":"text","text":"Swift can infer that "},{"type":"codeVoice","code":"Set<String>"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the correct type to use for the "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" variable."}]},{"anchor":"Accessing-and-Modifying-a-Set","level":3,"type":"heading","text":"Accessing and Modifying a Set"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a set through its methods and properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To find out the number of items in a set,"},{"type":"text","text":" "},{"type":"text","text":"check its read-only "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"I have \\(favoriteGenres.count) favorite music genres.\")","\/\/ Prints \"I have 3 favorite music genres.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"as a shortcut for checking whether the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property is equal to "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if favoriteGenres.isEmpty {","   print(\"As far as music goes, I'm not picky.\")","} else {","   print(\"I have particular music preferences.\")","}","\/\/ Prints \"I have particular music preferences.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a new item into a set by calling the set’s "},{"type":"codeVoice","code":"insert(_:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["favoriteGenres.insert(\"[Tool J]\")","\/\/ favoriteGenres now contains 4 items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can remove an item from a set by calling the set’s "},{"type":"codeVoice","code":"remove(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which removes the item if it’s a member of the set,"},{"type":"text","text":" "},{"type":"text","text":"and returns the removed value,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the set didn’t contain it."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, all items in a set can be removed with its "},{"type":"codeVoice","code":"removeAll()"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["if let removedGenre = favoriteGenres.remove(\"Rock\") {","   print(\"\\(removedGenre)? I'm over it.\")","} else {","   print(\"I never much cared for that.\")","}","\/\/ Prints \"Rock? I'm over it.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check whether a set contains a particular item, use the "},{"type":"codeVoice","code":"contains(_:)"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["if favoriteGenres.contains(\"Funk\") {","    print(\"I get up on the good foot.\")","} else {","    print(\"It's too funky in here.\")","}","\/\/ Prints \"It's too funky in here.\""]},{"anchor":"Iterating-Over-a-Set","level":3,"type":"heading","text":"Iterating Over a Set"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate over the values in a set with a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."}]},{"type":"codeListing","syntax":"swift","code":["for genre in favoriteGenres {","   print(\"\\(genre)\")","}","\/\/ Classical","\/\/ [Tool J]","\/\/ Hip hop"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" type doesn’t have a defined ordering."},{"type":"text","text":" "},{"type":"text","text":"To iterate over the values of a set in a specific order,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"sorted()"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which returns the set’s elements as an array"},{"type":"text","text":" "},{"type":"text","text":"sorted using the "},{"type":"codeVoice","code":"<"},{"type":"text","text":" operator."}]},{"type":"codeListing","syntax":"swift","code":["for genre in favoriteGenres.sorted() {","   print(\"\\(genre)\")","}","\/\/ Classical","\/\/ Hip hop","\/\/ [Tool J]"]},{"anchor":"Performing-Set-Operations","level":2,"type":"heading","text":"Performing Set Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can efficiently perform fundamental set operations,"},{"type":"text","text":" "},{"type":"text","text":"such as combining two sets together,"},{"type":"text","text":" "},{"type":"text","text":"determining which values two sets have in common,"},{"type":"text","text":" "},{"type":"text","text":"or determining whether two sets contain all, some, or none of the same values."}]},{"anchor":"Fundamental-Set-Operations","level":3,"type":"heading","text":"Fundamental Set Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The illustration below depicts two sets—"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":"—"},{"type":"text","text":" "},{"type":"text","text":"with the results of various set operations represented by the shaded regions."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"setVennDiagram"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"intersection(_:)"},{"type":"text","text":" method to create a new set with only the values common to both sets."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"symmetricDifference(_:)"},{"type":"text","text":" method to create a new set with values in either set, but not both."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"union(_:)"},{"type":"text","text":" method to create a new set with all of the values in both sets."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"subtracting(_:)"},{"type":"text","text":" method to create a new set with values not in the specified set."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let oddDigits: Set = [1, 3, 5, 7, 9]","let evenDigits: Set = [0, 2, 4, 6, 8]","let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]","","oddDigits.union(evenDigits).sorted()","\/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","oddDigits.intersection(evenDigits).sorted()","\/\/ []","oddDigits.subtracting(singleDigitPrimeNumbers).sorted()","\/\/ [1, 9]","oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()","\/\/ [1, 2, 9]"]},{"anchor":"Set-Membership-and-Equality","level":3,"type":"heading","text":"Set Membership and Equality"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The illustration below depicts three sets—"},{"type":"codeVoice","code":"a"},{"type":"text","text":", "},{"type":"codeVoice","code":"b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"c"},{"type":"text","text":"—"},{"type":"text","text":" "},{"type":"text","text":"with overlapping regions representing elements shared among sets."},{"type":"text","text":" "},{"type":"text","text":"Set "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superset"}]},{"type":"text","text":" of set "},{"type":"codeVoice","code":"b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"a"},{"type":"text","text":" contains all elements in "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Conversely, set "},{"type":"codeVoice","code":"b"},{"type":"text","text":" is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subset"}]},{"type":"text","text":" of set "},{"type":"codeVoice","code":"a"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because all elements in "},{"type":"codeVoice","code":"b"},{"type":"text","text":" are also contained by "},{"type":"codeVoice","code":"a"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Set "},{"type":"codeVoice","code":"b"},{"type":"text","text":" and set "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"disjoint"}]},{"type":"text","text":" with one another,"},{"type":"text","text":" "},{"type":"text","text":"because they share no elements in common."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"setEulerDiagram"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the “is equal” operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") to determine whether two sets contain all of the same values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isSubset(of:)"},{"type":"text","text":" method to determine whether all of the values of a set are contained in the specified set."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isSuperset(of:)"},{"type":"text","text":" method to determine whether a set contains all of the values in a specified set."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isStrictSubset(of:)"},{"type":"text","text":" or "},{"type":"codeVoice","code":"isStrictSuperset(of:)"},{"type":"text","text":" methods to determine whether a set is a subset or superset, but not equal to, a specified set."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isDisjoint(with:)"},{"type":"text","text":" method to determine whether two sets have no values in common."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let houseAnimals: Set = [\"🐶\", \"🐱\"]","let farmAnimals: Set = [\"🐮\", \"🐔\", \"🐑\", \"🐶\", \"🐱\"]","let cityAnimals: Set = [\"🐦\", \"🐭\"]","","houseAnimals.isSubset(of: farmAnimals)","\/\/ true","farmAnimals.isSuperset(of: houseAnimals)","\/\/ true","farmAnimals.isDisjoint(with: cityAnimals)","\/\/ true"]},{"anchor":"Dictionaries","level":2,"type":"heading","text":"Dictionaries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dictionary"}]},{"type":"text","text":" stores associations between"},{"type":"text","text":" "},{"type":"text","text":"keys of the same type and values of the same type"},{"type":"text","text":" "},{"type":"text","text":"in a collection with no defined ordering."},{"type":"text","text":" "},{"type":"text","text":"Each value is associated with a unique "},{"type":"emphasis","inlineContent":[{"type":"text","text":"key"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which acts as an identifier for that value within the dictionary."},{"type":"text","text":" "},{"type":"text","text":"Unlike items in an array, items in a dictionary don’t have a specified order."},{"type":"text","text":" "},{"type":"text","text":"You use a dictionary when you need to look up values based on their identifier,"},{"type":"text","text":" "},{"type":"text","text":"in much the same way that a real-world dictionary is used to look up"},{"type":"text","text":" "},{"type":"text","text":"the definition for a particular word."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type is bridged to Foundation’s "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" class.For more information about using "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Dictionary-Type-Shorthand-Syntax","level":3,"type":"heading","text":"Dictionary Type Shorthand Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of a Swift dictionary is written in full as "},{"type":"codeVoice","code":"Dictionary<Key, Value>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" is the type of value that can be used as a dictionary key,"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is the type of value that the dictionary stores for those keys."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A dictionary "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" type must conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"like a set’s value type."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also write the type of a dictionary in shorthand form as "},{"type":"codeVoice","code":"[Key: Value]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Although the two forms are functionally identical,"},{"type":"text","text":" "},{"type":"text","text":"the shorthand form is preferred"},{"type":"text","text":" "},{"type":"text","text":"and is used throughout this guide when referring to the type of a dictionary."}]},{"anchor":"Creating-an-Empty-Dictionary","level":3,"type":"heading","text":"Creating an Empty Dictionary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with arrays,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" of a certain type by using initializer syntax:"}]},{"type":"codeListing","syntax":"swift","code":["var namesOfIntegers: [Int: String] = [:]","\/\/ namesOfIntegers is an empty [Int: String] dictionary"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example creates an empty dictionary of type "},{"type":"codeVoice","code":"[Int: String]"},{"type":"text","text":" "},{"type":"text","text":"to store human-readable names of integer values."},{"type":"text","text":" "},{"type":"text","text":"Its keys are of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and its values are of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the context already provides type information,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty dictionary with an empty dictionary literal,"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[:]"},{"type":"text","text":" "},{"type":"text","text":"(a colon inside a pair of square brackets):"}]},{"type":"codeListing","syntax":"swift","code":["namesOfIntegers[16] = \"sixteen\"","\/\/ namesOfIntegers now contains 1 key-value pair","namesOfIntegers = [:]","\/\/ namesOfIntegers is once again an empty dictionary of type [Int: String]"]},{"anchor":"Creating-a-Dictionary-with-a-Dictionary-Literal","level":3,"type":"heading","text":"Creating a Dictionary with a Dictionary Literal"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize a dictionary with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dictionary literal"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has a similar syntax to the array literal seen earlier."},{"type":"text","text":" "},{"type":"text","text":"A dictionary literal is a shorthand way to write"},{"type":"text","text":" "},{"type":"text","text":"one or more key-value pairs as a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" collection."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"key-value pair"}]},{"type":"text","text":" is a combination of a key and a value."},{"type":"text","text":" "},{"type":"text","text":"In a dictionary literal,"},{"type":"text","text":" "},{"type":"text","text":"the key and value in each key-value pair are separated by a colon."},{"type":"text","text":" "},{"type":"text","text":"The key-value pairs are written as a list, separated by commas,"},{"type":"text","text":" "},{"type":"text","text":"surrounded by a pair of square brackets:"}]},{"type":"codeListing","syntax":"markdown","code":["[<#key 1#>: <#value 1#>, <#key 2#>: <#value 2#>, <#key 3#>: <#value 3#>]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below creates a dictionary to store the names of international airports."},{"type":"text","text":" "},{"type":"text","text":"In this dictionary, the keys are three-letter International Air Transport Association codes,"},{"type":"text","text":" "},{"type":"text","text":"and the values are airport names:"}]},{"type":"codeListing","syntax":"swift","code":["var airports: [String: String] = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is declared as having a type of "},{"type":"codeVoice","code":"[String: String]"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which means “a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" whose keys are of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and whose values are also of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"”."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer),"},{"type":"text","text":" "},{"type":"text","text":"and not a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer),"},{"type":"text","text":" "},{"type":"text","text":"because more airports are added to the dictionary in the examples below."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is initialized with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary literal containing two key-value pairs."},{"type":"text","text":" "},{"type":"text","text":"The first pair has a key of "},{"type":"codeVoice","code":"\"YYZ\""},{"type":"text","text":" and a value of "},{"type":"codeVoice","code":"\"Toronto Pearson\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The second pair has a key of "},{"type":"codeVoice","code":"\"DUB\""},{"type":"text","text":" and a value of "},{"type":"codeVoice","code":"\"Dublin\""},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This dictionary literal contains two "},{"type":"codeVoice","code":"String: String"},{"type":"text","text":" pairs."},{"type":"text","text":" "},{"type":"text","text":"This key-value type matches the type of the "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" variable declaration"},{"type":"text","text":" "},{"type":"text","text":"(a dictionary with only "},{"type":"codeVoice","code":"String"},{"type":"text","text":" keys, and only "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values),"},{"type":"text","text":" "},{"type":"text","text":"and so the assignment of the dictionary literal is permitted"},{"type":"text","text":" "},{"type":"text","text":"as a way to initialize the "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary with two initial items."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with arrays,"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to write the type of the dictionary"},{"type":"text","text":" "},{"type":"text","text":"if you’re initializing it with a dictionary literal whose keys and values have consistent types."},{"type":"text","text":" "},{"type":"text","text":"The initialization of "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"type":"codeListing","syntax":"swift","code":["var airports = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because all keys in the literal are of the same type as each other,"},{"type":"text","text":" "},{"type":"text","text":"and likewise all values are of the same type as each other,"},{"type":"text","text":" "},{"type":"text","text":"Swift can infer that "},{"type":"codeVoice","code":"[String: String]"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the correct type to use for the "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary."}]},{"anchor":"Accessing-and-Modifying-a-Dictionary","level":3,"type":"heading","text":"Accessing and Modifying a Dictionary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a dictionary through its methods and properties,"},{"type":"text","text":" "},{"type":"text","text":"or by using subscript syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with an array, you find out the number of items in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" "},{"type":"text","text":"by checking its read-only "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The airports dictionary contains \\(airports.count) items.\")","\/\/ Prints \"The airports dictionary contains 2 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"as a shortcut for checking whether the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property is equal to "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if airports.isEmpty {","   print(\"The airports dictionary is empty.\")","} else {","   print(\"The airports dictionary isn't empty.\")","}","\/\/ Prints \"The airports dictionary isn't empty.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a new item to a dictionary with subscript syntax."},{"type":"text","text":" "},{"type":"text","text":"Use a new key of the appropriate type as the subscript index,"},{"type":"text","text":" "},{"type":"text","text":"and assign a new value of the appropriate type:"}]},{"type":"codeListing","syntax":"swift","code":["airports[\"LHR\"] = \"London\"","\/\/ the airports dictionary now contains 3 items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use subscript syntax to change the value associated with a particular key:"}]},{"type":"codeListing","syntax":"swift","code":["airports[\"LHR\"] = \"London Heathrow\"","\/\/ the value for \"LHR\" has been changed to \"London Heathrow\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an alternative to subscripting,"},{"type":"text","text":" "},{"type":"text","text":"use a dictionary’s "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to set or update the value for a particular key."},{"type":"text","text":" "},{"type":"text","text":"Like the subscript examples above, the "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"sets a value for a key if none exists,"},{"type":"text","text":" "},{"type":"text","text":"or updates the value if that key already exists."},{"type":"text","text":" "},{"type":"text","text":"Unlike a subscript, however,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method returns the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"old"}]},{"type":"text","text":" value after performing an update."},{"type":"text","text":" "},{"type":"text","text":"This enables you to check whether or not an update took place."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method returns an optional value"},{"type":"text","text":" "},{"type":"text","text":"of the dictionary’s value type."},{"type":"text","text":" "},{"type":"text","text":"For a dictionary that stores "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values, for example,"},{"type":"text","text":" "},{"type":"text","text":"the method returns a value of type "},{"type":"codeVoice","code":"String?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":"”."},{"type":"text","text":" "},{"type":"text","text":"This optional value contains the old value for that key if one existed before the update,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if no value existed:"}]},{"type":"codeListing","syntax":"swift","code":["if let oldValue = airports.updateValue(\"Dublin Airport\", forKey: \"DUB\") {","   print(\"The old value for DUB was \\(oldValue).\")","}","\/\/ Prints \"The old value for DUB was Dublin.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use subscript syntax to retrieve a value from the dictionary for a particular key."},{"type":"text","text":" "},{"type":"text","text":"Because it’s possible to request a key for which no value exists,"},{"type":"text","text":" "},{"type":"text","text":"a dictionary’s subscript returns an optional value of the dictionary’s value type."},{"type":"text","text":" "},{"type":"text","text":"If the dictionary contains a value for the requested key,"},{"type":"text","text":" "},{"type":"text","text":"the subscript returns an optional value containing the existing value for that key."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the subscript returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if let airportName = airports[\"DUB\"] {","   print(\"The name of the airport is \\(airportName).\")","} else {","   print(\"That airport isn't in the airports dictionary.\")","}","\/\/ Prints \"The name of the airport is Dublin Airport.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use subscript syntax to remove a key-value pair from a dictionary"},{"type":"text","text":" "},{"type":"text","text":"by assigning a value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for that key:"}]},{"type":"codeListing","syntax":"swift","code":["airports[\"APL\"] = \"Apple International\"","\/\/ \"Apple International\" isn't the real airport for APL, so delete it","airports[\"APL\"] = nil","\/\/ APL has now been removed from the dictionary"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, remove a key-value pair from a dictionary"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"removeValue(forKey:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"This method removes the key-value pair if it exists"},{"type":"text","text":" "},{"type":"text","text":"and returns the removed value,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if no value existed:"}]},{"type":"codeListing","syntax":"swift","code":["if let removedValue = airports.removeValue(forKey: \"DUB\") {","   print(\"The removed airport's name is \\(removedValue).\")","} else {","   print(\"The airports dictionary doesn't contain a value for DUB.\")","}","\/\/ Prints \"The removed airport's name is Dublin Airport.\""]},{"anchor":"Iterating-Over-a-Dictionary","level":3,"type":"heading","text":"Iterating Over a Dictionary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate over the key-value pairs in a dictionary with a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."},{"type":"text","text":" "},{"type":"text","text":"Each item in the dictionary is returned as a "},{"type":"codeVoice","code":"(key, value)"},{"type":"text","text":" tuple,"},{"type":"text","text":" "},{"type":"text","text":"and you can decompose the tuple’s members into temporary constants or variables"},{"type":"text","text":" "},{"type":"text","text":"as part of the iteration:"}]},{"type":"codeListing","syntax":"swift","code":["for (airportCode, airportName) in airports {","   print(\"\\(airportCode): \\(airportName)\")","}","\/\/ LHR: London Heathrow","\/\/ YYZ: Toronto Pearson"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also retrieve an iterable collection of a dictionary’s keys or values"},{"type":"text","text":" "},{"type":"text","text":"by accessing its "},{"type":"codeVoice","code":"keys"},{"type":"text","text":" and "},{"type":"codeVoice","code":"values"},{"type":"text","text":" properties:"}]},{"type":"codeListing","syntax":"swift","code":["for airportCode in airports.keys {","   print(\"Airport code: \\(airportCode)\")","}","\/\/ Airport code: LHR","\/\/ Airport code: YYZ","","for airportName in airports.values {","   print(\"Airport name: \\(airportName)\")","}","\/\/ Airport name: London Heathrow","\/\/ Airport name: Toronto Pearson"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to use a dictionary’s keys or values"},{"type":"text","text":" "},{"type":"text","text":"with an API that takes an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance, initialize a new array"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"keys"},{"type":"text","text":" or "},{"type":"codeVoice","code":"values"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["let airportCodes = [String](airports.keys)","\/\/ airportCodes is [\"LHR\", \"YYZ\"]","","let airportNames = [String](airports.values)","\/\/ airportNames is [\"London Heathrow\", \"Toronto Pearson\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type doesn’t have a defined ordering."},{"type":"text","text":" "},{"type":"text","text":"To iterate over the keys or values of a dictionary in a specific order,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"sorted()"},{"type":"text","text":" method on its "},{"type":"codeVoice","code":"keys"},{"type":"text","text":" or "},{"type":"codeVoice","code":"values"},{"type":"text","text":" property."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/collectiontypes"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Tipos de Coleção","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#For-In-Loops":{"abstract":[],"title":"For-In Loops","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops","url":"\/documentation\/the-swift-programming-language\/controlflow#For-In-Loops"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"setVennDiagram":{"alt":null,"type":"image","identifier":"setVennDiagram","variants":[{"url":"\/images\/setVennDiagram@2x.png","traits":["2x","light"]},{"url":"\/images\/setVennDiagram~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"CollectionTypes_intro":{"alt":null,"type":"image","identifier":"CollectionTypes_intro","variants":[{"url":"\/images\/CollectionTypes_intro~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"https://developer.apple.com/documentation/swift/hashable":{"title":"Hashable","titleInlineContent":[{"type":"text","text":"Hashable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable","url":"https:\/\/developer.apple.com\/documentation\/swift\/hashable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"https://developer.apple.com/documentation/swift/dictionary#2846239":{"title":"Bridging Between Dictionary and NSDictionary","titleInlineContent":[{"type":"text","text":"Bridging Between Dictionary and NSDictionary"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","url":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"https://developer.apple.com/documentation/swift/set#2845530":{"title":"Bridging Between Set and NSSet","titleInlineContent":[{"type":"text","text":"Bridging Between Set and NSSet"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530","url":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530"},"https://developer.apple.com/documentation/swift/array#2846730":{"title":"Bridging Between Array and NSArray","titleInlineContent":[{"type":"text","text":"Bridging Between Array and NSArray"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","url":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"setEulerDiagram":{"alt":null,"type":"image","identifier":"setEulerDiagram","variants":[{"url":"\/images\/setEulerDiagram@2x.png","traits":["2x","light"]},{"url":"\/images\/setEulerDiagram~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"}}}