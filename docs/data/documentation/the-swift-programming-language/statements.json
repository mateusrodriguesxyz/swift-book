{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Control flow statements are used to control the flow of execution in a program."},{"type":"text","text":" "},{"type":"text","text":"There are several types of control flow statements in Swift, including"},{"type":"text","text":" "},{"type":"text","text":"loop statements, branch statements, and control transfer statements."},{"type":"text","text":" "},{"type":"text","text":"Loop statements allow a block of code to be executed repeatedly,"},{"type":"text","text":" "},{"type":"text","text":"branch statements allow a certain block of code to be executed"},{"type":"text","text":" "},{"type":"text","text":"only when certain conditions are met,"},{"type":"text","text":" "},{"type":"text","text":"and control transfer statements provide a way to alter the order in which code is executed."},{"type":"text","text":" "},{"type":"text","text":"In addition, Swift provides a "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement to introduce scope,"},{"type":"text","text":" "},{"type":"text","text":"and catch and handle errors,"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement for running cleanup actions just before the current scope exits."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A semicolon ("},{"type":"codeVoice","code":";"},{"type":"text","text":") can optionally appear after any statement"},{"type":"text","text":" "},{"type":"text","text":"and is used to separate multiple statements if they appear on the same line."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a statement","","statement --> expression ``;``-OPT","statement --> declaration ``;``-OPT","statement --> loop-statement ``;``-OPT","statement --> branch-statement ``;``-OPT","statement --> labeled-statement ``;``-OPT","statement --> control-transfer-statement ``;``-OPT","statement --> defer-statement ``;``-OPT","statement --> do-statement ``;``-OPT","statement --> compiler-control-statement","statements --> statement statements-OPT"]},{"anchor":"Loop-Statements","level":2,"type":"heading","text":"Loop Statements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Loop statements allow a block of code to be executed repeatedly,"},{"type":"text","text":" "},{"type":"text","text":"depending on the conditions specified in the loop."},{"type":"text","text":" "},{"type":"text","text":"Swift has three loop statements:"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Control flow in a loop statement can be changed by a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement and is discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement"},{"type":"text","text":" below."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a loop statement","","loop-statement --> for-in-statement","loop-statement --> while-statement","loop-statement --> repeat-while-statement"]},{"anchor":"For-In-Statement","level":3,"type":"heading","text":"For-In Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement allows a block of code to be executed"},{"type":"text","text":" "},{"type":"text","text":"once for each item in a collection (or any type)"},{"type":"text","text":" "},{"type":"text","text":"that conforms to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["for <#item#> in <#collection#> {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"makeIterator()"},{"type":"text","text":" method is called on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection"}]},{"type":"text","text":" expression"},{"type":"text","text":" "},{"type":"text","text":"to obtain a value of an iterator type—that is,"},{"type":"text","text":" "},{"type":"text","text":"a type that conforms to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"The program begins executing a loop"},{"type":"text","text":" "},{"type":"text","text":"by calling the "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" method on the iterator."},{"type":"text","text":" "},{"type":"text","text":"If the value returned isn’t "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s assigned to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"item"}]},{"type":"text","text":" pattern,"},{"type":"text","text":" "},{"type":"text","text":"the program executes the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and then continues execution at the beginning of the loop."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the program doesn’t perform assignment or execute the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and it’s finished executing the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a for-in statement","","for-in-statement --> ``for`` ``case``-OPT pattern ``in`` expression where-clause-OPT code-block"]},{"anchor":"While-Statement","level":3,"type":"heading","text":"While Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement allows a block of code to be executed repeatedly,"},{"type":"text","text":" "},{"type":"text","text":"as long as a condition remains true."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["while <#condition#> {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement is executed as follows:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition"}]},{"type":"text","text":" is evaluated.If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", execution continues to step 2."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", the program is finished executing the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The program executes the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":", and execution returns to step 1."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition"}]},{"type":"text","text":" is evaluated before the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":" are executed,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":" in a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement can be executed zero or more times."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition"}]},{"type":"text","text":" "},{"type":"text","text":"must be of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or a type bridged to "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The condition can also be an optional binding declaration,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a while statement","","while-statement --> ``while`` condition-list code-block","","condition-list --> condition | condition ``,`` condition-list","condition -->  expression | availability-condition | case-condition | optional-binding-condition","","case-condition --> ``case`` pattern initializer","optional-binding-condition --> ``let`` pattern initializer-OPT | ``var`` pattern initializer-OPT"]},{"anchor":"Repeat-While-Statement","level":3,"type":"heading","text":"Repeat-While Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement allows a block of code to be executed one or more times,"},{"type":"text","text":" "},{"type":"text","text":"as long as a condition remains true."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["repeat {","   <#statements#>","} while <#condition#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement is executed as follows:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The program executes the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and execution continues to step 2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition"}]},{"type":"text","text":" is evaluated.If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", execution returns to step 1."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", the program is finished executing the "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition"}]},{"type":"text","text":" is evaluated after the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":" are executed,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":" in a "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement are executed at least once."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition"}]},{"type":"text","text":" "},{"type":"text","text":"must be of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or a type bridged to "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a repeat-while statement","","repeat-while-statement --> ``repeat`` code-block ``while`` expression"]},{"anchor":"Branch-Statements","level":2,"type":"heading","text":"Branch Statements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Branch statements allow the program to execute certain parts of code"},{"type":"text","text":" "},{"type":"text","text":"depending on the value of one or more conditions."},{"type":"text","text":" "},{"type":"text","text":"The values of the conditions specified in a branch statement"},{"type":"text","text":" "},{"type":"text","text":"control how the program branches and, therefore, what block of code is executed."},{"type":"text","text":" "},{"type":"text","text":"Swift has three branch statements:"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement, a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement, and a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Control flow in an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement or a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement can be changed by a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"and is discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement"},{"type":"text","text":" below."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a branch statement","","branch-statement --> if-statement","branch-statement --> guard-statement","branch-statement --> switch-statement"]},{"anchor":"If-Statement","level":3,"type":"heading","text":"If Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement is used for executing code"},{"type":"text","text":" "},{"type":"text","text":"based on the evaluation of one or more conditions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two basic forms of an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"In each form, the opening and closing braces are required."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first form allows code to be executed only when a condition is true"},{"type":"text","text":" "},{"type":"text","text":"and has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["if <#condition#> {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second form of an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement provides an additional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"else clause"}]},{"type":"text","text":" "},{"type":"text","text":"(introduced by the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" keyword)"},{"type":"text","text":" "},{"type":"text","text":"and is used for executing one part of code when the condition is true"},{"type":"text","text":" "},{"type":"text","text":"and another part of code when the same condition is false."},{"type":"text","text":" "},{"type":"text","text":"When a single else clause is present, an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["if <#condition#> {","   <#statements to execute if condition is true#>","} else {","   <#statements to execute if condition is false#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The else clause of an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement can contain another "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to test more than one condition."},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement chained together in this way has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["if <#condition 1#> {","   <#statements to execute if condition 1 is true#>","} else if <#condition 2#> {","   <#statements to execute if condition 2 is true#>","} else {","   <#statements to execute if both conditions are false#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of any condition in an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"must be of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or a type bridged to "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The condition can also be an optional binding declaration,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of an if statement","","if-statement --> ``if`` condition-list code-block else-clause-OPT","else-clause --> ``else`` code-block | ``else`` if-statement"]},{"anchor":"Guard-Statement","level":3,"type":"heading","text":"Guard Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement is used to transfer program control out of a scope"},{"type":"text","text":" "},{"type":"text","text":"if one or more conditions aren’t met."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["guard <#condition#> else {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of any condition in a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"must be of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or a type bridged to "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The condition can also be an optional binding declaration,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any constants or variables assigned a value"},{"type":"text","text":" "},{"type":"text","text":"from an optional binding declaration in a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement condition"},{"type":"text","text":" "},{"type":"text","text":"can be used for the rest of the guard statement’s enclosing scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause of a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement is required,"},{"type":"text","text":" "},{"type":"text","text":"and must either call a function with the "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" return type"},{"type":"text","text":" "},{"type":"text","text":"or transfer program control outside the guard statement’s enclosing scope"},{"type":"text","text":" "},{"type":"text","text":"using one of the following statements:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"return"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"break"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"continue"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"throw"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Control transfer statements are discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Control-Transfer-Statements"},{"type":"text","text":" below."},{"type":"text","text":" "},{"type":"text","text":"For more information on functions with the "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" return type,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a guard statement","","guard-statement --> ``guard`` condition-list ``else`` code-block"]},{"anchor":"Switch-Statement","level":3,"type":"heading","text":"Switch Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement allows certain blocks of code to be executed"},{"type":"text","text":" "},{"type":"text","text":"depending on the value of a control expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["switch <#control expression#> {","   case <#pattern 1#>:","      <#statements#>","   case <#pattern 2#> where <#condition#>:","      <#statements#>","   case <#pattern 3#> where <#condition#>,","        <#pattern 4#> where <#condition#>:","      <#statements#>","   default:","      <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"control expression"}]},{"type":"text","text":" of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement is evaluated"},{"type":"text","text":" "},{"type":"text","text":"and then compared with the patterns specified in each case."},{"type":"text","text":" "},{"type":"text","text":"If a match is found,"},{"type":"text","text":" "},{"type":"text","text":"the program executes the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":" listed within the scope of that case."},{"type":"text","text":" "},{"type":"text","text":"The scope of each case can’t be empty."},{"type":"text","text":" "},{"type":"text","text":"As a result, you must include at least one statement"},{"type":"text","text":" "},{"type":"text","text":"following the colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":") of each case label. Use a single "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"if you don’t intend to execute any code in the body of a matched case."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values of expressions your code can branch on are very flexible. For example,"},{"type":"text","text":" "},{"type":"text","text":"in addition to the values of scalar types, such as integers and characters,"},{"type":"text","text":" "},{"type":"text","text":"your code can branch on the values of any type, including floating-point numbers, strings,"},{"type":"text","text":" "},{"type":"text","text":"tuples, instances of custom classes, and optionals."},{"type":"text","text":" "},{"type":"text","text":"The value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"control expression"}]},{"type":"text","text":" can even be matched to the value of a case in an enumeration"},{"type":"text","text":" "},{"type":"text","text":"and checked for inclusion in a specified range of values."},{"type":"text","text":" "},{"type":"text","text":"For examples of how to use these various types of values in "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Switch"},{"type":"text","text":" in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case can optionally contain a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause after each pattern."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"where clause"}]},{"type":"text","text":" is introduced by the "},{"type":"codeVoice","code":"where"},{"type":"text","text":" keyword followed by an expression,"},{"type":"text","text":" "},{"type":"text","text":"and is used to provide an additional condition"},{"type":"text","text":" "},{"type":"text","text":"before a pattern in a case is considered matched to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"control expression"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause is present, the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":" within the relevant case"},{"type":"text","text":" "},{"type":"text","text":"are executed only if the value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"control expression"}]},{"type":"text","text":" "},{"type":"text","text":"matches one of the patterns of the case and the expression of the "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example, a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"control expression"}]},{"type":"text","text":" matches the case in the example below"},{"type":"text","text":" "},{"type":"text","text":"only if it’s a tuple that contains two elements of the same value, such as "},{"type":"codeVoice","code":"(1, 1)"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["case let (x, y) where x == y:"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As the above example shows, patterns in a case can also bind constants"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword (they can also bind variables using the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" keyword)."},{"type":"text","text":" "},{"type":"text","text":"These constants (or variables) can then be referenced in a corresponding "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"type":"text","text":" "},{"type":"text","text":"and throughout the rest of the code within the scope of the case."},{"type":"text","text":" "},{"type":"text","text":"If the case contains multiple patterns that match the control expression,"},{"type":"text","text":" "},{"type":"text","text":"all of the patterns must contain the same constant or variable bindings,"},{"type":"text","text":" "},{"type":"text","text":"and each bound variable or constant must have the same type"},{"type":"text","text":" "},{"type":"text","text":"in all of the case’s patterns."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement can also include a default case, introduced by the "},{"type":"codeVoice","code":"default"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"The code within a default case is executed only if no other cases match the control expression."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement can include only one default case,"},{"type":"text","text":" "},{"type":"text","text":"which must appear at the end of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although the actual execution order of pattern-matching operations,"},{"type":"text","text":" "},{"type":"text","text":"and in particular the evaluation order of patterns in cases, is unspecified,"},{"type":"text","text":" "},{"type":"text","text":"pattern matching in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement behaves"},{"type":"text","text":" "},{"type":"text","text":"as if the evaluation is performed in source order—that is,"},{"type":"text","text":" "},{"type":"text","text":"the order in which they appear in source code."},{"type":"text","text":" "},{"type":"text","text":"As a result, if multiple cases contain patterns that evaluate to the same value,"},{"type":"text","text":" "},{"type":"text","text":"and thus can match the value of the control expression,"},{"type":"text","text":" "},{"type":"text","text":"the program executes only the code within the first matching case in source order."}]},{"anchor":"Switch-Statements-Must-Be-Exhaustive","level":4,"type":"heading","text":"Switch Statements Must Be Exhaustive"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift,"},{"type":"text","text":" "},{"type":"text","text":"every possible value of the control expression’s type"},{"type":"text","text":" "},{"type":"text","text":"must match the value of at least one pattern of a case."},{"type":"text","text":" "},{"type":"text","text":"When this simply isn’t feasible"},{"type":"text","text":" "},{"type":"text","text":"(for example, when the control expression’s type is "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"you can include a default case to satisfy the requirement."}]},{"anchor":"Switching-Over-Future-Enumeration-Cases","level":4,"type":"heading","text":"Switching Over Future Enumeration Cases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nonfrozen enumeration"}]},{"type":"text","text":" is a special kind of enumeration"},{"type":"text","text":" "},{"type":"text","text":"that may gain new enumeration cases in the future—"},{"type":"text","text":" "},{"type":"text","text":"even after you compile and ship an app."},{"type":"text","text":" "},{"type":"text","text":"Switching over a nonfrozen enumeration requires extra consideration."},{"type":"text","text":" "},{"type":"text","text":"When a library’s authors mark an enumeration as nonfrozen,"},{"type":"text","text":" "},{"type":"text","text":"they reserve the right to add new enumeration cases,"},{"type":"text","text":" "},{"type":"text","text":"and any code that interacts with that enumeration"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" be able to handle those future cases without being recompiled."},{"type":"text","text":" "},{"type":"text","text":"Code that’s compiled in library evolution mode,"},{"type":"text","text":" "},{"type":"text","text":"code in the standard library,"},{"type":"text","text":" "},{"type":"text","text":"Swift overlays for Apple frameworks,"},{"type":"text","text":" "},{"type":"text","text":"and C and Objective-C code can declare nonfrozen enumerations."},{"type":"text","text":" "},{"type":"text","text":"For information about frozen and nonfrozen enumerations,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When switching over a nonfrozen enumeration value,"},{"type":"text","text":" "},{"type":"text","text":"you always need to include a default case,"},{"type":"text","text":" "},{"type":"text","text":"even if every case of the enumeration already has a corresponding switch case."},{"type":"text","text":" "},{"type":"text","text":"You can apply the "},{"type":"codeVoice","code":"@unknown"},{"type":"text","text":" attribute to the default case,"},{"type":"text","text":" "},{"type":"text","text":"which indicates that the default case should match only enumeration cases"},{"type":"text","text":" "},{"type":"text","text":"that are added in the future."},{"type":"text","text":" "},{"type":"text","text":"Swift produces a warning"},{"type":"text","text":" "},{"type":"text","text":"if the default case matches"},{"type":"text","text":" "},{"type":"text","text":"any enumeration case that’s known at compiler time."},{"type":"text","text":" "},{"type":"text","text":"This future warning informs you that the library author"},{"type":"text","text":" "},{"type":"text","text":"added a new case to the enumeration"},{"type":"text","text":" "},{"type":"text","text":"that doesn’t have a corresponding switch case."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example switches over all three existing cases of"},{"type":"text","text":" "},{"type":"text","text":"the standard library’s "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation"},{"type":"text","text":" "},{"type":"text","text":"enumeration."},{"type":"text","text":" "},{"type":"text","text":"If you add additional cases in the future,"},{"type":"text","text":" "},{"type":"text","text":"the compiler generates a warning to indicate"},{"type":"text","text":" "},{"type":"text","text":"that you need to update the switch statement"},{"type":"text","text":" "},{"type":"text","text":"to take the new cases into account."}]},{"type":"codeListing","syntax":"swift","code":["let representation: Mirror.AncestorRepresentation = .generated","switch representation {","case .customized:","    print(\"Use the nearest ancestor’s implementation.\")","case .generated:","    print(\"Generate a default mirror for all ancestor classes.\")","case .suppressed:","    print(\"Suppress the representation of all ancestor classes.\")","@unknown default:","    print(\"Use a representation that was unknown when this code was compiled.\")","}","\/\/ Prints \"Generate a default mirror for all ancestor classes.\""]},{"anchor":"Execution-Does-Not-Fall-Through-Cases-Implicitly","level":4,"type":"heading","text":"Execution Does Not Fall Through Cases Implicitly"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the code within a matched case has finished executing,"},{"type":"text","text":" "},{"type":"text","text":"the program exits from the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Program execution doesn’t continue or “fall through” to the next case or default case."},{"type":"text","text":" "},{"type":"text","text":"That said, if you want execution to continue from one case to the next,"},{"type":"text","text":" "},{"type":"text","text":"explicitly include a "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"which simply consists of the "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"in the case from which you want execution to continue."},{"type":"text","text":" "},{"type":"text","text":"For more information about the "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Fallthrough-Statement"},{"type":"text","text":" below."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a switch statement","","switch-statement --> ``switch`` expression ``{`` switch-cases-OPT ``}``","switch-cases --> switch-case switch-cases-OPT","switch-case --> case-label statements","switch-case --> default-label statements","switch-case --> conditional-switch-case","","case-label --> attributes-OPT ``case`` case-item-list ``:``","case-item-list --> pattern where-clause-OPT | pattern where-clause-OPT ``,`` case-item-list","default-label --> attributes-OPT ``default`` ``:``","","where-clause --> ``where`` where-expression","where-expression --> expression","","conditional-switch-case --> switch-if-directive-clause switch-elseif-directive-clauses-OPT switch-else-directive-clause-OPT endif-directive","switch-if-directive-clause --> if-directive compilation-condition switch-cases-OPT","switch-elseif-directive-clauses --> elseif-directive-clause switch-elseif-directive-clauses-OPT","switch-elseif-directive-clause --> elseif-directive compilation-condition switch-cases-OPT","switch-else-directive-clause --> else-directive switch-cases-OPT"]},{"anchor":"Labeled-Statement","level":2,"type":"heading","text":"Labeled Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can prefix a loop statement, an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement, a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"or a "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statement label"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which consists of the name of the label followed immediately by a colon (:)."},{"type":"text","text":" "},{"type":"text","text":"Use statement labels with "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statements to be explicit"},{"type":"text","text":" "},{"type":"text","text":"about how you want to change control flow in a loop statement or a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement"},{"type":"text","text":" below."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The scope of a labeled statement is the entire statement following the statement label."},{"type":"text","text":" "},{"type":"text","text":"You can nest labeled statements, but the name of each statement label must be unique."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information and to see examples"},{"type":"text","text":" "},{"type":"text","text":"of how to use statement labels,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements"},{"type":"text","text":" in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a labeled statement","","labeled-statement --> statement-label loop-statement","labeled-statement --> statement-label if-statement","labeled-statement --> statement-label switch-statement","labeled-statement --> statement-label do-statement","","statement-label --> label-name ``:``","label-name --> identifier"]},{"anchor":"Control-Transfer-Statements","level":2,"type":"heading","text":"Control Transfer Statements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As instruções de transferência de controle podem alterar a ordem na qual cada código do programa é executado"},{"type":"text","text":" "},{"type":"text","text":"transferindo incondicionalmente o controle do programa de um pedaço de código para outro."},{"type":"text","text":" "},{"type":"text","text":"O Swift possui cinco instruções de transferência de controle: "},{"type":"codeVoice","code":"break"},{"type":"text","text":", "},{"type":"codeVoice","code":"continue"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":","},{"type":"codeVoice","code":"return"},{"type":"text","text":" e "},{"type":"codeVoice","code":"throw"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a control transfer statement","","control-transfer-statement --> break-statement","control-transfer-statement --> continue-statement","control-transfer-statement --> fallthrough-statement","control-transfer-statement --> return-statement","control-transfer-statement --> throw-statement"]},{"anchor":"Break-Statement","level":3,"type":"heading","text":"Break Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement ends program execution of a loop,"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement, or a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement can consist of only the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"or it can consist of the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" keyword followed by the name of a statement label,"},{"type":"text","text":" "},{"type":"text","text":"as shown below."}]},{"type":"codeListing","syntax":"markdown","code":["break","break <#label name#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement is followed by the name of a statement label,"},{"type":"text","text":" "},{"type":"text","text":"it ends program execution of the loop,"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement, or "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement named by that label."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement isn’t followed by the name of a statement label,"},{"type":"text","text":" "},{"type":"text","text":"it ends program execution of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement or the innermost enclosing loop"},{"type":"text","text":" "},{"type":"text","text":"statement in which it occurs."},{"type":"text","text":" "},{"type":"text","text":"You can’t use an unlabeled "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement to break out of an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, program control is then transferred to the first line"},{"type":"text","text":" "},{"type":"text","text":"of code following the enclosing loop or "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement, if any."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For examples of how to use a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a break statement","","break-statement --> ``break`` label-name-OPT"]},{"anchor":"Continue-Statement","level":3,"type":"heading","text":"Continue Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement ends program execution of the current iteration of a loop"},{"type":"text","text":" "},{"type":"text","text":"statement but doesn’t stop execution of the loop statement."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement can consist of only the "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"or it can consist of the "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" keyword followed by the name of a statement label,"},{"type":"text","text":" "},{"type":"text","text":"as shown below."}]},{"type":"codeListing","syntax":"markdown","code":["continue","continue <#label name#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement is followed by the name of a statement label,"},{"type":"text","text":" "},{"type":"text","text":"it ends program execution of the current iteration"},{"type":"text","text":" "},{"type":"text","text":"of the loop statement named by that label."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement isn’t followed by the name of a statement label,"},{"type":"text","text":" "},{"type":"text","text":"it ends program execution of the current iteration"},{"type":"text","text":" "},{"type":"text","text":"of the innermost enclosing loop statement in which it occurs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, program control is then transferred to the condition"},{"type":"text","text":" "},{"type":"text","text":"of the enclosing loop statement."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a "},{"type":"codeVoice","code":"for"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"the increment expression is still evaluated after the "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement is executed,"},{"type":"text","text":" "},{"type":"text","text":"because the increment expression is evaluated after the execution of the loop’s body."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For examples of how to use a "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Continue"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a continue statement","","continue-statement --> ``continue`` label-name-OPT"]},{"anchor":"Fallthrough-Statement","level":3,"type":"heading","text":"Fallthrough Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" statement consists of the "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"and occurs only in a case block of a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" statement causes program execution to continue"},{"type":"text","text":" "},{"type":"text","text":"from one case in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement to the next case."},{"type":"text","text":" "},{"type":"text","text":"Program execution continues to the next case"},{"type":"text","text":" "},{"type":"text","text":"even if the patterns of the case label don’t match"},{"type":"text","text":" "},{"type":"text","text":"the value of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s control expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" statement can appear anywhere inside a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"not just as the last statement of a case block,"},{"type":"text","text":" "},{"type":"text","text":"but it can’t be used in the final case block."},{"type":"text","text":" "},{"type":"text","text":"It also can’t transfer control into a case block"},{"type":"text","text":" "},{"type":"text","text":"whose pattern contains value binding patterns."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For an example of how to use a "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" statement in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Control-Transfer-Statements"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a fallthrough statement","","fallthrough-statement --> ``fallthrough``"]},{"anchor":"Return-Statement","level":3,"type":"heading","text":"Return Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement occurs in the body of a function or method definition"},{"type":"text","text":" "},{"type":"text","text":"and causes program execution to return to the calling function or method."},{"type":"text","text":" "},{"type":"text","text":"Program execution continues at the point immediately following the function or method call."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement can consist of only the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"or it can consist of the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword followed by an expression, as shown below."}]},{"type":"codeListing","syntax":"markdown","code":["return","return <#expression#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement is followed by an expression,"},{"type":"text","text":" "},{"type":"text","text":"the value of the expression is returned to the calling function or method."},{"type":"text","text":" "},{"type":"text","text":"If the value of the expression doesn’t match the value of the return type"},{"type":"text","text":" "},{"type":"text","text":"declared in the function or method declaration,"},{"type":"text","text":" "},{"type":"text","text":"the expression’s value is converted to the return type"},{"type":"text","text":" "},{"type":"text","text":"before it’s returned to the calling function or method."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers"},{"type":"text","text":", a special form of the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement ("},{"type":"codeVoice","code":"return nil"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"can be used in a failable initializer to indicate initialization failure."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement isn’t followed by an expression,"},{"type":"text","text":" "},{"type":"text","text":"it can be used only to return from a function or method that doesn’t return a value"},{"type":"text","text":" "},{"type":"text","text":"(that is, when the return type of the function or method is "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" or "},{"type":"codeVoice","code":"()"},{"type":"text","text":")."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a return statement","","return-statement --> ``return`` expression-OPT"]},{"anchor":"Throw-Statement","level":3,"type":"heading","text":"Throw Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement occurs in the body of a throwing function or method,"},{"type":"text","text":" "},{"type":"text","text":"or in the body of a closure expression whose type is marked with the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement causes a program to end execution of the current scope"},{"type":"text","text":" "},{"type":"text","text":"and begin error propagation to its enclosing scope."},{"type":"text","text":" "},{"type":"text","text":"The error that’s thrown continues to propagate until it’s handled by a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause"},{"type":"text","text":" "},{"type":"text","text":"of a "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement consists of the "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"followed by an expression, as shown below."}]},{"type":"codeListing","syntax":"markdown","code":["throw <#expression#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"text","text":" must have a type that conforms to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For an example of how to use a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a throw statement","","throw-statement --> ``throw`` expression"]},{"anchor":"Defer-Statement","level":2,"type":"heading","text":"Defer Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement is used for executing code"},{"type":"text","text":" "},{"type":"text","text":"just before transferring program control outside of the scope"},{"type":"text","text":" "},{"type":"text","text":"that the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement appears in."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["defer {","    <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The statements within the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement are executed"},{"type":"text","text":" "},{"type":"text","text":"no matter how program control is transferred."},{"type":"text","text":" "},{"type":"text","text":"This means that a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement can be used, for example,"},{"type":"text","text":" "},{"type":"text","text":"to perform manual resource management such as closing file descriptors,"},{"type":"text","text":" "},{"type":"text","text":"and to perform actions that need to happen even if an error is thrown."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statements appear in the same scope,"},{"type":"text","text":" "},{"type":"text","text":"the order they appear is the reverse of the order they’re executed."},{"type":"text","text":" "},{"type":"text","text":"Executing the last "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement in a given scope first"},{"type":"text","text":" "},{"type":"text","text":"means that statements inside that last "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"can refer to resources that will be cleaned up by other "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statements."}]},{"type":"codeListing","syntax":"swift","code":["func f() {","    defer { print(\"First defer\") }","    defer { print(\"Second defer\") }","    print(\"End of function\")","}","f()","\/\/ Prints \"End of function\"","\/\/ Prints \"Second defer\"","\/\/ Prints \"First defer\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The statements in the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement can’t"},{"type":"text","text":" "},{"type":"text","text":"transfer program control outside of the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a defer statement","","defer-statement --> ``defer`` code-block"]},{"anchor":"Do-Statement","level":2,"type":"heading","text":"Do Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement is used to introduce a new scope"},{"type":"text","text":" "},{"type":"text","text":"and can optionally contain one or more "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses,"},{"type":"text","text":" "},{"type":"text","text":"which contain patterns that match against defined error conditions."},{"type":"text","text":" "},{"type":"text","text":"Variables and constants declared in the scope of a "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"can be accessed only within that scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement in Swift is similar to"},{"type":"text","text":" "},{"type":"text","text":"curly braces ("},{"type":"codeVoice","code":"{}"},{"type":"text","text":") in C used to delimit a code block,"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t incur a performance cost at runtime."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["do {","    try <#expression#>","    <#statements#>","} catch <#pattern 1#> {","    <#statements#>","} catch <#pattern 2#> where <#condition#> {","    <#statements#>","} catch <#pattern 3#>, <#pattern 4#> where <#condition#> {","    <#statements#>","} catch {","    <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If any statement in the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" code block throws an error,"},{"type":"text","text":" "},{"type":"text","text":"program control is transferred"},{"type":"text","text":" "},{"type":"text","text":"to the first "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause whose pattern matches the error."},{"type":"text","text":" "},{"type":"text","text":"If none of the clauses match,"},{"type":"text","text":" "},{"type":"text","text":"the error propagates to the surrounding scope."},{"type":"text","text":" "},{"type":"text","text":"If an error is unhandled at the top level,"},{"type":"text","text":" "},{"type":"text","text":"program execution stops with a runtime error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"the compiler attempts to infer whether "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses are exhaustive."},{"type":"text","text":" "},{"type":"text","text":"If such a determination can be made, the error is considered handled."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the error can propagate out of the containing scope,"},{"type":"text","text":" "},{"type":"text","text":"which means"},{"type":"text","text":" "},{"type":"text","text":"the error must be handled by an enclosing "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause"},{"type":"text","text":" "},{"type":"text","text":"or the containing function must be declared with "},{"type":"codeVoice","code":"throws"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause that has multiple patterns"},{"type":"text","text":" "},{"type":"text","text":"matches the error if any of its patterns match the error."},{"type":"text","text":" "},{"type":"text","text":"If a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause contains multiple patterns,"},{"type":"text","text":" "},{"type":"text","text":"all of the patterns must contain the same constant or variable bindings,"},{"type":"text","text":" "},{"type":"text","text":"and each bound variable or constant must have the same type"},{"type":"text","text":" "},{"type":"text","text":"in all of the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause’s patterns."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To ensure that an error is handled,"},{"type":"text","text":" "},{"type":"text","text":"use a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause with a pattern that matches all errors,"},{"type":"text","text":" "},{"type":"text","text":"such as a wildcard pattern ("},{"type":"codeVoice","code":"_"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"If a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause doesn’t specify a pattern,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause matches and binds any error to a local constant named "},{"type":"codeVoice","code":"error"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For more information about the patterns you can use in a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To see an example of how to use a "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement with several "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a do statement","","do-statement --> ``do`` code-block catch-clauses-OPT","catch-clauses --> catch-clause catch-clauses-OPT","catch-clause --> ``catch`` catch-pattern-list-OPT code-block","catch-pattern-list --> catch-pattern | catch-pattern ``,`` catch-pattern-list","catch-pattern --> pattern where-clause-OPT"]},{"anchor":"Compiler-Control-Statements","level":2,"type":"heading","text":"Compiler Control Statements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Compiler control statements allow the program to change aspects of the compiler’s behavior."},{"type":"text","text":" "},{"type":"text","text":"Swift has three compiler control statements:"},{"type":"text","text":" "},{"type":"text","text":"a conditional compilation block"},{"type":"text","text":" "},{"type":"text","text":"a line control statement,"},{"type":"text","text":" "},{"type":"text","text":"and a compile-time diagnostic statement."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a compiler control statement","","compiler-control-statement --> conditional-compilation-block","compiler-control-statement --> line-control-statement","compiler-control-statement --> diagnostic-statement"]},{"anchor":"Conditional-Compilation-Block","level":3,"type":"heading","text":"Conditional Compilation Block"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A conditional compilation block allows code to be conditionally compiled"},{"type":"text","text":" "},{"type":"text","text":"depending on the value of one or more compilation conditions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every conditional compilation block begins with the "},{"type":"codeVoice","code":"#if"},{"type":"text","text":" compilation directive"},{"type":"text","text":" "},{"type":"text","text":"and ends with the "},{"type":"codeVoice","code":"#endif"},{"type":"text","text":" compilation directive."},{"type":"text","text":" "},{"type":"text","text":"A simple conditional compilation block has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["#if <#compilation condition#>","    <#statements#>","#endif"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike the condition of an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation condition"}]},{"type":"text","text":" is evaluated at compile time."},{"type":"text","text":" "},{"type":"text","text":"As a result,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":" are compiled and executed only if the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation condition"}]},{"type":"text","text":" "},{"type":"text","text":"evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" at compile time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation condition"}]},{"type":"text","text":" can include the "},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" Boolean literals,"},{"type":"text","text":" "},{"type":"text","text":"an identifier used with the "},{"type":"codeVoice","code":"-D"},{"type":"text","text":" command line flag, or any of the platform"},{"type":"text","text":" "},{"type":"text","text":"conditions listed in the table below."}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Platform condition"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Valid arguments"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"os()"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"macOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"iOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"watchOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"tvOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"Linux"},{"type":"text","text":", "},{"type":"codeVoice","code":"Windows"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"arch()"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"i386"},{"type":"text","text":", "},{"type":"codeVoice","code":"x86_64"},{"type":"text","text":", "},{"type":"codeVoice","code":"arm"},{"type":"text","text":", "},{"type":"codeVoice","code":"arm64"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"swift()"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":">="},{"type":"text","text":" or "},{"type":"codeVoice","code":"<"},{"type":"text","text":" followed by a version number"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"compiler()"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":">="},{"type":"text","text":" or "},{"type":"codeVoice","code":"<"},{"type":"text","text":" followed by a version number"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"canImport()"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A module name"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"targetEnvironment()"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"simulator"},{"type":"text","text":", "},{"type":"codeVoice","code":"macCatalyst"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The version number for the "},{"type":"codeVoice","code":"swift()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"compiler()"},{"type":"text","text":" platform conditions"},{"type":"text","text":" "},{"type":"text","text":"consists of a major number, optional minor number, optional patch number, and so on,"},{"type":"text","text":" "},{"type":"text","text":"with a dot ("},{"type":"codeVoice","code":"."},{"type":"text","text":") separating each part of the version number."},{"type":"text","text":" "},{"type":"text","text":"There must not be whitespace between the comparison operator and the version number."},{"type":"text","text":" "},{"type":"text","text":"The version for "},{"type":"codeVoice","code":"compiler()"},{"type":"text","text":" is the compiler version,"},{"type":"text","text":" "},{"type":"text","text":"regardless of the Swift version setting passed to the compiler."},{"type":"text","text":" "},{"type":"text","text":"The version for "},{"type":"codeVoice","code":"swift()"},{"type":"text","text":" is the language version currently being compiled."},{"type":"text","text":" "},{"type":"text","text":"For example, if you compile your code using the Swift 5 compiler in Swift 4.2 mode,"},{"type":"text","text":" "},{"type":"text","text":"the compiler version is 5 and the language version is 4.2."},{"type":"text","text":" "},{"type":"text","text":"With those settings,"},{"type":"text","text":" "},{"type":"text","text":"the following code prints all three messages:"}]},{"type":"codeListing","syntax":"swift","code":["#if compiler(>=5)","print(\"Compiled with the Swift 5 compiler or later\")","#endif","#if swift(>=4.2)","print(\"Compiled in Swift 4.2 mode or later\")","#endif","#if compiler(>=5) && swift(<5)","print(\"Compiled with the Swift 5 compiler or later in a Swift mode earlier than 5\")","#endif","\/\/ Prints \"Compiled with the Swift 5 compiler or later\"","\/\/ Prints \"Compiled in Swift 4.2 mode or later\"","\/\/ Prints \"Compiled with the Swift 5 compiler or later in a Swift mode earlier than 5\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The argument for the "},{"type":"codeVoice","code":"canImport()"},{"type":"text","text":" platform condition"},{"type":"text","text":" "},{"type":"text","text":"is the name of a module that may not be present on all platforms."},{"type":"text","text":" "},{"type":"text","text":"The module can include periods ("},{"type":"codeVoice","code":"."},{"type":"text","text":") in its name."},{"type":"text","text":" "},{"type":"text","text":"This condition tests whether it’s possible to import the module,"},{"type":"text","text":" "},{"type":"text","text":"but doesn’t actually import it."},{"type":"text","text":" "},{"type":"text","text":"If the module is present, the platform condition returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"otherwise, it returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"targetEnvironment()"},{"type":"text","text":" platform condition"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when code is being compiled for the specified environment;"},{"type":"text","text":" "},{"type":"text","text":"otherwise, it returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"arch(arm)"},{"type":"text","text":" platform condition doesn’t return "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for ARM 64 devices."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"arch(i386)"},{"type":"text","text":" platform condition returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" "},{"type":"text","text":"when code is compiled for the 32–bit iOS simulator."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can combine and negate compilation conditions using the logical operators"},{"type":"text","text":" "},{"type":"codeVoice","code":"&&"},{"type":"text","text":", "},{"type":"codeVoice","code":"||"},{"type":"text","text":", and "},{"type":"codeVoice","code":"!"},{"type":"text","text":" "},{"type":"text","text":"and use parentheses for grouping."},{"type":"text","text":" "},{"type":"text","text":"These operators have the same associativity and precedence as the"},{"type":"text","text":" "},{"type":"text","text":"logical operators that are used to combine ordinary Boolean expressions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"you can add multiple conditional branches to test for different compilation conditions."},{"type":"text","text":" "},{"type":"text","text":"You can add any number of additional branches using "},{"type":"codeVoice","code":"#elseif"},{"type":"text","text":" clauses."},{"type":"text","text":" "},{"type":"text","text":"You can also add a final additional branch using an "},{"type":"codeVoice","code":"#else"},{"type":"text","text":" clause."},{"type":"text","text":" "},{"type":"text","text":"Conditional compilation blocks that contain multiple branches"},{"type":"text","text":" "},{"type":"text","text":"have the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["#if <#compilation condition 1#>","    <#statements to compile if compilation condition 1 is true#>","#elseif <#compilation condition 2#>","    <#statements to compile if compilation condition 2 is true#>","#else","    <#statements to compile if both compilation conditions are false#>","#endif"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each statement in the body of a conditional compilation block is parsed"},{"type":"text","text":" "},{"type":"text","text":"even if it’s not compiled."},{"type":"text","text":" "},{"type":"text","text":"However, there’s an exception"},{"type":"text","text":" "},{"type":"text","text":"if the compilation condition includes a "},{"type":"codeVoice","code":"swift()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"compiler()"},{"type":"text","text":" platform condition:"},{"type":"text","text":" "},{"type":"text","text":"The statements are parsed"},{"type":"text","text":" "},{"type":"text","text":"only if the language or compiler version matches"},{"type":"text","text":" "},{"type":"text","text":"what is specified in the platform condition."},{"type":"text","text":" "},{"type":"text","text":"This exception ensures that an older compiler doesn’t attempt to parse"},{"type":"text","text":" "},{"type":"text","text":"syntax introduced in a newer version of Swift."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For information about how you can wrap"},{"type":"text","text":" "},{"type":"text","text":"explicit member expressions in conditional compilation blocks,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a conditional compilation block","","conditional-compilation-block --> if-directive-clause elseif-directive-clauses-OPT else-directive-clause-OPT endif-directive","","if-directive-clause --> if-directive compilation-condition statements-OPT","elseif-directive-clauses --> elseif-directive-clause elseif-directive-clauses-OPT","elseif-directive-clause --> elseif-directive compilation-condition statements-OPT","else-directive-clause --> else-directive statements-OPT","if-directive --> ``#if``","elseif-directive --> ``#elseif``","else-directive --> ``#else``","endif-directive --> ``#endif``","","compilation-condition --> platform-condition","compilation-condition --> identifier","compilation-condition --> boolean-literal","compilation-condition --> ``(`` compilation-condition ``)``","compilation-condition --> ``!`` compilation-condition","compilation-condition --> compilation-condition ``&&`` compilation-condition","compilation-condition --> compilation-condition ``||`` compilation-condition","","platform-condition --> ``os`` ``(`` operating-system ``)``","platform-condition --> ``arch`` ``(`` architecture ``)``","platform-condition --> ``swift`` ``(`` ``>=`` swift-version ``)`` | ``swift`` ``(`` ``<`` swift-version ``)``","platform-condition --> ``compiler`` ``(`` ``>=`` swift-version ``)`` | ``compiler`` ``(`` ``<`` swift-version ``)``","platform-condition --> ``canImport`` ``(`` import-path ``)``","platform-condition --> ``targetEnvironment`` ``(`` environment ``)``","","operating-system --> ``macOS`` | ``iOS`` | ``watchOS`` | ``tvOS`` | ``Linux`` | ``Windows``","architecture --> ``i386`` | ``x86_64`` |  ``arm`` | ``arm64``","swift-version --> decimal-digits swift-version-continuation-OPT","swift-version-continuation --> ``.`` decimal-digits swift-version-continuation-OPT","environment --> ``simulator`` | ``macCatalyst``"]},{"anchor":"Line-Control-Statement","level":3,"type":"heading","text":"Line Control Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A line control statement is used to specify a line number and filename"},{"type":"text","text":" "},{"type":"text","text":"that can be different from the line number and filename of the source code being compiled."},{"type":"text","text":" "},{"type":"text","text":"Use a line control statement to change the source code location"},{"type":"text","text":" "},{"type":"text","text":"used by Swift for diagnostic and debugging purposes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A line control statement has the following forms:"}]},{"type":"codeListing","syntax":"markdown","code":["#sourceLocation(file: <#file path#>, line: <#line number#>)","#sourceLocation()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first form of a line control statement changes the values"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"codeVoice","code":"#line"},{"type":"text","text":", "},{"type":"codeVoice","code":"#file"},{"type":"text","text":", "},{"type":"codeVoice","code":"#fileID"},{"type":"text","text":", and "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":" "},{"type":"text","text":"literal expressions, beginning with the line of code following the line control statement."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"line number"}]},{"type":"text","text":" changes the value of "},{"type":"codeVoice","code":"#line"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and is any integer literal greater than zero."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"file path"}]},{"type":"text","text":" changes the value of "},{"type":"codeVoice","code":"#file"},{"type":"text","text":", "},{"type":"codeVoice","code":"#fileID"},{"type":"text","text":", and "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and is a string literal."},{"type":"text","text":" "},{"type":"text","text":"The specified string becomes the value of "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the last path component of the string is used by the value of "},{"type":"codeVoice","code":"#fileID"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For information about "},{"type":"codeVoice","code":"#file"},{"type":"text","text":", "},{"type":"codeVoice","code":"#fileID"},{"type":"text","text":", and "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second form of a line control statement, "},{"type":"codeVoice","code":"#sourceLocation()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"resets the source code location back to the default line numbering and file path."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a line control statement","","line-control-statement --> ``#sourceLocation`` ``(`` ``file:`` file-path ``,`` ``line:`` line-number ``)``","line-control-statement --> ``#sourceLocation`` ``(`` ``)``","line-number --> A decimal integer greater than zero","file-path --> static-string-literal"]},{"anchor":"Compile-Time-Diagnostic-Statement","level":3,"type":"heading","text":"Compile-Time Diagnostic Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A compile-time diagnostic statement causes the compiler"},{"type":"text","text":" "},{"type":"text","text":"to emit an error or a warning during compilation."},{"type":"text","text":" "},{"type":"text","text":"A compile-time diagnostic statement has the following forms:"}]},{"type":"codeListing","syntax":"markdown","code":["#error(\"<#error message#>\")","#warning(\"<#warning message#>\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first form emits the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"error message"}]},{"type":"text","text":" as a fatal error"},{"type":"text","text":" "},{"type":"text","text":"and terminates the compilation process."},{"type":"text","text":" "},{"type":"text","text":"The second form emits the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"warning message"}]},{"type":"text","text":" as a nonfatal warning"},{"type":"text","text":" "},{"type":"text","text":"and allows compilation to proceed."},{"type":"text","text":" "},{"type":"text","text":"You write the diagnostic message as a static string literal."},{"type":"text","text":" "},{"type":"text","text":"Static string literals can’t use features like"},{"type":"text","text":" "},{"type":"text","text":"string interpolation or concatenation,"},{"type":"text","text":" "},{"type":"text","text":"but they can use the multiline string literal syntax."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of a compile-time diagnostic statement","","diagnostic-statement --> ``#error`` ``(`` diagnostic-message ``)``","diagnostic-statement --> ``#warning`` ``(`` diagnostic-message ``)``","","diagnostic-message --> static-string-literal"]},{"anchor":"Availability-Condition","level":2,"type":"heading","text":"Availability Condition"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"availability condition"}]},{"type":"text","text":" is used as a condition of an "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"while"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement to query the availability of APIs at runtime,"},{"type":"text","text":" "},{"type":"text","text":"based on specified platforms arguments."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An availability condition has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["if #available(<#platform name#> <#version#>, <#...#>, *) {","    <#statements to execute if the APIs are available#>","} else {","    <#fallback statements to execute if the APIs are unavailable#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use an availability condition to execute a block of code,"},{"type":"text","text":" "},{"type":"text","text":"depending on whether the APIs you want to use are available at runtime."},{"type":"text","text":" "},{"type":"text","text":"The compiler uses the information from the availability condition"},{"type":"text","text":" "},{"type":"text","text":"when it verifies that the APIs in that block of code are available."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The availability condition takes a comma-separated list of platform names and versions."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"iOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"macOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"watchOS"},{"type":"text","text":", and "},{"type":"codeVoice","code":"tvOS"},{"type":"text","text":" for the platform names,"},{"type":"text","text":" "},{"type":"text","text":"and include the corresponding version numbers."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"*"},{"type":"text","text":" argument is required and specifies that, on any other platform,"},{"type":"text","text":" "},{"type":"text","text":"the body of the code block guarded by the availability condition"},{"type":"text","text":" "},{"type":"text","text":"executes on the minimum deployment target specified by your target."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike Boolean conditions, you can’t combine availability conditions using"},{"type":"text","text":" "},{"type":"text","text":"logical operators like "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" and "},{"type":"codeVoice","code":"||"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Instead of using "},{"type":"codeVoice","code":"!"},{"type":"text","text":" to negate an availability condition,"},{"type":"text","text":" "},{"type":"text","text":"use an unavailability condition, which has the following form:"}]},{"type":"codeListing","syntax":"markdown","code":["if #unavailable(<#platform name#> <#version#>, <#...#>) {","    <#fallback statements to execute if the APIs are unavailable#>","} else {","    <#statements to execute if the APIs are available#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"#unavailable"},{"type":"text","text":" form is syntactic sugar that negates the condition."},{"type":"text","text":" "},{"type":"text","text":"In an unavailability condition,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"*"},{"type":"text","text":" argument is implicit and must not be included."},{"type":"text","text":" "},{"type":"text","text":"It has the same meaning as the "},{"type":"codeVoice","code":"*"},{"type":"text","text":" argument in an availability condition."}]},{"type":"codeListing","syntax":"markdown","code":["Grammar of an availability condition","","availability-condition --> ``#available`` ``(`` availability-arguments ``)``","availability-condition --> ``#unavailable`` ``(`` availability-arguments ``)``","availability-arguments --> availability-argument | availability-argument ``,`` availability-arguments","availability-argument --> platform-name platform-version","availability-argument --> ``*``","","platform-name --> ``iOS`` | ``iOSApplicationExtension``","platform-name --> ``macOS`` | ``macOSApplicationExtension``","platform-name --> ``macCatalyst`` | ``macCatalystApplicationExtension``","platform-name --> ``watchOS`` | ``watchOSApplicationExtension``","platform-name --> ``tvOS`` | ``tvOSApplicationExtension``","platform-version --> decimal-digits","platform-version --> decimal-digits ``.`` decimal-digits","platform-version --> decimal-digits ``.`` decimal-digits ``.`` decimal-digits"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/statements"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"In Swift, there are three kinds of statements: simple statements, compiler control statements,"},{"type":"text","text":" "},{"type":"text","text":"and control flow statements."},{"type":"text","text":" "},{"type":"text","text":"Simple statements are the most common and consist of either an expression or a declaration."},{"type":"text","text":" "},{"type":"text","text":"Compiler control statements allow the program to change aspects of the compiler’s behavior"},{"type":"text","text":" "},{"type":"text","text":"and include a conditional compilation block and a line control statement."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Statements","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Reference","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutTheLanguageReference","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AboutTheLanguageReference":{"role":"article","title":"About the Language Reference","abstract":[{"type":"text","text":"This part of the book describes the formal grammar of the Swift programming language."},{"type":"text","text":" "},{"type":"text","text":"The grammar described here is intended to help you understand the language in more"},{"type":"text","text":" "},{"type":"text","text":"detail, rather than to allow you to directly implement a parser or compiler."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutTheLanguageReference","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/aboutthelanguagereference"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"abstract":[],"title":"Explicit Member Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Handling-Errors":{"abstract":[],"title":"Handling Errors","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors","url":"\/documentation\/the-swift-programming-language\/errorhandling#Handling-Errors"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"role":"article","title":"Lexical Structure","abstract":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lexical structure"}]},{"type":"text","text":" of Swift describes what sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"form valid tokens of the language."},{"type":"text","text":" "},{"type":"text","text":"These valid tokens form the lowest-level building blocks of the language"},{"type":"text","text":" "},{"type":"text","text":"and are used to describe the rest of the language in subsequent chapters."},{"type":"text","text":" "},{"type":"text","text":"A token consists of an identifier, keyword, punctuation, literal, or operator."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","title":"Attributes","abstract":[{"type":"text","text":"There are two kinds of attributes in Swift —"},{"type":"text","text":" "},{"type":"text","text":"those that apply to declarations and those that apply to types."},{"type":"text","text":" "},{"type":"text","text":"An attribute provides additional information about the declaration or type."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"discardableResult"},{"type":"text","text":" attribute on a function declaration indicates that,"},{"type":"text","text":" "},{"type":"text","text":"although the function returns a value,"},{"type":"text","text":" "},{"type":"text","text":"the compiler shouldn’t generate a warning if the return value is unused."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"role":"article","title":"Generic Parameters and Arguments","abstract":[{"type":"text","text":"This chapter describes parameters and arguments for generic types, functions, and"},{"type":"text","text":" "},{"type":"text","text":"initializers. When you declare a generic type, function, subscript, or initializer,"},{"type":"text","text":" "},{"type":"text","text":"you specify the type parameters that the generic type, function, or initializer"},{"type":"text","text":" "},{"type":"text","text":"can work with. These type parameters act as placeholders that"},{"type":"text","text":" "},{"type":"text","text":"are replaced by actual concrete type arguments when an instance of a generic type is"},{"type":"text","text":" "},{"type":"text","text":"created or a generic function or initializer is called."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments"},"https://developer.apple.com/documentation/swift/iteratorprotocol":{"title":"IteratorProtocol","titleInlineContent":[{"type":"text","text":"IteratorProtocol"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol","url":"https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"abstract":[],"title":"Break Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"abstract":[],"title":"Literal Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"role":"article","title":"Declarations","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"declaration"}]},{"type":"text","text":" introduces a new name or construct into your program."},{"type":"text","text":" "},{"type":"text","text":"For example, you use declarations to introduce functions and methods,"},{"type":"text","text":" "},{"type":"text","text":"to introduce variables and constants,"},{"type":"text","text":" "},{"type":"text","text":"and to define enumeration, structure, class, and protocol types."},{"type":"text","text":" "},{"type":"text","text":"You can also use a declaration to extend the behavior"},{"type":"text","text":" "},{"type":"text","text":"of an existing named type and to import symbols into your program that are declared elsewhere."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"role":"article","title":"Patterns","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" represents the structure of a single value"},{"type":"text","text":" "},{"type":"text","text":"or a composite value."},{"type":"text","text":" "},{"type":"text","text":"For example, the structure of a tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" is a comma-separated list of two"},{"type":"text","text":" "},{"type":"text","text":"elements. Because patterns represent the structure of a value rather than any"},{"type":"text","text":" "},{"type":"text","text":"one particular value, you can match them with a variety of values."},{"type":"text","text":" "},{"type":"text","text":"For instance, the pattern "},{"type":"codeVoice","code":"(x, y)"},{"type":"text","text":" matches the tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" and any other"},{"type":"text","text":" "},{"type":"text","text":"two-element tuple. In addition to matching a pattern with a value,"},{"type":"text","text":" "},{"type":"text","text":"you can extract part or all of a composite value and bind each part"},{"type":"text","text":" "},{"type":"text","text":"to a constant or variable name."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"role":"article","title":"Tipos","abstract":[{"type":"text","text":"Em Swift, existem dois tipos de dados: tipos nomeados e tipos compostos."},{"type":"text","text":" "},{"type":"text","text":"Um "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipo nomeado"}]},{"type":"text","text":" é um tipo que pode receber um nome específico quando é definido."},{"type":"text","text":" "},{"type":"text","text":"Tipos nomeados incluem classes, structs, enums, e protocolos."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, instâncias de uma classe definida pelo usuário chamada "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":"  tem o tipo "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Além dos tipos nomeados definidos pelo usuário, a biblioteca padrão do Swift define muitos tipos nomeados que são usados com mais frequência, incluindo aqueles que representam arrays, dicionários, e valores opcionais."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Fallthrough-Statement":{"abstract":[],"title":"Fallthrough Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Fallthrough-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Fallthrough-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Propagating-Errors-Using-Throwing-Functions":{"abstract":[],"title":"Propagating Errors Using Throwing Functions","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions","url":"\/documentation\/the-swift-programming-language\/errorhandling#Propagating-Errors-Using-Throwing-Functions"},"https://developer.apple.com/documentation/swift/mirror/ancestorrepresentation":{"title":"Mirror.AncestorRepresentation","titleInlineContent":[{"type":"text","text":"Mirror.AncestorRepresentation"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation","url":"https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Failable-Initializers":{"abstract":[],"title":"Failable Initializers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers","url":"\/documentation\/the-swift-programming-language\/declarations#Failable-Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Continue-Statement":{"abstract":[],"title":"Continue Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Continue-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"abstract":[],"title":"Functions that Never Return","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return"},"https://developer.apple.com/documentation/swift/sequence":{"title":"Sequence","titleInlineContent":[{"type":"text","text":"Sequence"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Break":{"abstract":[],"title":"Break","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break","url":"\/documentation\/the-swift-programming-language\/controlflow#Break"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Control-Transfer-Statements":{"abstract":[],"title":"Control Transfer Statements","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Control-Transfer-Statements","url":"\/documentation\/the-swift-programming-language\/controlflow#Control-Transfer-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optional-Binding":{"abstract":[],"title":"Optional Binding","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","url":"\/documentation\/the-swift-programming-language\/thebasics#Optional-Binding"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Labeled-Statements":{"abstract":[],"title":"Labeled Statements","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements","url":"\/documentation\/the-swift-programming-language\/controlflow#Labeled-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"abstract":[],"title":"frozen","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","url":"\/documentation\/the-swift-programming-language\/attributes#frozen"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Continue":{"abstract":[],"title":"Continue","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Continue","url":"\/documentation\/the-swift-programming-language\/controlflow#Continue"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Control-Transfer-Statements":{"abstract":[],"title":"Control Transfer Statements","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Control-Transfer-Statements","url":"\/documentation\/the-swift-programming-language\/statements#Control-Transfer-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Switch":{"abstract":[],"title":"Switch","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Switch","url":"\/documentation\/the-swift-programming-language\/controlflow#Switch"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"role":"article","title":"Expressions","abstract":[{"type":"text","text":"In Swift, there are four kinds of expressions:"},{"type":"text","text":" "},{"type":"text","text":"prefix expressions, infix expressions, primary expressions, and postfix expressions."},{"type":"text","text":" "},{"type":"text","text":"Evaluating an expression returns a value,"},{"type":"text","text":" "},{"type":"text","text":"causes a side effect, or both."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions"}}}