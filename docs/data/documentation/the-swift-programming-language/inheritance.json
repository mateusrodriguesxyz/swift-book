{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes in Swift can call and access"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and subscripts belonging to their superclass"},{"type":"text","text":" "},{"type":"text","text":"and can provide their own overriding versions of those methods, properties, and subscripts"},{"type":"text","text":" "},{"type":"text","text":"to refine or modify their behavior."},{"type":"text","text":" "},{"type":"text","text":"Swift helps to ensure your overrides are correct"},{"type":"text","text":" "},{"type":"text","text":"by checking that the override definition has a matching superclass definition."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes can also add property observers to inherited properties"},{"type":"text","text":" "},{"type":"text","text":"in order to be notified when the value of a property changes."},{"type":"text","text":" "},{"type":"text","text":"Property observers can be added to any property,"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether it was originally defined as a stored or computed property."}]},{"anchor":"Defining-a-Base-Class","level":2,"type":"heading","text":"Defining a Base Class"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any class that doesn’t inherit from another class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"base class"}]},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift classes don’t inherit from a universal base class."},{"type":"text","text":" "},{"type":"text","text":"Classes you define without specifying a superclass"},{"type":"text","text":" "},{"type":"text","text":"automatically become base classes for you to build upon."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a base class called "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This base class defines a stored property called "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" (inferring a property type of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property’s value is used by"},{"type":"text","text":" "},{"type":"text","text":"a read-only computed "},{"type":"codeVoice","code":"String"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"description"},{"type":"text","text":" "},{"type":"text","text":"to create a description of the vehicle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" base class also defines a method called "},{"type":"codeVoice","code":"makeNoise"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method doesn’t actually do anything for a base "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"but will be customized by subclasses of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" later on:"}]},{"type":"codeListing","syntax":"swift","code":["class Vehicle {","   var currentSpeed = 0.0","   var description: String {","      return \"traveling at \\(currentSpeed) miles per hour\"","   }","   func makeNoise() {","      \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You create a new instance of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" with "},{"type":"emphasis","inlineContent":[{"type":"text","text":"initializer syntax"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is written as a type name followed by empty parentheses:"}]},{"type":"codeListing","syntax":"swift","code":["let someVehicle = Vehicle()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having created a new "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"you can access its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property to print"},{"type":"text","text":" "},{"type":"text","text":"a human-readable description of the vehicle’s current speed:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class defines common characteristics for an arbitrary vehicle,"},{"type":"text","text":" "},{"type":"text","text":"but isn’t much use in itself."},{"type":"text","text":" "},{"type":"text","text":"To make it more useful,"},{"type":"text","text":" "},{"type":"text","text":"you need to refine it to describe more specific kinds of vehicles."}]},{"anchor":"Subclassing","level":2,"type":"heading","text":"Subclassing"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Subclassing"}]},{"type":"text","text":" is the act of basing a new class on an existing class."},{"type":"text","text":" "},{"type":"text","text":"The subclass inherits characteristics from the existing class, which you can then refine."},{"type":"text","text":" "},{"type":"text","text":"You can also add new characteristics to the subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To indicate that a subclass has a superclass,"},{"type":"text","text":" "},{"type":"text","text":"write the subclass name before the superclass name,"},{"type":"text","text":" "},{"type":"text","text":"separated by a colon:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeSubclass: SomeSuperclass {","   \/\/ subclass definition goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a subclass called "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a superclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Bicycle: Vehicle {","   var hasBasket = false","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class automatically gains all of the characteristics of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"such as its "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" and "},{"type":"codeVoice","code":"description"},{"type":"text","text":" properties and its "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the characteristics it inherits,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class defines a new stored property,"},{"type":"text","text":" "},{"type":"codeVoice","code":"hasBasket"},{"type":"text","text":", with a default value of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"type":"text","text":"(inferring a type of "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" for the property)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, any new "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance you create will not have a basket."},{"type":"text","text":" "},{"type":"text","text":"You can set the "},{"type":"codeVoice","code":"hasBasket"},{"type":"text","text":" property to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for a particular "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"after that instance is created:"}]},{"type":"codeListing","syntax":"swift","code":["let bicycle = Bicycle()","bicycle.hasBasket = true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also modify the inherited "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and query the instance’s inherited "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subclasses can themselves be subclassed."},{"type":"text","text":" "},{"type":"text","text":"The next example creates a subclass of "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" for a two-seater bicycle"},{"type":"text","text":" "},{"type":"text","text":"known as a “tandem”:"}]},{"type":"codeListing","syntax":"swift","code":["class Tandem: Bicycle {","   var currentNumberOfPassengers = 0","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Tandem"},{"type":"text","text":" inherits all of the properties and methods from "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which in turn inherits all of the properties and methods from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":" subclass also adds a new stored property called "},{"type":"codeVoice","code":"currentNumberOfPassengers"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an instance of "},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can work with any of its new and inherited properties,"},{"type":"text","text":" "},{"type":"text","text":"and query the read-only "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"]},{"anchor":"Overriding","level":2,"type":"heading","text":"Overriding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subclass can provide its own custom implementation of"},{"type":"text","text":" "},{"type":"text","text":"an instance method, type method, instance property, type property, or subscript"},{"type":"text","text":" "},{"type":"text","text":"that it would otherwise inherit from a superclass."},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"overriding"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To override a characteristic that would otherwise be inherited,"},{"type":"text","text":" "},{"type":"text","text":"you prefix your overriding definition with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Doing so clarifies that you intend to provide an override"},{"type":"text","text":" "},{"type":"text","text":"and haven’t provided a matching definition by mistake."},{"type":"text","text":" "},{"type":"text","text":"Overriding by accident can cause unexpected behavior,"},{"type":"text","text":" "},{"type":"text","text":"and any overrides without the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword are"},{"type":"text","text":" "},{"type":"text","text":"diagnosed as an error when your code is compiled."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword also prompts the Swift compiler"},{"type":"text","text":" "},{"type":"text","text":"to check that your overriding class’s superclass (or one of its parents)"},{"type":"text","text":" "},{"type":"text","text":"has a declaration that matches the one you provided for the override."},{"type":"text","text":" "},{"type":"text","text":"This check ensures that your overriding definition is correct."}]},{"anchor":"Accessing-Superclass-Methods-Properties-and-Subscripts","level":3,"type":"heading","text":"Accessing Superclass Methods, Properties, and Subscripts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you provide a method, property, or subscript override for a subclass,"},{"type":"text","text":" "},{"type":"text","text":"it’s sometimes useful to use the existing superclass implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of your override."},{"type":"text","text":" "},{"type":"text","text":"For example, you can refine the behavior of that existing implementation,"},{"type":"text","text":" "},{"type":"text","text":"or store a modified value in an existing inherited variable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Where this is appropriate,"},{"type":"text","text":" "},{"type":"text","text":"you access the superclass version of a method, property, or subscript"},{"type":"text","text":" "},{"type":"text","text":"by using the "},{"type":"codeVoice","code":"super"},{"type":"text","text":" prefix:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden method named "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" can call the superclass version of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" "},{"type":"text","text":"by calling "},{"type":"codeVoice","code":"super.someMethod()"},{"type":"text","text":" within the overriding method implementation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden property called "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" can access the superclass version of "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"codeVoice","code":"super.someProperty"},{"type":"text","text":" within the overriding getter or setter implementation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden subscript for "},{"type":"codeVoice","code":"someIndex"},{"type":"text","text":" can access the superclass version of the same subscript"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"codeVoice","code":"super[someIndex]"},{"type":"text","text":" from within the overriding subscript implementation."}]}]}]},{"anchor":"Overriding-Methods","level":3,"type":"heading","text":"Overriding Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override an inherited instance or type method"},{"type":"text","text":" "},{"type":"text","text":"to provide a tailored or alternative implementation of the method within your subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new subclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" called "},{"type":"codeVoice","code":"Train"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which overrides the "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method that "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" inherits from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Train: Vehicle {","   override func makeNoise() {","      print(\"Choo Choo\")","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a new instance of "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" and call its "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"you can see that the "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" subclass version of the method is called:"}]},{"type":"codeListing","syntax":"swift","code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""]},{"anchor":"Overriding-Properties","level":3,"type":"heading","text":"Overriding Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override an inherited instance or type property"},{"type":"text","text":" "},{"type":"text","text":"to provide your own custom getter and setter for that property,"},{"type":"text","text":" "},{"type":"text","text":"or to add property observers to enable the overriding property"},{"type":"text","text":" "},{"type":"text","text":"to observe when the underlying property value changes."}]},{"anchor":"Overriding-Property-Getters-and-Setters","level":4,"type":"heading","text":"Overriding Property Getters and Setters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide a custom getter (and setter, if appropriate)"},{"type":"text","text":" "},{"type":"text","text":"to override "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" inherited property,"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether the inherited property is implemented as"},{"type":"text","text":" "},{"type":"text","text":"a stored or computed property at source."},{"type":"text","text":" "},{"type":"text","text":"The stored or computed nature of an inherited property isn’t known by a subclass —"},{"type":"text","text":" "},{"type":"text","text":"it only knows that the inherited property has a certain name and type."},{"type":"text","text":" "},{"type":"text","text":"You must always state both the name and the type of the property you are overriding,"},{"type":"text","text":" "},{"type":"text","text":"to enable the compiler to check that your override matches"},{"type":"text","text":" "},{"type":"text","text":"a superclass property with the same name and type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can present an inherited read-only property as a read-write property"},{"type":"text","text":" "},{"type":"text","text":"by providing both a getter and a setter in your subclass property override."},{"type":"text","text":" "},{"type":"text","text":"You can’t, however, present an inherited read-write property as a read-only property."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you provide a setter as part of a property override,"},{"type":"text","text":" "},{"type":"text","text":"you must also provide a getter for that override."},{"type":"text","text":" "},{"type":"text","text":"If you don’t want to modify the inherited property’s value within the overriding getter,"},{"type":"text","text":" "},{"type":"text","text":"you can simply pass through the inherited value"},{"type":"text","text":" "},{"type":"text","text":"by returning "},{"type":"codeVoice","code":"super.someProperty"},{"type":"text","text":" from the getter,"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is the name of the property you are overriding."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"type":"codeVoice","code":"Car"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class introduces a new stored property called "},{"type":"codeVoice","code":"gear"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default integer value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class also overrides the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to provide a custom description that includes the current gear:"}]},{"type":"codeListing","syntax":"swift","code":["class Car: Vehicle {","   var gear = 1","   override var description: String {","      return super.description + \" in gear \\(gear)\"","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The override of the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property starts by calling "},{"type":"codeVoice","code":"super.description"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns the "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class’s "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class’s version of "},{"type":"codeVoice","code":"description"},{"type":"text","text":" then adds some extra text onto"},{"type":"text","text":" "},{"type":"text","text":"the end of this description to provide information about the current gear."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an instance of the "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class"},{"type":"text","text":" "},{"type":"text","text":"and set its "},{"type":"codeVoice","code":"gear"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"type":"text","text":"you can see that its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property returns"},{"type":"text","text":" "},{"type":"text","text":"the tailored description defined within the "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class:"}]},{"type":"codeListing","syntax":"swift","code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"]},{"anchor":"Overriding-Property-Observers","level":4,"type":"heading","text":"Overriding Property Observers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use property overriding to add property observers to an inherited property."},{"type":"text","text":" "},{"type":"text","text":"This enables you to be notified when the value of an inherited property changes,"},{"type":"text","text":" "},{"type":"text","text":"regardless of how that property was originally implemented."},{"type":"text","text":" "},{"type":"text","text":"For more information on property observers, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t add property observers to"},{"type":"text","text":" "},{"type":"text","text":"inherited constant stored properties or inherited read-only computed properties."},{"type":"text","text":" "},{"type":"text","text":"The value of these properties can’t be set,"},{"type":"text","text":" "},{"type":"text","text":"and so it isn’t appropriate to provide a "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" or "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of an override.Note also that you can’t provide both"},{"type":"text","text":" "},{"type":"text","text":"an overriding setter and an overriding property observer for the same property."},{"type":"text","text":" "},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"type":"text","text":" "},{"type":"text","text":"and you are already providing a custom setter for that property,"},{"type":"text","text":" "},{"type":"text","text":"you can simply observe any value changes from within the custom setter."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Car"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" class represents a car with an automatic gearbox,"},{"type":"text","text":" "},{"type":"text","text":"which automatically selects an appropriate gear to use based on the current speed:"}]},{"type":"codeListing","syntax":"swift","code":["class AutomaticCar: Car {","   override var currentSpeed: Double {","      didSet {","         gear = Int(currentSpeed \/ 10.0) + 1","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you set the "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property of an "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"the property’s "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer sets the instance’s "},{"type":"codeVoice","code":"gear"},{"type":"text","text":" property to"},{"type":"text","text":" "},{"type":"text","text":"an appropriate choice of gear for the new speed."},{"type":"text","text":" "},{"type":"text","text":"Specifically, the property observer chooses a gear that’s"},{"type":"text","text":" "},{"type":"text","text":"the new "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" value divided by "},{"type":"codeVoice","code":"10"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"rounded down to the nearest integer, plus "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A speed of "},{"type":"codeVoice","code":"35.0"},{"type":"text","text":" produces a gear of "},{"type":"codeVoice","code":"4"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"]},{"anchor":"Preventing-Overrides","level":2,"type":"heading","text":"Preventing Overrides"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can prevent a method, property, or subscript from being overridden"},{"type":"text","text":" "},{"type":"text","text":"by marking it as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"final"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Do this by writing the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier before"},{"type":"text","text":" "},{"type":"text","text":"the method, property, or subscript’s introducer keyword"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"final var"},{"type":"text","text":", "},{"type":"codeVoice","code":"final func"},{"type":"text","text":", "},{"type":"codeVoice","code":"final class func"},{"type":"text","text":", and "},{"type":"codeVoice","code":"final subscript"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any attempt to override a final method, property, or subscript in a subclass"},{"type":"text","text":" "},{"type":"text","text":"is reported as a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"Methods, properties, or subscripts that you add to a class in an extension"},{"type":"text","text":" "},{"type":"text","text":"can also be marked as final within the extension’s definition."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can mark an entire class as final by writing the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword in its class definition ("},{"type":"codeVoice","code":"final class"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Any attempt to subclass a final class is reported as a compile-time error."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/inheritance"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Inheritance","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"abstract":[],"title":"Property Observers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"}}}