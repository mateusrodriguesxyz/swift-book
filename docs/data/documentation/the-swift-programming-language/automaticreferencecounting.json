{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in a few cases ARC requires more information"},{"type":"text","text":" "},{"type":"text","text":"about the relationships between parts of your code"},{"type":"text","text":" "},{"type":"text","text":"in order to manage memory for you."},{"type":"text","text":" "},{"type":"text","text":"This chapter describes those situations"},{"type":"text","text":" "},{"type":"text","text":"and shows how you enable ARC to manage all of your app’s memory."},{"type":"text","text":" "},{"type":"text","text":"Using ARC in Swift is very similar to the approach described in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html"},{"type":"text","text":" "},{"type":"text","text":"for using ARC with Objective-C."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference counting applies only to instances of classes."},{"type":"text","text":" "},{"type":"text","text":"Structures and enumerations are value types, not reference types,"},{"type":"text","text":" "},{"type":"text","text":"and aren’t stored and passed by reference."}]},{"anchor":"How-ARC-Works","level":2,"type":"heading","text":"How ARC Works"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every time you create a new instance of a class,"},{"type":"text","text":" "},{"type":"text","text":"ARC allocates a chunk of memory to store information about that instance."},{"type":"text","text":" "},{"type":"text","text":"This memory holds information about the type of the instance,"},{"type":"text","text":" "},{"type":"text","text":"together with the values of any stored properties associated with that instance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, when an instance is no longer needed,"},{"type":"text","text":" "},{"type":"text","text":"ARC frees up the memory used by that instance"},{"type":"text","text":" "},{"type":"text","text":"so that the memory can be used for other purposes instead."},{"type":"text","text":" "},{"type":"text","text":"This ensures that class instances don’t take up space in memory"},{"type":"text","text":" "},{"type":"text","text":"when they’re no longer needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if ARC were to deallocate an instance that was still in use,"},{"type":"text","text":" "},{"type":"text","text":"it would no longer be possible to access that instance’s properties,"},{"type":"text","text":" "},{"type":"text","text":"or call that instance’s methods."},{"type":"text","text":" "},{"type":"text","text":"Indeed, if you tried to access the instance, your app would most likely crash."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make sure that instances don’t disappear while they’re still needed,"},{"type":"text","text":" "},{"type":"text","text":"ARC tracks how many properties, constants, and variables"},{"type":"text","text":" "},{"type":"text","text":"are currently referring to each class instance."},{"type":"text","text":" "},{"type":"text","text":"ARC will not deallocate an instance"},{"type":"text","text":" "},{"type":"text","text":"as long as at least one active reference to that instance still exists."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make this possible,"},{"type":"text","text":" "},{"type":"text","text":"whenever you assign a class instance to a property, constant, or variable,"},{"type":"text","text":" "},{"type":"text","text":"that property, constant, or variable makes a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"strong reference"}]},{"type":"text","text":" to the instance."},{"type":"text","text":" "},{"type":"text","text":"The reference is called a “strong” reference because"},{"type":"text","text":" "},{"type":"text","text":"it keeps a firm hold on that instance,"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t allow it to be deallocated for as long as that strong reference remains."}]},{"anchor":"ARC-in-Action","level":2,"type":"heading","text":"ARC in Action"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of how Automatic Reference Counting works."},{"type":"text","text":" "},{"type":"text","text":"This example starts with a simple class called "},{"type":"codeVoice","code":"Person"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which defines a stored constant property called "},{"type":"codeVoice","code":"name"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Person {","   let name: String","   init(name: String) {","      self.name = name","      print(\"\\(name) is being initialized\")","   }","   deinit {","      print(\"\\(name) is being deinitialized\")","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" class has an initializer that sets the instance’s "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"and prints a message to indicate that initialization is underway."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" class also has a deinitializer"},{"type":"text","text":" "},{"type":"text","text":"that prints a message when an instance of the class is deallocated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next code snippet defines three variables of type "},{"type":"codeVoice","code":"Person?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are used to set up multiple references to a new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"in subsequent code snippets."},{"type":"text","text":" "},{"type":"text","text":"Because these variables are of an optional type ("},{"type":"codeVoice","code":"Person?"},{"type":"text","text":", not "},{"type":"codeVoice","code":"Person"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"they’re automatically initialized with a value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and don’t currently reference a "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance."}]},{"type":"codeListing","syntax":"swift","code":["var reference1: Person?","var reference2: Person?","var reference3: Person?"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now create a new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"and assign it to one of these three variables:"}]},{"type":"codeListing","syntax":"swift","code":["reference1 = Person(name: \"John Appleseed\")","\/\/ Prints \"John Appleseed is being initialized\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the message "},{"type":"codeVoice","code":"\"John Appleseed is being initialized\""},{"type":"text","text":" is printed"},{"type":"text","text":" "},{"type":"text","text":"at the point that you call the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" class’s initializer."},{"type":"text","text":" "},{"type":"text","text":"This confirms that initialization has taken place."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance has been assigned to the "},{"type":"codeVoice","code":"reference1"},{"type":"text","text":" variable,"},{"type":"text","text":" "},{"type":"text","text":"there’s now a strong reference from "},{"type":"codeVoice","code":"reference1"},{"type":"text","text":" to the new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"Because there’s at least one strong reference,"},{"type":"text","text":" "},{"type":"text","text":"ARC makes sure that this "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" is kept in memory and isn’t deallocated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you assign the same "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance to two more variables,"},{"type":"text","text":" "},{"type":"text","text":"two more strong references to that instance are established:"}]},{"type":"codeListing","syntax":"swift","code":["reference2 = reference1","reference3 = reference1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are now "},{"type":"emphasis","inlineContent":[{"type":"text","text":"three"}]},{"type":"text","text":" strong references to this single "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you break two of these strong references (including the original reference)"},{"type":"text","text":" "},{"type":"text","text":"by assigning "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to two of the variables,"},{"type":"text","text":" "},{"type":"text","text":"a single strong reference remains,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance isn’t deallocated:"}]},{"type":"codeListing","syntax":"swift","code":["reference1 = nil","reference2 = nil"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ARC doesn’t deallocate the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance until"},{"type":"text","text":" "},{"type":"text","text":"the third and final strong reference is broken,"},{"type":"text","text":" "},{"type":"text","text":"at which point it’s clear that you are no longer using the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["reference3 = nil","\/\/ Prints \"John Appleseed is being deinitialized\""]},{"anchor":"Strong-Reference-Cycles-Between-Class-Instances","level":2,"type":"heading","text":"Strong Reference Cycles Between Class Instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the examples above,"},{"type":"text","text":" "},{"type":"text","text":"ARC is able to track the number of references to the new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance you create"},{"type":"text","text":" "},{"type":"text","text":"and to deallocate that "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance when it’s no longer needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it’s possible to write code in which an instance of a class"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"never"}]},{"type":"text","text":" gets to a point where it has zero strong references."},{"type":"text","text":" "},{"type":"text","text":"This can happen if two class instances hold a strong reference to each other,"},{"type":"text","text":" "},{"type":"text","text":"such that each instance keeps the other alive."},{"type":"text","text":" "},{"type":"text","text":"This is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"strong reference cycle"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You resolve strong reference cycles"},{"type":"text","text":" "},{"type":"text","text":"by defining some of the relationships between classes"},{"type":"text","text":" "},{"type":"text","text":"as weak or unowned references instead of as strong references."},{"type":"text","text":" "},{"type":"text","text":"This process is described in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, before you learn how to resolve a strong reference cycle,"},{"type":"text","text":" "},{"type":"text","text":"it’s useful to understand how such a cycle is caused."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of how a strong reference cycle can be created by accident."},{"type":"text","text":" "},{"type":"text","text":"This example defines two classes called "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which model a block of apartments and its residents:"}]},{"type":"codeListing","syntax":"swift","code":["class Person {","   let name: String","   init(name: String) { self.name = name }","   var apartment: Apartment?","   deinit { print(\"\\(name) is being deinitialized\") }","}","","class Apartment {","   let unit: String","   init(unit: String) { self.unit = unit }","   var tenant: Person?","   deinit { print(\"Apartment \\(unit) is being deinitialized\") }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance has a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"and an optional "},{"type":"codeVoice","code":"apartment"},{"type":"text","text":" property that’s initially "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"apartment"},{"type":"text","text":" property is optional, because a person may not always have an apartment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, every "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance has a "},{"type":"codeVoice","code":"unit"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"and has an optional "},{"type":"codeVoice","code":"tenant"},{"type":"text","text":" property that’s initially "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The tenant property is optional because an apartment may not always have a tenant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both of these classes also define a deinitializer,"},{"type":"text","text":" "},{"type":"text","text":"which prints the fact that an instance of that class is being deinitialized."},{"type":"text","text":" "},{"type":"text","text":"This enables you to see whether"},{"type":"text","text":" "},{"type":"text","text":"instances of "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" are being deallocated as expected."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This next code snippet defines two variables of optional type"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which will be set to a specific "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance below."},{"type":"text","text":" "},{"type":"text","text":"Both of these variables have an initial value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", by virtue of being optional:"}]},{"type":"codeListing","syntax":"swift","code":["var john: Person?","var unit4A: Apartment?"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now create a specific "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"and assign these new instances to the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":" variables:"}]},{"type":"codeListing","syntax":"swift","code":["john = Person(name: \"John Appleseed\")","unit4A = Apartment(unit: \"4A\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the strong references look after creating and assigning these two instances."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"john"},{"type":"text","text":" variable now has a strong reference to the new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":" variable has a strong reference to the new "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"referenceCycle01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now link the two instances together"},{"type":"text","text":" "},{"type":"text","text":"so that the person has an apartment, and the apartment has a tenant."},{"type":"text","text":" "},{"type":"text","text":"Note that an exclamation point ("},{"type":"codeVoice","code":"!"},{"type":"text","text":") is used to unwrap and access"},{"type":"text","text":" "},{"type":"text","text":"the instances stored inside the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":" optional variables,"},{"type":"text","text":" "},{"type":"text","text":"so that the properties of those instances can be set:"}]},{"type":"codeListing","syntax":"swift","code":["john!.apartment = unit4A","unit4A!.tenant = john"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the strong references look after you link the two instances together:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"referenceCycle02"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, linking these two instances creates"},{"type":"text","text":" "},{"type":"text","text":"a strong reference cycle between them."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance now has a strong reference to the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance has a strong reference to the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"Therefore, when you break the strong references held by"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":" variables,"},{"type":"text","text":" "},{"type":"text","text":"the reference counts don’t drop to zero,"},{"type":"text","text":" "},{"type":"text","text":"and the instances aren’t deallocated by ARC:"}]},{"type":"codeListing","syntax":"swift","code":["john = nil","unit4A = nil"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that neither deinitializer was called"},{"type":"text","text":" "},{"type":"text","text":"when you set these two variables to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The strong reference cycle prevents the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instances"},{"type":"text","text":" "},{"type":"text","text":"from ever being deallocated, causing a memory leak in your app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the strong references look after you set"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":" variables to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"referenceCycle03"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The strong references between the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance remain and can’t be broken."}]},{"anchor":"Resolving-Strong-Reference-Cycles-Between-Class-Instances","level":2,"type":"heading","text":"Resolving Strong Reference Cycles Between Class Instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides two ways to resolve strong reference cycles"},{"type":"text","text":" "},{"type":"text","text":"when you work with properties of class type:"},{"type":"text","text":" "},{"type":"text","text":"weak references and unowned references."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Weak and unowned references enable one instance in a reference cycle"},{"type":"text","text":" "},{"type":"text","text":"to refer to the other instance "},{"type":"emphasis","inlineContent":[{"type":"text","text":"without"}]},{"type":"text","text":" keeping a strong hold on it."},{"type":"text","text":" "},{"type":"text","text":"The instances can then refer to each other without creating a strong reference cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use a weak reference when the other instance has a shorter lifetime —"},{"type":"text","text":" "},{"type":"text","text":"that is, when the other instance can be deallocated first."},{"type":"text","text":" "},{"type":"text","text":"In the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" example above,"},{"type":"text","text":" "},{"type":"text","text":"it’s appropriate for an apartment to be able to have"},{"type":"text","text":" "},{"type":"text","text":"no tenant at some point in its lifetime,"},{"type":"text","text":" "},{"type":"text","text":"and so a weak reference is an appropriate way to break the reference cycle in this case."},{"type":"text","text":" "},{"type":"text","text":"In contrast, use an unowned reference when the other instance"},{"type":"text","text":" "},{"type":"text","text":"has the same lifetime or a longer lifetime."}]},{"anchor":"Weak-References","level":3,"type":"heading","text":"Weak References"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"weak reference"}]},{"type":"text","text":" is a reference that doesn’t keep a strong hold"},{"type":"text","text":" "},{"type":"text","text":"on the instance it refers to,"},{"type":"text","text":" "},{"type":"text","text":"and so doesn’t stop ARC from disposing of the referenced instance."},{"type":"text","text":" "},{"type":"text","text":"This behavior prevents the reference from becoming part of a strong reference cycle."},{"type":"text","text":" "},{"type":"text","text":"You indicate a weak reference by placing the "},{"type":"codeVoice","code":"weak"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"before a property or variable declaration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because a weak reference doesn’t keep a strong hold on the instance it refers to,"},{"type":"text","text":" "},{"type":"text","text":"it’s possible for that instance to be deallocated"},{"type":"text","text":" "},{"type":"text","text":"while the weak reference is still referring to it."},{"type":"text","text":" "},{"type":"text","text":"Therefore, ARC automatically sets a weak reference to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"when the instance that it refers to is deallocated."},{"type":"text","text":" "},{"type":"text","text":"And, because weak references need to allow"},{"type":"text","text":" "},{"type":"text","text":"their value to be changed to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at runtime,"},{"type":"text","text":" "},{"type":"text","text":"they’re always declared as variables, rather than constants, of an optional type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can check for the existence of a value in the weak reference,"},{"type":"text","text":" "},{"type":"text","text":"just like any other optional value,"},{"type":"text","text":" "},{"type":"text","text":"and you will never end up with"},{"type":"text","text":" "},{"type":"text","text":"a reference to an invalid instance that no longer exists."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Property observers aren’t called"},{"type":"text","text":" "},{"type":"text","text":"when ARC sets a weak reference to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below is identical to the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" example from above,"},{"type":"text","text":" "},{"type":"text","text":"with one important difference."},{"type":"text","text":" "},{"type":"text","text":"This time around, the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" type’s "},{"type":"codeVoice","code":"tenant"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"is declared as a weak reference:"}]},{"type":"codeListing","syntax":"swift","code":["class Person {","   let name: String","   init(name: String) { self.name = name }","   var apartment: Apartment?","   deinit { print(\"\\(name) is being deinitialized\") }","}","","class Apartment {","   let unit: String","   init(unit: String) { self.unit = unit }","   weak var tenant: Person?","   deinit { print(\"Apartment \\(unit) is being deinitialized\") }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The strong references from the two variables ("},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and the links between the two instances are created as before:"}]},{"type":"codeListing","syntax":"swift","code":["var john: Person?","var unit4A: Apartment?","","john = Person(name: \"John Appleseed\")","unit4A = Apartment(unit: \"4A\")","","john!.apartment = unit4A","unit4A!.tenant = john"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the references look now that you’ve linked the two instances together:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"weakReference01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance still has a strong reference to the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"but the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance now has a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"weak"}]},{"type":"text","text":" reference to the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"This means that when you break the strong reference held by"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" variable by setting it to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"there are no more strong references to the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["john = nil","\/\/ Prints \"John Appleseed is being deinitialized\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because there are no more strong references to the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"it’s deallocated"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"tenant"},{"type":"text","text":" property is set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"weakReference02"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The only remaining strong reference to the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"is from the "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":" variable."},{"type":"text","text":" "},{"type":"text","text":"If you break "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"type":"text","text":" strong reference,"},{"type":"text","text":" "},{"type":"text","text":"there are no more strong references to the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["unit4A = nil","\/\/ Prints \"Apartment 4A is being deinitialized\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because there are no more strong references to the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"it too is deallocated:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"weakReference03"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In systems that use garbage collection,"},{"type":"text","text":" "},{"type":"text","text":"weak pointers are sometimes used to implement a simple caching mechanism"},{"type":"text","text":" "},{"type":"text","text":"because objects with no strong references are deallocated"},{"type":"text","text":" "},{"type":"text","text":"only when memory pressure triggers garbage collection."},{"type":"text","text":" "},{"type":"text","text":"However, with ARC, values are deallocated"},{"type":"text","text":" "},{"type":"text","text":"as soon as their last strong reference is removed,"},{"type":"text","text":" "},{"type":"text","text":"making weak references unsuitable for such a purpose."}]}],"type":"aside","name":"Note"},{"anchor":"Unowned-References","level":3,"type":"heading","text":"Unowned References"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like a weak reference,"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unowned reference"}]},{"type":"text","text":" doesn’t keep"},{"type":"text","text":" "},{"type":"text","text":"a strong hold on the instance it refers to."},{"type":"text","text":" "},{"type":"text","text":"Unlike a weak reference, however,"},{"type":"text","text":" "},{"type":"text","text":"an unowned reference is used when the other instance"},{"type":"text","text":" "},{"type":"text","text":"has the same lifetime or a longer lifetime."},{"type":"text","text":" "},{"type":"text","text":"You indicate an unowned reference by placing the "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"before a property or variable declaration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike a weak reference,"},{"type":"text","text":" "},{"type":"text","text":"an unowned reference is expected to always have a value."},{"type":"text","text":" "},{"type":"text","text":"As a result,"},{"type":"text","text":" "},{"type":"text","text":"marking a value as unowned doesn’t make it optional,"},{"type":"text","text":" "},{"type":"text","text":"and ARC never sets an unowned reference’s value to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use an unowned reference only when you are sure that"},{"type":"text","text":" "},{"type":"text","text":"the reference "},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"type":"text","text":" refers to an instance that hasn’t been deallocated.If you try to access the value of an unowned reference"},{"type":"text","text":" "},{"type":"text","text":"after that instance has been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a runtime error."}]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines two classes, "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which model a bank customer and a possible credit card for that customer."},{"type":"text","text":" "},{"type":"text","text":"These two classes each store an instance of the other class as a property."},{"type":"text","text":" "},{"type":"text","text":"This relationship has the potential to create a strong reference cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The relationship between "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" is slightly different from"},{"type":"text","text":" "},{"type":"text","text":"the relationship between "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" "},{"type":"text","text":"seen in the weak reference example above."},{"type":"text","text":" "},{"type":"text","text":"In this data model, a customer may or may not have a credit card,"},{"type":"text","text":" "},{"type":"text","text":"but a credit card will "},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"type":"text","text":" be associated with a customer."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance never outlives the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" that it refers to."},{"type":"text","text":" "},{"type":"text","text":"To represent this, the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" class has an optional "},{"type":"codeVoice","code":"card"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"but the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" class has an unowned (and non-optional) "},{"type":"codeVoice","code":"customer"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Furthermore, a new "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" be created"},{"type":"text","text":" "},{"type":"text","text":"by passing a "},{"type":"codeVoice","code":"number"},{"type":"text","text":" value and a "},{"type":"codeVoice","code":"customer"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"to a custom "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"This ensures that a "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance always has"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"customer"},{"type":"text","text":" instance associated with it when the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance is created."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because a credit card will always have a customer,"},{"type":"text","text":" "},{"type":"text","text":"you define its "},{"type":"codeVoice","code":"customer"},{"type":"text","text":" property as an unowned reference,"},{"type":"text","text":" "},{"type":"text","text":"to avoid a strong reference cycle:"}]},{"type":"codeListing","syntax":"swift","code":["class Customer {","   let name: String","   var card: CreditCard?","   init(name: String) {","      self.name = name","   }","   deinit { print(\"\\(name) is being deinitialized\") }","}","","class CreditCard {","   let number: UInt64","   unowned let customer: Customer","   init(number: UInt64, customer: Customer) {","      self.number = number","      self.customer = customer","   }","   deinit { print(\"Card #\\(number) is being deinitialized\") }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"number"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" class is defined with"},{"type":"text","text":" "},{"type":"text","text":"a type of "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to ensure that the "},{"type":"codeVoice","code":"number"},{"type":"text","text":" property’s capacity is large enough to store"},{"type":"text","text":" "},{"type":"text","text":"a 16-digit card number on both 32-bit and 64-bit systems."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This next code snippet defines an optional "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"john"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which will be used to store a reference to a specific customer."},{"type":"text","text":" "},{"type":"text","text":"This variable has an initial value of nil, by virtue of being optional:"}]},{"type":"codeListing","syntax":"swift","code":["var john: Customer?"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now create a "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and use it to initialize and assign a new "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"as that customer’s "},{"type":"codeVoice","code":"card"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["john = Customer(name: \"John Appleseed\")","john!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the references look, now that you’ve linked the two instances:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"unownedReference01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance now has a strong reference to the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance has an unowned reference to the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because of the unowned "},{"type":"codeVoice","code":"customer"},{"type":"text","text":" reference,"},{"type":"text","text":" "},{"type":"text","text":"when you break the strong reference held by the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" variable,"},{"type":"text","text":" "},{"type":"text","text":"there are no more strong references to the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"unownedReference02"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because there are no more strong references to the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"it’s deallocated."},{"type":"text","text":" "},{"type":"text","text":"After this happens,"},{"type":"text","text":" "},{"type":"text","text":"there are no more strong references to the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and it too is deallocated:"}]},{"type":"codeListing","syntax":"swift","code":["john = nil","\/\/ Prints \"John Appleseed is being deinitialized\"","\/\/ Prints \"Card #1234567890123456 is being deinitialized\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final code snippet above shows that"},{"type":"text","text":" "},{"type":"text","text":"the deinitializers for the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance and "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"both print their “deinitialized” messages"},{"type":"text","text":" "},{"type":"text","text":"after the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" variable is set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples above show how to use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"safe"}]},{"type":"text","text":" unowned references."},{"type":"text","text":" "},{"type":"text","text":"Swift also provides "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unsafe"}]},{"type":"text","text":" unowned references for cases where"},{"type":"text","text":" "},{"type":"text","text":"you need to disable runtime safety checks —"},{"type":"text","text":" "},{"type":"text","text":"for example, for performance reasons."},{"type":"text","text":" "},{"type":"text","text":"As with all unsafe operations,"},{"type":"text","text":" "},{"type":"text","text":"you take on the responsibility for checking that code for safety.You indicate an unsafe unowned reference by writing "},{"type":"codeVoice","code":"unowned(unsafe)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If you try to access an unsafe unowned reference"},{"type":"text","text":" "},{"type":"text","text":"after the instance that it refers to is deallocated,"},{"type":"text","text":" "},{"type":"text","text":"your program will try to access the memory location"},{"type":"text","text":" "},{"type":"text","text":"where the instance used to be,"},{"type":"text","text":" "},{"type":"text","text":"which is an unsafe operation."}]}],"type":"aside","name":"Note"},{"anchor":"Unowned-Optional-References","level":3,"type":"heading","text":"Unowned Optional References"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can mark an optional reference to a class as unowned."},{"type":"text","text":" "},{"type":"text","text":"In terms of the ARC ownership model,"},{"type":"text","text":" "},{"type":"text","text":"an unowned optional reference and a weak reference"},{"type":"text","text":" "},{"type":"text","text":"can both be used in the same contexts."},{"type":"text","text":" "},{"type":"text","text":"The difference is that when you use an unowned optional reference,"},{"type":"text","text":" "},{"type":"text","text":"you’re responsible for making sure it always"},{"type":"text","text":" "},{"type":"text","text":"refers to a valid object or is set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example that keeps track of the courses"},{"type":"text","text":" "},{"type":"text","text":"offered by a particular department at a school:"}]},{"type":"codeListing","syntax":"swift","code":["class Department {","    var name: String","    var courses: [Course]","    init(name: String) {","        self.name = name","        self.courses = []","    }","}","","class Course {","    var name: String","    unowned var department: Department","    unowned var nextCourse: Course?","    init(name: String, in department: Department) {","        self.name = name","        self.department = department","        self.nextCourse = nil","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Department"},{"type":"text","text":" maintains a strong reference"},{"type":"text","text":" "},{"type":"text","text":"to each course that the department offers."},{"type":"text","text":" "},{"type":"text","text":"In the ARC ownership model, a department owns its courses."},{"type":"text","text":" "},{"type":"codeVoice","code":"Course"},{"type":"text","text":" has two unowned references,"},{"type":"text","text":" "},{"type":"text","text":"one to the department"},{"type":"text","text":" "},{"type":"text","text":"and one to the next course a student should take;"},{"type":"text","text":" "},{"type":"text","text":"a course doesn’t own either of these objects."},{"type":"text","text":" "},{"type":"text","text":"Every course is part of some department"},{"type":"text","text":" "},{"type":"text","text":"so the "},{"type":"codeVoice","code":"department"},{"type":"text","text":" property isn’t an optional."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"because some courses don’t have a recommended follow-on course,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"nextCourse"},{"type":"text","text":" property is an optional."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of using these classes:"}]},{"type":"codeListing","syntax":"swift","code":["let department = Department(name: \"Horticulture\")","","let intro = Course(name: \"Survey of Plants\", in: department)","let intermediate = Course(name: \"Growing Common Herbs\", in: department)","let advanced = Course(name: \"Caring for Tropical Plants\", in: department)","","intro.nextCourse = intermediate","intermediate.nextCourse = advanced","department.courses = [intro, intermediate, advanced]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above creates a department and its three courses."},{"type":"text","text":" "},{"type":"text","text":"The intro and intermediate courses both have a suggested next course"},{"type":"text","text":" "},{"type":"text","text":"stored in their "},{"type":"codeVoice","code":"nextCourse"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which maintains an unowned optional reference to"},{"type":"text","text":" "},{"type":"text","text":"the course a student should take after completing this one."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"unownedOptionalReference"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An unowned optional reference doesn’t keep a strong hold"},{"type":"text","text":" "},{"type":"text","text":"on the instance of the class that it wraps,"},{"type":"text","text":" "},{"type":"text","text":"and so it doesn’t prevent ARC from deallocating the instance."},{"type":"text","text":" "},{"type":"text","text":"It behaves the same as an unowned reference does under ARC,"},{"type":"text","text":" "},{"type":"text","text":"except that an unowned optional reference can be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like non-optional unowned references,"},{"type":"text","text":" "},{"type":"text","text":"you’re responsible for ensuring that "},{"type":"codeVoice","code":"nextCourse"},{"type":"text","text":" "},{"type":"text","text":"always refers to a course that hasn’t been deallocated."},{"type":"text","text":" "},{"type":"text","text":"In this case, for example,"},{"type":"text","text":" "},{"type":"text","text":"when you delete a course from "},{"type":"codeVoice","code":"department.courses"},{"type":"text","text":" "},{"type":"text","text":"you also need to remove any references to it"},{"type":"text","text":" "},{"type":"text","text":"that other courses might have."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The underlying type of an optional value is "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is an enumeration in the Swift standard library."},{"type":"text","text":" "},{"type":"text","text":"However, optionals are an exception to the rule that"},{"type":"text","text":" "},{"type":"text","text":"value types can’t be marked with "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":".The optional that wraps the class"},{"type":"text","text":" "},{"type":"text","text":"doesn’t use reference counting,"},{"type":"text","text":" "},{"type":"text","text":"so you don’t need to maintain a strong reference to the optional."}]}],"type":"aside","name":"Note"},{"anchor":"Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","level":3,"type":"heading","text":"Unowned References and Implicitly Unwrapped Optional Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples for weak and unowned references above"},{"type":"text","text":" "},{"type":"text","text":"cover two of the more common scenarios"},{"type":"text","text":" "},{"type":"text","text":"in which it’s necessary to break a strong reference cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" example shows"},{"type":"text","text":" "},{"type":"text","text":"a situation where two properties, both of which are allowed to be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"have the potential to cause a strong reference cycle."},{"type":"text","text":" "},{"type":"text","text":"This scenario is best resolved with a weak reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" example"},{"type":"text","text":" "},{"type":"text","text":"shows a situation where one property that’s allowed to be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"and another property that can’t be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"have the potential to cause a strong reference cycle."},{"type":"text","text":" "},{"type":"text","text":"This scenario is best resolved with an unowned reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there’s a third scenario,"},{"type":"text","text":" "},{"type":"text","text":"in which "},{"type":"emphasis","inlineContent":[{"type":"text","text":"both"}]},{"type":"text","text":" properties should always have a value,"},{"type":"text","text":" "},{"type":"text","text":"and neither property should ever be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" once initialization is complete."},{"type":"text","text":" "},{"type":"text","text":"In this scenario, it’s useful to combine an unowned property on one class"},{"type":"text","text":" "},{"type":"text","text":"with an implicitly unwrapped optional property on the other class."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This enables both properties to be accessed directly"},{"type":"text","text":" "},{"type":"text","text":"(without optional unwrapping) once initialization is complete,"},{"type":"text","text":" "},{"type":"text","text":"while still avoiding a reference cycle."},{"type":"text","text":" "},{"type":"text","text":"This section shows you how to set up such a relationship."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines two classes, "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" and "},{"type":"codeVoice","code":"City"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"each of which stores an instance of the other class as a property."},{"type":"text","text":" "},{"type":"text","text":"In this data model, every country must always have a capital city,"},{"type":"text","text":" "},{"type":"text","text":"and every city must always belong to a country."},{"type":"text","text":" "},{"type":"text","text":"To represent this, the "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" class has a "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"City"},{"type":"text","text":" class has a "},{"type":"codeVoice","code":"country"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["class Country {","   let name: String","   var capitalCity: City!","   init(name: String, capitalName: String) {","      self.name = name","      self.capitalCity = City(name: capitalName, country: self)","   }","}","","class City {","   let name: String","   unowned let country: Country","   init(name: String, country: Country) {","      self.name = name","      self.country = country","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To set up the interdependency between the two classes,"},{"type":"text","text":" "},{"type":"text","text":"the initializer for "},{"type":"codeVoice","code":"City"},{"type":"text","text":" takes a "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and stores this instance in its "},{"type":"codeVoice","code":"country"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The initializer for "},{"type":"codeVoice","code":"City"},{"type":"text","text":" is called from within the initializer for "},{"type":"codeVoice","code":"Country"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, the initializer for "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" can’t pass "},{"type":"codeVoice","code":"self"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"City"},{"type":"text","text":" initializer"},{"type":"text","text":" "},{"type":"text","text":"until a new "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" instance is fully initialized,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Two-Phase-Initialization"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To cope with this requirement,"},{"type":"text","text":" "},{"type":"text","text":"you declare the "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" as"},{"type":"text","text":" "},{"type":"text","text":"an implicitly unwrapped optional property,"},{"type":"text","text":" "},{"type":"text","text":"indicated by the exclamation point at the end of its type annotation ("},{"type":"codeVoice","code":"City!"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"This means that the "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property has a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"like any other optional,"},{"type":"text","text":" "},{"type":"text","text":"but can be accessed without the need to unwrap its value"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" has a default "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" instance is considered fully initialized"},{"type":"text","text":" "},{"type":"text","text":"as soon as the "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" instance sets its "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property within its initializer."},{"type":"text","text":" "},{"type":"text","text":"This means that the "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" initializer can start to reference and pass around"},{"type":"text","text":" "},{"type":"text","text":"the implicit "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property as soon as the "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property is set."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" initializer can therefore pass "},{"type":"codeVoice","code":"self"},{"type":"text","text":" as one of the parameters for"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"City"},{"type":"text","text":" initializer when the "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" initializer is setting"},{"type":"text","text":" "},{"type":"text","text":"its own "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of this means that you can create the "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" and "},{"type":"codeVoice","code":"City"},{"type":"text","text":" instances"},{"type":"text","text":" "},{"type":"text","text":"in a single statement, without creating a strong reference cycle,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property can be accessed directly,"},{"type":"text","text":" "},{"type":"text","text":"without needing to use an exclamation point to unwrap its optional value:"}]},{"type":"codeListing","syntax":"swift","code":["var country = Country(name: \"Canada\", capitalName: \"Ottawa\")","print(\"\\(country.name)'s capital city is called \\(country.capitalCity.name)\")","\/\/ Prints \"Canada's capital city is called Ottawa\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, the use of an implicitly unwrapped optional"},{"type":"text","text":" "},{"type":"text","text":"means that all of the two-phase class initializer requirements are satisfied."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property can be used and accessed like a non-optional value"},{"type":"text","text":" "},{"type":"text","text":"once initialization is complete,"},{"type":"text","text":" "},{"type":"text","text":"while still avoiding a strong reference cycle."}]},{"anchor":"Strong-Reference-Cycles-for-Closures","level":2,"type":"heading","text":"Strong Reference Cycles for Closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You saw above how a strong reference cycle can be created"},{"type":"text","text":" "},{"type":"text","text":"when two class instance properties hold a strong reference to each other."},{"type":"text","text":" "},{"type":"text","text":"You also saw how to use weak and unowned references to break these strong reference cycles."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A strong reference cycle can also occur"},{"type":"text","text":" "},{"type":"text","text":"if you assign a closure to a property of a class instance,"},{"type":"text","text":" "},{"type":"text","text":"and the body of that closure captures the instance."},{"type":"text","text":" "},{"type":"text","text":"This capture might occur because the closure’s body accesses a property of the instance,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"self.someProperty"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or because the closure calls a method on the instance,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"self.someMethod()"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In either case, these accesses cause the closure to “capture” "},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"creating a strong reference cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strong reference cycle occurs because closures, like classes, are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference types"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When you assign a closure to a property,"},{"type":"text","text":" "},{"type":"text","text":"you are assigning a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference"}]},{"type":"text","text":" to that closure."},{"type":"text","text":" "},{"type":"text","text":"In essence, it’s the same problem as above —"},{"type":"text","text":" "},{"type":"text","text":"two strong references are keeping each other alive."},{"type":"text","text":" "},{"type":"text","text":"However, rather than two class instances,"},{"type":"text","text":" "},{"type":"text","text":"this time it’s a class instance and a closure that are keeping each other alive."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides an elegant solution to this problem,"},{"type":"text","text":" "},{"type":"text","text":"known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"closure capture list"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, before you learn how to break a strong reference cycle with a closure capture list,"},{"type":"text","text":" "},{"type":"text","text":"it’s useful to understand how such a cycle can be caused."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below shows how you can create a strong reference cycle"},{"type":"text","text":" "},{"type":"text","text":"when using a closure that references "},{"type":"codeVoice","code":"self"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This example defines a class called "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which provides a simple model for an individual element within an HTML document:"}]},{"type":"codeListing","syntax":"swift","code":["class HTMLElement {","","   let name: String","   let text: String?","","   lazy var asHTML: () -> String = {","      if let text = self.text {","         return \"<\\(self.name)>\\(text)<\/\\(self.name)>\"","      } else {","         return \"<\\(self.name) \/>\"","      }","   }","","   init(name: String, text: String? = nil) {","      self.name = name","      self.text = text","   }","","   deinit {","      print(\"\\(name) is being deinitialized\")","   }","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" class defines a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which indicates the name of the element,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"h1\""},{"type":"text","text":" for a heading element,"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"p\""},{"type":"text","text":" for a paragraph element,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"\"br\""},{"type":"text","text":" for a line break element."},{"type":"text","text":" "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" also defines an optional "},{"type":"codeVoice","code":"text"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which you can set to a string that represents"},{"type":"text","text":" "},{"type":"text","text":"the text to be rendered within that HTML element."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to these two simple properties,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" class defines a lazy property called "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This property references a closure that combines "},{"type":"codeVoice","code":"name"},{"type":"text","text":" and "},{"type":"codeVoice","code":"text"},{"type":"text","text":" "},{"type":"text","text":"into an HTML string fragment."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property is of type "},{"type":"codeVoice","code":"() -> String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “a function that takes no parameters, and returns a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, the "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property is assigned a closure that returns"},{"type":"text","text":" "},{"type":"text","text":"a string representation of an HTML tag."},{"type":"text","text":" "},{"type":"text","text":"This tag contains the optional "},{"type":"codeVoice","code":"text"},{"type":"text","text":" value if it exists,"},{"type":"text","text":" "},{"type":"text","text":"or no text content if "},{"type":"codeVoice","code":"text"},{"type":"text","text":" doesn’t exist."},{"type":"text","text":" "},{"type":"text","text":"For a paragraph element, the closure would return "},{"type":"codeVoice","code":"\"<p>some text<\/p>\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"<p \/>\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"depending on whether the "},{"type":"codeVoice","code":"text"},{"type":"text","text":" property equals "},{"type":"codeVoice","code":"\"some text\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property is named and used somewhat like an instance method."},{"type":"text","text":" "},{"type":"text","text":"However, because "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" is a closure property rather than an instance method,"},{"type":"text","text":" "},{"type":"text","text":"you can replace the default value of the "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property with a custom closure,"},{"type":"text","text":" "},{"type":"text","text":"if you want to change the HTML rendering for a particular HTML element."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property could be set to a closure"},{"type":"text","text":" "},{"type":"text","text":"that defaults to some text if the "},{"type":"codeVoice","code":"text"},{"type":"text","text":" property is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"in order to prevent the representation from returning an empty HTML tag:"}]},{"type":"codeListing","syntax":"swift","code":["let heading = HTMLElement(name: \"h1\")","let defaultText = \"some default text\"","heading.asHTML = {","   return \"<\\(heading.name)>\\(heading.text ?? defaultText)<\/\\(heading.name)>\"","}","print(heading.asHTML())","\/\/ Prints \"<h1>some default text<\/h1>\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property is declared as a lazy property,"},{"type":"text","text":" "},{"type":"text","text":"because it’s only needed if and when the element actually needs to be rendered"},{"type":"text","text":" "},{"type":"text","text":"as a string value for some HTML output target."},{"type":"text","text":" "},{"type":"text","text":"The fact that "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" is a lazy property means that you can refer to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" "},{"type":"text","text":"within the default closure,"},{"type":"text","text":" "},{"type":"text","text":"because the lazy property will not be accessed until"},{"type":"text","text":" "},{"type":"text","text":"after initialization has been completed and "},{"type":"codeVoice","code":"self"},{"type":"text","text":" is known to exist."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" class provides a single initializer,"},{"type":"text","text":" "},{"type":"text","text":"which takes a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" argument and (if desired) a "},{"type":"codeVoice","code":"text"},{"type":"text","text":" argument"},{"type":"text","text":" "},{"type":"text","text":"to initialize a new element."},{"type":"text","text":" "},{"type":"text","text":"The class also defines a deinitializer,"},{"type":"text","text":" "},{"type":"text","text":"which prints a message to show when an "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance is deallocated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how you use the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" class to create and print a new instance:"}]},{"type":"codeListing","syntax":"swift","code":["var paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")","print(paragraph!.asHTML())","\/\/ Prints \"<p>hello, world<\/p>\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"paragraph"},{"type":"text","text":" variable above is defined as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so that it can be set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" below to demonstrate"},{"type":"text","text":" "},{"type":"text","text":"the presence of a strong reference cycle."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" class, as written above,"},{"type":"text","text":" "},{"type":"text","text":"creates a strong reference cycle between"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance and the closure used for its default "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"Here’s how the cycle looks:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"closureReferenceCycle01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The instance’s "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property holds a strong reference to its closure."},{"type":"text","text":" "},{"type":"text","text":"However, because the closure refers to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" within its body"},{"type":"text","text":" "},{"type":"text","text":"(as a way to reference "},{"type":"codeVoice","code":"self.name"},{"type":"text","text":" and "},{"type":"codeVoice","code":"self.text"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"the closure "},{"type":"emphasis","inlineContent":[{"type":"text","text":"captures"}]},{"type":"text","text":" self,"},{"type":"text","text":" "},{"type":"text","text":"which means that it holds a strong reference back to the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"A strong reference cycle is created between the two."},{"type":"text","text":" "},{"type":"text","text":"(For more information about capturing values in a closure,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Capturing-Values"},{"type":"text","text":".)"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though the closure refers to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" multiple times,"},{"type":"text","text":" "},{"type":"text","text":"it only captures one strong reference to the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you set the "},{"type":"codeVoice","code":"paragraph"},{"type":"text","text":" variable to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"and break its strong reference to the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"neither the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance nor its closure are deallocated,"},{"type":"text","text":" "},{"type":"text","text":"because of the strong reference cycle:"}]},{"type":"codeListing","syntax":"swift","code":["paragraph = nil"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the message in the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" deinitializer isn’t printed,"},{"type":"text","text":" "},{"type":"text","text":"which shows that the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance isn’t deallocated."}]},{"anchor":"Resolving-Strong-Reference-Cycles-for-Closures","level":2,"type":"heading","text":"Resolving Strong Reference Cycles for Closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You resolve a strong reference cycle between a closure and a class instance"},{"type":"text","text":" "},{"type":"text","text":"by defining a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"capture list"}]},{"type":"text","text":" as part of the closure’s definition."},{"type":"text","text":" "},{"type":"text","text":"A capture list defines the rules to use when capturing one or more reference types"},{"type":"text","text":" "},{"type":"text","text":"within the closure’s body."},{"type":"text","text":" "},{"type":"text","text":"As with strong reference cycles between two class instances,"},{"type":"text","text":" "},{"type":"text","text":"you declare each captured reference to be a weak or unowned reference"},{"type":"text","text":" "},{"type":"text","text":"rather than a strong reference."},{"type":"text","text":" "},{"type":"text","text":"The appropriate choice of weak or unowned depends on"},{"type":"text","text":" "},{"type":"text","text":"the relationships between the different parts of your code."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift requires you to write "},{"type":"codeVoice","code":"self.someProperty"},{"type":"text","text":" or "},{"type":"codeVoice","code":"self.someMethod()"},{"type":"text","text":" "},{"type":"text","text":"(rather than just "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" or "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"whenever you refer to a member of "},{"type":"codeVoice","code":"self"},{"type":"text","text":" within a closure."},{"type":"text","text":" "},{"type":"text","text":"This helps you remember that it’s possible to capture "},{"type":"codeVoice","code":"self"},{"type":"text","text":" by accident."}]}],"type":"aside","name":"Note"},{"anchor":"Defining-a-Capture-List","level":3,"type":"heading","text":"Defining a Capture List"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each item in a capture list is a pairing of the "},{"type":"codeVoice","code":"weak"},{"type":"text","text":" or "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"with a reference to a class instance (such as "},{"type":"codeVoice","code":"self"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"or a variable initialized with some value (such as "},{"type":"codeVoice","code":"delegate = self.delegate"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"These pairings are written within a pair of square braces, separated by commas."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Place the capture list before a closure’s parameter list and return type"},{"type":"text","text":" "},{"type":"text","text":"if they’re provided:"}]},{"type":"codeListing","syntax":"swift","code":["lazy var someClosure = {","      [unowned self, weak delegate = self.delegate]","      (index: Int, stringToProcess: String) -> String in","   \/\/ closure body goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a closure doesn’t specify a parameter list or return type"},{"type":"text","text":" "},{"type":"text","text":"because they can be inferred from context,"},{"type":"text","text":" "},{"type":"text","text":"place the capture list at the very start of the closure,"},{"type":"text","text":" "},{"type":"text","text":"followed by the "},{"type":"codeVoice","code":"in"},{"type":"text","text":" keyword:"}]},{"type":"codeListing","syntax":"swift","code":["lazy var someClosure = {","      [unowned self, weak delegate = self.delegate] in","   \/\/ closure body goes here","}"]},{"anchor":"Weak-and-Unowned-References","level":3,"type":"heading","text":"Weak and Unowned References"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a capture in a closure as an unowned reference"},{"type":"text","text":" "},{"type":"text","text":"when the closure and the instance it captures will always refer to each other,"},{"type":"text","text":" "},{"type":"text","text":"and will always be deallocated at the same time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversely, define a capture as a weak reference when the captured reference"},{"type":"text","text":" "},{"type":"text","text":"may become "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at some point in the future."},{"type":"text","text":" "},{"type":"text","text":"Weak references are always of an optional type,"},{"type":"text","text":" "},{"type":"text","text":"and automatically become "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" when the instance they reference is deallocated."},{"type":"text","text":" "},{"type":"text","text":"This enables you to check for their existence within the closure’s body."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the captured reference will never become "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it should always be captured as an unowned reference,"},{"type":"text","text":" "},{"type":"text","text":"rather than a weak reference."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An unowned reference is the appropriate capture method to use to resolve"},{"type":"text","text":" "},{"type":"text","text":"the strong reference cycle in the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" example"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures"},{"type":"text","text":" above."},{"type":"text","text":" "},{"type":"text","text":"Here’s how you write the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" class to avoid the cycle:"}]},{"type":"codeListing","syntax":"swift","code":["class HTMLElement {","","   let name: String","   let text: String?","","   lazy var asHTML: () -> String = {","         [unowned self] in","      if let text = self.text {","         return \"<\\(self.name)>\\(text)<\/\\(self.name)>\"","      } else {","         return \"<\\(self.name) \/>\"","      }","   }","","   init(name: String, text: String? = nil) {","      self.name = name","      self.text = text","   }","","   deinit {","      print(\"\\(name) is being deinitialized\")","   }","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This implementation of "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" is identical to the previous implementation,"},{"type":"text","text":" "},{"type":"text","text":"apart from the addition of a capture list within the "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" closure."},{"type":"text","text":" "},{"type":"text","text":"In this case, the capture list is "},{"type":"codeVoice","code":"[unowned self]"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which means “capture self as an unowned reference rather than a strong reference”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create and print an "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance as before:"}]},{"type":"codeListing","syntax":"swift","code":["var paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")","print(paragraph!.asHTML())","\/\/ Prints \"<p>hello, world<\/p>\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the references look with the capture list in place:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"closureReferenceCycle02"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This time, the capture of "},{"type":"codeVoice","code":"self"},{"type":"text","text":" by the closure is an unowned reference,"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t keep a strong hold on the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance it has captured."},{"type":"text","text":" "},{"type":"text","text":"If you set the strong reference from the "},{"type":"codeVoice","code":"paragraph"},{"type":"text","text":" variable to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance is deallocated,"},{"type":"text","text":" "},{"type":"text","text":"as can be seen from the printing of its deinitializer message in the example below:"}]},{"type":"codeListing","syntax":"swift","code":["paragraph = nil","\/\/ Prints \"p is being deinitialized\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about capture lists,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/automaticreferencecounting"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Automatic Reference Counting","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Implicitly-Unwrapped-Optionals":{"abstract":[],"title":"Implicitly Unwrapped Optionals","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals","url":"\/documentation\/the-swift-programming-language\/thebasics#Implicitly-Unwrapped-Optionals"},"referenceCycle03":{"alt":null,"type":"image","identifier":"referenceCycle03","variants":[{"url":"\/images\/referenceCycle03@2x.png","traits":["2x","light"]},{"url":"\/images\/referenceCycle03~dark@2x.png","traits":["2x","dark"]}]},"weakReference01":{"alt":null,"type":"image","identifier":"weakReference01","variants":[{"url":"\/images\/weakReference01@2x.png","traits":["2x","light"]},{"url":"\/images\/weakReference01~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances":{"abstract":[],"title":"Resolving Strong Reference Cycles Between Class Instances","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"closureReferenceCycle02":{"alt":null,"type":"image","identifier":"closureReferenceCycle02","variants":[{"url":"\/images\/closureReferenceCycle02@2x.png","traits":["2x","light"]},{"url":"\/images\/closureReferenceCycle02~dark@2x.png","traits":["2x","dark"]}]},"referenceCycle01":{"alt":null,"type":"image","identifier":"referenceCycle01","variants":[{"url":"\/images\/referenceCycle01@2x.png","traits":["2x","light"]},{"url":"\/images\/referenceCycle01~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"unownedOptionalReference":{"alt":null,"type":"image","identifier":"unownedOptionalReference","variants":[{"url":"\/images\/unownedOptionalReference@2x.png","traits":["2x","light"]},{"url":"\/images\/unownedOptionalReference~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"unownedReference01":{"alt":null,"type":"image","identifier":"unownedReference01","variants":[{"url":"\/images\/unownedReference01@2x.png","traits":["2x","light"]},{"url":"\/images\/unownedReference01~dark@2x.png","traits":["2x","dark"]}]},"closureReferenceCycle01":{"alt":null,"type":"image","identifier":"closureReferenceCycle01","variants":[{"url":"\/images\/closureReferenceCycle01@2x.png","traits":["2x","light"]},{"url":"\/images\/closureReferenceCycle01~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html":{"title":"Transitioning to ARC Release Notes","titleInlineContent":[{"type":"text","text":"Transitioning to ARC Release Notes"}],"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html","url":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures":{"abstract":[],"title":"Strong Reference Cycles for Closures","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Strong-Reference-Cycles-for-Closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Capturing-Values":{"abstract":[],"title":"Capturing Values","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Capturing-Values","url":"\/documentation\/the-swift-programming-language\/closures#Capturing-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Two-Phase-Initialization":{"abstract":[],"title":"Two-Phase Initialization","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Two-Phase-Initialization","url":"\/documentation\/the-swift-programming-language\/initialization#Two-Phase-Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"unownedReference02":{"alt":null,"type":"image","identifier":"unownedReference02","variants":[{"url":"\/images\/unownedReference02@2x.png","traits":["2x","light"]},{"url":"\/images\/unownedReference02~dark@2x.png","traits":["2x","dark"]}]},"referenceCycle02":{"alt":null,"type":"image","identifier":"referenceCycle02","variants":[{"url":"\/images\/referenceCycle02@2x.png","traits":["2x","light"]},{"url":"\/images\/referenceCycle02~dark@2x.png","traits":["2x","dark"]}]},"weakReference02":{"alt":null,"type":"image","identifier":"weakReference02","variants":[{"url":"\/images\/weakReference02@2x.png","traits":["2x","light"]},{"url":"\/images\/weakReference02~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"weakReference03":{"alt":null,"type":"image","identifier":"weakReference03","variants":[{"url":"\/images\/weakReference03@2x.png","traits":["2x","light"]},{"url":"\/images\/weakReference03~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"}}}