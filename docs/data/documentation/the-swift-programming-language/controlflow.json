{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also provides a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop that makes it easy to iterate over"},{"type":"text","text":" "},{"type":"text","text":"arrays, dictionaries, ranges, strings, and other sequences."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement is considerably more powerful"},{"type":"text","text":" "},{"type":"text","text":"than its counterpart in many C-like languages."},{"type":"text","text":" "},{"type":"text","text":"Cases can match many different patterns,"},{"type":"text","text":" "},{"type":"text","text":"including interval matches, tuples, and casts to a specific type."},{"type":"text","text":" "},{"type":"text","text":"Matched values in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case can be bound to temporary constants or variables"},{"type":"text","text":" "},{"type":"text","text":"for use within the case’s body,"},{"type":"text","text":" "},{"type":"text","text":"and complex matching conditions can be expressed with a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause for each case."}]},{"anchor":"For-In-Loops","level":2,"type":"heading","text":"For-In Loops"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop to iterate over a sequence,"},{"type":"text","text":" "},{"type":"text","text":"such as items in an array, ranges of numbers, or characters in a string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop to iterate over the items in an array:"}]},{"type":"codeListing","syntax":"swift","code":["let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]","for name in names {","   print(\"Hello, \\(name)!\")","}","\/\/ Hello, Anna!","\/\/ Hello, Alex!","\/\/ Hello, Brian!","\/\/ Hello, Jack!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also iterate over a dictionary to access its key-value pairs."},{"type":"text","text":" "},{"type":"text","text":"Each item in the dictionary is returned as a "},{"type":"codeVoice","code":"(key, value)"},{"type":"text","text":" tuple"},{"type":"text","text":" "},{"type":"text","text":"when the dictionary is iterated,"},{"type":"text","text":" "},{"type":"text","text":"and you can decompose the "},{"type":"codeVoice","code":"(key, value)"},{"type":"text","text":" tuple’s members as explicitly named constants"},{"type":"text","text":" "},{"type":"text","text":"for use within the body of the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."},{"type":"text","text":" "},{"type":"text","text":"In the code example below, the dictionary’s keys are decomposed into a constant called "},{"type":"codeVoice","code":"animalName"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the dictionary’s values are decomposed into a constant called "},{"type":"codeVoice","code":"legCount"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]","for (animalName, legCount) in numberOfLegs {","   print(\"\\(animalName)s have \\(legCount) legs\")","}","\/\/ cats have 4 legs","\/\/ ants have 6 legs","\/\/ spiders have 8 legs"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" are inherently unordered,"},{"type":"text","text":" "},{"type":"text","text":"and iterating over them doesn’t guarantee the order"},{"type":"text","text":" "},{"type":"text","text":"in which they will be retrieved."},{"type":"text","text":" "},{"type":"text","text":"In particular,"},{"type":"text","text":" "},{"type":"text","text":"the order you insert items into a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" "},{"type":"text","text":"doesn’t define the order they’re iterated."},{"type":"text","text":" "},{"type":"text","text":"For more about arrays and dictionaries, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loops with numeric ranges."},{"type":"text","text":" "},{"type":"text","text":"This example prints the first few entries in a five-times table:"}]},{"type":"codeListing","syntax":"swift","code":["for index in 1...5 {","   print(\"\\(index) times 5 is \\(index * 5)\")","}","\/\/ 1 times 5 is 5","\/\/ 2 times 5 is 10","\/\/ 3 times 5 is 15","\/\/ 4 times 5 is 20","\/\/ 5 times 5 is 25"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sequence being iterated over is"},{"type":"text","text":" "},{"type":"text","text":"a range of numbers from "},{"type":"codeVoice","code":"1"},{"type":"text","text":" to "},{"type":"codeVoice","code":"5"},{"type":"text","text":", inclusive,"},{"type":"text","text":" "},{"type":"text","text":"as indicated by the use of the closed range operator ("},{"type":"codeVoice","code":"..."},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The value of "},{"type":"codeVoice","code":"index"},{"type":"text","text":" is set to the first number in the range ("},{"type":"codeVoice","code":"1"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and the statements inside the loop are executed."},{"type":"text","text":" "},{"type":"text","text":"In this case, the loop contains only one statement,"},{"type":"text","text":" "},{"type":"text","text":"which prints an entry from the five-times table for the current value of "},{"type":"codeVoice","code":"index"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After the statement is executed,"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"index"},{"type":"text","text":" is updated to contain the second value in the range ("},{"type":"codeVoice","code":"2"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function is called again."},{"type":"text","text":" "},{"type":"text","text":"This process continues until the end of the range is reached."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, "},{"type":"codeVoice","code":"index"},{"type":"text","text":" is a constant whose value is automatically set"},{"type":"text","text":" "},{"type":"text","text":"at the start of each iteration of the loop."},{"type":"text","text":" "},{"type":"text","text":"As such, "},{"type":"codeVoice","code":"index"},{"type":"text","text":" doesn’t have to be declared before it’s used."},{"type":"text","text":" "},{"type":"text","text":"It’s implicitly declared simply by its inclusion in the loop declaration,"},{"type":"text","text":" "},{"type":"text","text":"without the need for a "},{"type":"codeVoice","code":"let"},{"type":"text","text":" declaration keyword."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t need each value from a sequence,"},{"type":"text","text":" "},{"type":"text","text":"you can ignore the values by using an underscore in place of a variable name."}]},{"type":"codeListing","syntax":"swift","code":["let base = 3","let power = 10","var answer = 1","for _ in 1...power {","   answer *= base","}","print(\"\\(base) to the power of \\(power) is \\(answer)\")","\/\/ Prints \"3 to the power of 10 is 59049\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above calculates the value of one number to the power of another"},{"type":"text","text":" "},{"type":"text","text":"(in this case, "},{"type":"codeVoice","code":"3"},{"type":"text","text":" to the power of "},{"type":"codeVoice","code":"10"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"It multiplies a starting value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":" "},{"type":"text","text":"(that is, "},{"type":"codeVoice","code":"3"},{"type":"text","text":" to the power of "},{"type":"codeVoice","code":"0"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"by "},{"type":"codeVoice","code":"3"},{"type":"text","text":", ten times,"},{"type":"text","text":" "},{"type":"text","text":"using a closed range that starts with "},{"type":"codeVoice","code":"1"},{"type":"text","text":" and ends with "},{"type":"codeVoice","code":"10"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For this calculation, the individual counter values each time through the loop are unnecessary —"},{"type":"text","text":" "},{"type":"text","text":"the code simply executes the loop the correct number of times."},{"type":"text","text":" "},{"type":"text","text":"The underscore character ("},{"type":"codeVoice","code":"_"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"used in place of a loop variable"},{"type":"text","text":" "},{"type":"text","text":"causes the individual values to be ignored"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t provide access to the current value during each iteration of the loop."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In some situations, you might not want to use closed ranges,"},{"type":"text","text":" "},{"type":"text","text":"which include both endpoints."},{"type":"text","text":" "},{"type":"text","text":"Consider drawing the tick marks for every minute on a watch face."},{"type":"text","text":" "},{"type":"text","text":"You want to draw "},{"type":"codeVoice","code":"60"},{"type":"text","text":" tick marks, starting with the "},{"type":"codeVoice","code":"0"},{"type":"text","text":" minute."},{"type":"text","text":" "},{"type":"text","text":"Use the half-open range operator ("},{"type":"codeVoice","code":"..<"},{"type":"text","text":") to include the"},{"type":"text","text":" "},{"type":"text","text":"lower bound but not the upper bound."},{"type":"text","text":" "},{"type":"text","text":"For more about ranges, see "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let minutes = 60","for tickMark in 0..<minutes {","   \/\/ render the tick mark each minute (60 times)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some users might want fewer tick marks in their UI."},{"type":"text","text":" "},{"type":"text","text":"They could prefer one mark every "},{"type":"codeVoice","code":"5"},{"type":"text","text":" minutes instead."},{"type":"text","text":" "},{"type":"text","text":"Use the "},{"type":"codeVoice","code":"stride(from:to:by:)"},{"type":"text","text":" function to skip the unwanted marks."}]},{"type":"codeListing","syntax":"swift","code":["let minuteInterval = 5","for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {","   \/\/ render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Closed ranges are also available, by using "},{"type":"codeVoice","code":"stride(from:through:by:)"},{"type":"text","text":" instead:"}]},{"type":"codeListing","syntax":"swift","code":["let hours = 12","let hourInterval = 3","for tickMark in stride(from: 3, through: hours, by: hourInterval) {","   \/\/ render the tick mark every 3 hours (3, 6, 9, 12)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples above use a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop to iterate"},{"type":"text","text":" "},{"type":"text","text":"ranges, arrays, dictionaries, and strings."},{"type":"text","text":" "},{"type":"text","text":"However, you can use this syntax to iterate "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" collection,"},{"type":"text","text":" "},{"type":"text","text":"including your own classes and collection types,"},{"type":"text","text":" "},{"type":"text","text":"as long as those types conform to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},{"type":"text","text":" protocol."}]},{"anchor":"While-Loops","level":2,"type":"heading","text":"While Loops"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop performs a set of statements until a condition becomes "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These kinds of loops are best used when"},{"type":"text","text":" "},{"type":"text","text":"the number of iterations isn’t known before the first iteration begins."},{"type":"text","text":" "},{"type":"text","text":"Swift provides two kinds of "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"while"},{"type":"text","text":" evaluates its condition at the start of each pass through the loop."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" evaluates its condition at the end of each pass through the loop."}]}]}]},{"anchor":"While","level":3,"type":"heading","text":"While"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop starts by evaluating a single condition."},{"type":"text","text":" "},{"type":"text","text":"If the condition is "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a set of statements is repeated until the condition becomes "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s the general form of a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop:"}]},{"type":"codeListing","syntax":"markdown","code":["while <#condition#> {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example plays a simple game of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Snakes and Ladders"}]},{"type":"text","text":" "},{"type":"text","text":"(also known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Chutes and Ladders"}]},{"type":"text","text":"):"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"snakesAndLadders"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The rules of the game are as follows:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The board has 25 squares, and the aim is to land on or beyond square 25."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The player’s starting square is “square zero”,"},{"type":"text","text":" "},{"type":"text","text":"which is just off the bottom-left corner of the board."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each turn, you roll a six-sided dice and move by that number of squares,"},{"type":"text","text":" "},{"type":"text","text":"following the horizontal path indicated by the dotted arrow above."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If your turn ends at the bottom of a ladder, you move up that ladder."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If your turn ends at the head of a snake, you move down that snake."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The game board is represented by an array of "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Its size is based on a constant called "},{"type":"codeVoice","code":"finalSquare"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is used to initialize the array"},{"type":"text","text":" "},{"type":"text","text":"and also to check for a win condition later in the example."},{"type":"text","text":" "},{"type":"text","text":"Because the players start off the board, on “square zero”,"},{"type":"text","text":" "},{"type":"text","text":"the board is initialized with 26 zero "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values, not 25."}]},{"type":"codeListing","syntax":"swift","code":["let finalSquare = 25","var board = [Int](repeating: 0, count: finalSquare + 1)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some squares are then set to have more specific values for the snakes and ladders."},{"type":"text","text":" "},{"type":"text","text":"Squares with a ladder base have a positive number to move you up the board,"},{"type":"text","text":" "},{"type":"text","text":"whereas squares with a snake head have a negative number to move you back down the board."}]},{"type":"codeListing","syntax":"swift","code":["board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02","board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Square 3 contains the bottom of a ladder that moves you up to square 11."},{"type":"text","text":" "},{"type":"text","text":"To represent this, "},{"type":"codeVoice","code":"board[03]"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":"+08"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is equivalent to an integer value of "},{"type":"codeVoice","code":"8"},{"type":"text","text":" "},{"type":"text","text":"(the difference between "},{"type":"codeVoice","code":"3"},{"type":"text","text":" and "},{"type":"codeVoice","code":"11"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"To align the values and statements,"},{"type":"text","text":" "},{"type":"text","text":"the unary plus operator ("},{"type":"codeVoice","code":"+i"},{"type":"text","text":") is explicitly used with"},{"type":"text","text":" "},{"type":"text","text":"the unary minus operator ("},{"type":"codeVoice","code":"-i"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and numbers lower than "},{"type":"codeVoice","code":"10"},{"type":"text","text":" are padded with zeros."},{"type":"text","text":" "},{"type":"text","text":"(Neither stylistic technique is strictly necessary,"},{"type":"text","text":" "},{"type":"text","text":"but they lead to neater code.)"}]},{"type":"codeListing","syntax":"swift","code":["var square = 0","var diceRoll = 0","while square < finalSquare {","   \/\/ roll the dice","   diceRoll += 1","   if diceRoll == 7 { diceRoll = 1 }","   \/\/ move by the rolled amount","   square += diceRoll","   if square < board.count {","      \/\/ if we're still on the board, move up or down for a snake or a ladder","      square += board[square]","   }","}","print(\"Game over!\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above uses a very simple approach to dice rolling."},{"type":"text","text":" "},{"type":"text","text":"Instead of generating a random number,"},{"type":"text","text":" "},{"type":"text","text":"it starts with a "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Each time through the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" is incremented by one"},{"type":"text","text":" "},{"type":"text","text":"and is then checked to see whether it has become too large."},{"type":"text","text":" "},{"type":"text","text":"Whenever this return value equals "},{"type":"codeVoice","code":"7"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the dice roll has become too large and is reset to a value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The result is a sequence of "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" values that’s always"},{"type":"text","text":" "},{"type":"codeVoice","code":"1"},{"type":"text","text":", "},{"type":"codeVoice","code":"2"},{"type":"text","text":", "},{"type":"codeVoice","code":"3"},{"type":"text","text":", "},{"type":"codeVoice","code":"4"},{"type":"text","text":", "},{"type":"codeVoice","code":"5"},{"type":"text","text":", "},{"type":"codeVoice","code":"6"},{"type":"text","text":", "},{"type":"codeVoice","code":"1"},{"type":"text","text":", "},{"type":"codeVoice","code":"2"},{"type":"text","text":" and so on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After rolling the dice, the player moves forward by "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" squares."},{"type":"text","text":" "},{"type":"text","text":"It’s possible that the dice roll may have moved the player beyond square 25,"},{"type":"text","text":" "},{"type":"text","text":"in which case the game is over."},{"type":"text","text":" "},{"type":"text","text":"To cope with this scenario,"},{"type":"text","text":" "},{"type":"text","text":"the code checks that "},{"type":"codeVoice","code":"square"},{"type":"text","text":" is less than the "},{"type":"codeVoice","code":"board"},{"type":"text","text":" array’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"square"},{"type":"text","text":" is valid, the value stored in "},{"type":"codeVoice","code":"board[square]"},{"type":"text","text":" is added"},{"type":"text","text":" "},{"type":"text","text":"to the current "},{"type":"codeVoice","code":"square"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"to move the player up or down any ladders or snakes."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If this check isn’t performed,"},{"type":"text","text":" "},{"type":"codeVoice","code":"board[square]"},{"type":"text","text":" might try to access a value outside the bounds of the "},{"type":"codeVoice","code":"board"},{"type":"text","text":" array,"},{"type":"text","text":" "},{"type":"text","text":"which would trigger a runtime error."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The current "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop execution then ends,"},{"type":"text","text":" "},{"type":"text","text":"and the loop’s condition is checked to see if the loop should be executed again."},{"type":"text","text":" "},{"type":"text","text":"If the player has moved on or beyond square number "},{"type":"codeVoice","code":"25"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the loop’s condition evaluates to "},{"type":"codeVoice","code":"false"},{"type":"text","text":" and the game ends."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop is appropriate in this case,"},{"type":"text","text":" "},{"type":"text","text":"because the length of the game isn’t clear at the start of the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop."},{"type":"text","text":" "},{"type":"text","text":"Instead, the loop is executed until a particular condition is satisfied."}]},{"anchor":"Repeat-While","level":3,"type":"heading","text":"Repeat-While"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other variation of the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"text","text":"known as the "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"text","text":"performs a single pass through the loop block first,"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" considering the loop’s condition."},{"type":"text","text":" "},{"type":"text","text":"It then continues to repeat the loop until the condition is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop in Swift is analogous to"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop in other languages."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s the general form of a "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop:"}]},{"type":"codeListing","syntax":"markdown","code":["repeat {","   <#statements#>","} while <#condition#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Snakes and Ladders"}]},{"type":"text","text":" example again,"},{"type":"text","text":" "},{"type":"text","text":"written as a "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop rather than a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop."},{"type":"text","text":" "},{"type":"text","text":"The values of "},{"type":"codeVoice","code":"finalSquare"},{"type":"text","text":", "},{"type":"codeVoice","code":"board"},{"type":"text","text":", "},{"type":"codeVoice","code":"square"},{"type":"text","text":", and "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" "},{"type":"text","text":"are initialized in exactly the same way as with a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop."}]},{"type":"codeListing","syntax":"swift","code":["let finalSquare = 25","var board = [Int](repeating: 0, count: finalSquare + 1)","board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02","board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08","var square = 0","var diceRoll = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this version of the game,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"first"}]},{"type":"text","text":" action in the loop is to check for a ladder or a snake."},{"type":"text","text":" "},{"type":"text","text":"No ladder on the board takes the player straight to square 25,"},{"type":"text","text":" "},{"type":"text","text":"and so it isn’t possible to win the game by moving up a ladder."},{"type":"text","text":" "},{"type":"text","text":"Therefore, it’s safe to check for a snake or a ladder as the first action in the loop."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At the start of the game, the player is on “square zero”."},{"type":"text","text":" "},{"type":"codeVoice","code":"board[0]"},{"type":"text","text":" always equals "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and has no effect."}]},{"type":"codeListing","syntax":"swift","code":["repeat {","   \/\/ move up or down for a snake or ladder","   square += board[square]","   \/\/ roll the dice","   diceRoll += 1","   if diceRoll == 7 { diceRoll = 1 }","   \/\/ move by the rolled amount","   square += diceRoll","} while square < finalSquare","print(\"Game over!\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the code checks for snakes and ladders,"},{"type":"text","text":" "},{"type":"text","text":"the dice is rolled and the player is moved forward by "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" squares."},{"type":"text","text":" "},{"type":"text","text":"The current loop execution then ends."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The loop’s condition ("},{"type":"codeVoice","code":"while square < finalSquare"},{"type":"text","text":") is the same as before,"},{"type":"text","text":" "},{"type":"text","text":"but this time it’s not evaluated until the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"end"}]},{"type":"text","text":" of the first run through the loop."},{"type":"text","text":" "},{"type":"text","text":"The structure of the "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop is better suited to this game"},{"type":"text","text":" "},{"type":"text","text":"than the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop in the previous example."},{"type":"text","text":" "},{"type":"text","text":"In the "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop above,"},{"type":"text","text":" "},{"type":"codeVoice","code":"square += board[square]"},{"type":"text","text":" is always executed "},{"type":"emphasis","inlineContent":[{"type":"text","text":"immediately after"}]},{"type":"text","text":" "},{"type":"text","text":"the loop’s "},{"type":"codeVoice","code":"while"},{"type":"text","text":" condition confirms that "},{"type":"codeVoice","code":"square"},{"type":"text","text":" is still on the board."},{"type":"text","text":" "},{"type":"text","text":"This behavior removes the need for the array bounds check"},{"type":"text","text":" "},{"type":"text","text":"seen in the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop version of the game described earlier."}]},{"anchor":"Conditional-Statements","level":2,"type":"heading","text":"Conditional Statements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s often useful to execute different pieces of code based on certain conditions."},{"type":"text","text":" "},{"type":"text","text":"You might want to run an extra piece of code when an error occurs,"},{"type":"text","text":" "},{"type":"text","text":"or to display a message when a value becomes too high or too low."},{"type":"text","text":" "},{"type":"text","text":"To do this, you make parts of your code "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conditional"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides two ways to add conditional branches to your code:"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement and the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Typically, you use the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to evaluate simple conditions with only a few possible outcomes."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement is better suited to"},{"type":"text","text":" "},{"type":"text","text":"more complex conditions with multiple possible permutations"},{"type":"text","text":" "},{"type":"text","text":"and is useful in situations where pattern matching can help select"},{"type":"text","text":" "},{"type":"text","text":"an appropriate code branch to execute."}]},{"anchor":"If","level":3,"type":"heading","text":"If"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In its simplest form,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement has a single "},{"type":"codeVoice","code":"if"},{"type":"text","text":" condition."},{"type":"text","text":" "},{"type":"text","text":"It executes a set of statements only if that condition is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["var temperatureInFahrenheit = 30","if temperatureInFahrenheit <= 32 {","   print(\"It's very cold. Consider wearing a scarf.\")","}","\/\/ Prints \"It's very cold. Consider wearing a scarf.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above checks whether the temperature"},{"type":"text","text":" "},{"type":"text","text":"is less than or equal to 32 degrees Fahrenheit"},{"type":"text","text":" "},{"type":"text","text":"(the freezing point of water)."},{"type":"text","text":" "},{"type":"text","text":"If it is, a message is printed."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, no message is printed,"},{"type":"text","text":" "},{"type":"text","text":"and code execution continues after the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement’s closing brace."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement can provide an alternative set of statements,"},{"type":"text","text":" "},{"type":"text","text":"known as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"else clause"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"for situations when the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" condition is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These statements are indicated by the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" keyword."}]},{"type":"codeListing","syntax":"swift","code":["temperatureInFahrenheit = 40","if temperatureInFahrenheit <= 32 {","   print(\"It's very cold. Consider wearing a scarf.\")","} else {","   print(\"It's not that cold. Wear a t-shirt.\")","}","\/\/ Prints \"It's not that cold. Wear a t-shirt.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of these two branches is always executed."},{"type":"text","text":" "},{"type":"text","text":"Because the temperature has increased to "},{"type":"codeVoice","code":"40"},{"type":"text","text":" degrees Fahrenheit,"},{"type":"text","text":" "},{"type":"text","text":"it’s no longer cold enough to advise wearing a scarf"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" branch is triggered instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can chain multiple "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements together"},{"type":"text","text":" "},{"type":"text","text":"to consider additional clauses."}]},{"type":"codeListing","syntax":"swift","code":["temperatureInFahrenheit = 90","if temperatureInFahrenheit <= 32 {","   print(\"It's very cold. Consider wearing a scarf.\")","} else if temperatureInFahrenheit >= 86 {","   print(\"It's really warm. Don't forget to wear sunscreen.\")","} else {","   print(\"It's not that cold. Wear a t-shirt.\")","}","\/\/ Prints \"It's really warm. Don't forget to wear sunscreen.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, an additional "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement was added to respond to particularly warm temperatures."},{"type":"text","text":" "},{"type":"text","text":"The final "},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause remains,"},{"type":"text","text":" "},{"type":"text","text":"and it prints a response for any temperatures that are neither too warm nor too cold."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final "},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause is optional, however,"},{"type":"text","text":" "},{"type":"text","text":"and can be excluded if the set of conditions doesn’t need to be complete."}]},{"type":"codeListing","syntax":"swift","code":["temperatureInFahrenheit = 72","if temperatureInFahrenheit <= 32 {","   print(\"It's very cold. Consider wearing a scarf.\")","} else if temperatureInFahrenheit >= 86 {","   print(\"It's really warm. Don't forget to wear sunscreen.\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the temperature is neither too cold nor too warm to trigger the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" or "},{"type":"codeVoice","code":"else if"},{"type":"text","text":" conditions,"},{"type":"text","text":" "},{"type":"text","text":"no message is printed."}]},{"anchor":"Switch","level":3,"type":"heading","text":"Switch"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement considers a value"},{"type":"text","text":" "},{"type":"text","text":"and compares it against several possible matching patterns."},{"type":"text","text":" "},{"type":"text","text":"It then executes an appropriate block of code,"},{"type":"text","text":" "},{"type":"text","text":"based on the first pattern that matches successfully."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement provides an alternative to the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"for responding to multiple potential states."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In its simplest form, a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement compares a value against"},{"type":"text","text":" "},{"type":"text","text":"one or more values of the same type."}]},{"type":"codeListing","syntax":"markdown","code":["switch <#some value to consider#> {","   case <#value 1#>:","      <#respond to value 1#>","   case <#value 2#>,","       <#value 3#>:","      <#respond to value 2 or 3#>","   default:","      <#otherwise, do something else#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement consists of multiple possible "},{"type":"emphasis","inlineContent":[{"type":"text","text":"cases"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"each of which begins with the "},{"type":"codeVoice","code":"case"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"In addition to comparing against specific values,"},{"type":"text","text":" "},{"type":"text","text":"Swift provides several ways for each case to specify"},{"type":"text","text":" "},{"type":"text","text":"more complex matching patterns."},{"type":"text","text":" "},{"type":"text","text":"These options are described later in this chapter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the body of an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement, each "},{"type":"codeVoice","code":"case"},{"type":"text","text":" is a separate branch of code execution."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement determines which branch should be selected."},{"type":"text","text":" "},{"type":"text","text":"This procedure is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"switching"}]},{"type":"text","text":" on the value that’s being considered."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement must be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"exhaustive"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"That is, every possible value of the type being considered"},{"type":"text","text":" "},{"type":"text","text":"must be matched by one of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" cases."},{"type":"text","text":" "},{"type":"text","text":"If it’s not appropriate to provide a case for every possible value,"},{"type":"text","text":" "},{"type":"text","text":"you can define a default case to cover any values that aren’t addressed explicitly."},{"type":"text","text":" "},{"type":"text","text":"This default case is indicated by the "},{"type":"codeVoice","code":"default"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"and must always appear last."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement to consider"},{"type":"text","text":" "},{"type":"text","text":"a single lowercase character called "},{"type":"codeVoice","code":"someCharacter"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let someCharacter: Character = \"z\"","switch someCharacter {","   case \"a\":","      print(\"The first letter of the alphabet\")","   case \"z\":","      print(\"The last letter of the alphabet\")","   default:","      print(\"Some other character\")","}","\/\/ Prints \"The last letter of the alphabet\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s first case matches"},{"type":"text","text":" "},{"type":"text","text":"the first letter of the English alphabet, "},{"type":"codeVoice","code":"a"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and its second case matches the last letter, "},{"type":"codeVoice","code":"z"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" must have a case for every possible character,"},{"type":"text","text":" "},{"type":"text","text":"not just every alphabetic character,"},{"type":"text","text":" "},{"type":"text","text":"this "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement uses a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case"},{"type":"text","text":" "},{"type":"text","text":"to match all characters other than "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"z"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This provision ensures that the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement is exhaustive."}]},{"anchor":"No-Implicit-Fallthrough","level":4,"type":"heading","text":"No Implicit Fallthrough"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In contrast with "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements in C and Objective-C,"},{"type":"text","text":" "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements in Swift don’t"},{"type":"text","text":" "},{"type":"text","text":"fall through the bottom of each case and into the next one by default."},{"type":"text","text":" "},{"type":"text","text":"Instead, the entire "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement finishes its execution"},{"type":"text","text":" "},{"type":"text","text":"as soon as the first matching "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case is completed,"},{"type":"text","text":" "},{"type":"text","text":"without requiring an explicit "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"This makes the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement safer and easier to use than the one in C"},{"type":"text","text":" "},{"type":"text","text":"and avoids executing more than one "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case by mistake."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Although "},{"type":"codeVoice","code":"break"},{"type":"text","text":" isn’t required in Swift,"},{"type":"text","text":" "},{"type":"text","text":"you can use a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement to match and ignore a particular case"},{"type":"text","text":" "},{"type":"text","text":"or to break out of a matched case before that case has completed its execution."},{"type":"text","text":" "},{"type":"text","text":"For details, see "},{"type":"text","text":"doc:ControlFlow#Break-in-a-Switch-Statement"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The body of each case "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" contain at least one executable statement."},{"type":"text","text":" "},{"type":"text","text":"It isn’t valid to write the following code, because the first case is empty:"}]},{"type":"codeListing","syntax":"swift","code":["let anotherCharacter: Character = \"a\"","switch anotherCharacter {","   case \"a\": \/\/ Invalid, the case has an empty body","   case \"A\":","      print(\"The letter A\")","   default:","      print(\"Not the letter A\")","}","\/\/ This will report a compile-time error."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement in C,"},{"type":"text","text":" "},{"type":"text","text":"this "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement doesn’t match both "},{"type":"codeVoice","code":"\"a\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"A\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Rather, it reports a compile-time error that "},{"type":"codeVoice","code":"case \"a\":"},{"type":"text","text":" "},{"type":"text","text":"doesn’t contain any executable statements."},{"type":"text","text":" "},{"type":"text","text":"This approach avoids accidental fallthrough from one case to another"},{"type":"text","text":" "},{"type":"text","text":"and makes for safer code that’s clearer in its intent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" with a single case that"},{"type":"text","text":" "},{"type":"text","text":"matches both "},{"type":"codeVoice","code":"\"a\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"A\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"combine the two values into a compound case,"},{"type":"text","text":" "},{"type":"text","text":"separating the values with commas."}]},{"type":"codeListing","syntax":"swift","code":["let anotherCharacter: Character = \"a\"","switch anotherCharacter {","   case \"a\", \"A\":","      print(\"The letter A\")","   default:","      print(\"Not the letter A\")","}","\/\/ Prints \"The letter A\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For readability,"},{"type":"text","text":" "},{"type":"text","text":"a compound case can also be written over multiple lines."},{"type":"text","text":" "},{"type":"text","text":"For more information about compound cases,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"text","text":"doc:ControlFlow#Compound-Cases"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To explicitly fall through at the end of a particular "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Fallthrough"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Interval-Matching","level":4,"type":"heading","text":"Interval Matching"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Values in "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" cases can be checked for their inclusion in an interval."},{"type":"text","text":" "},{"type":"text","text":"This example uses number intervals"},{"type":"text","text":" "},{"type":"text","text":"to provide a natural-language count for numbers of any size:"}]},{"type":"codeListing","syntax":"swift","code":["let approximateCount = 62","let countedThings = \"moons orbiting Saturn\"","let naturalCount: String","switch approximateCount {","case 0:","    naturalCount = \"no\"","case 1..<5:","    naturalCount = \"a few\"","case 5..<12:","    naturalCount = \"several\"","case 12..<100:","    naturalCount = \"dozens of\"","case 100..<1000:","    naturalCount = \"hundreds of\"","default:","    naturalCount = \"many\"","}","print(\"There are \\(naturalCount) \\(countedThings).\")","\/\/ Prints \"There are dozens of moons orbiting Saturn.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above example, "},{"type":"codeVoice","code":"approximateCount"},{"type":"text","text":" is evaluated in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Each "},{"type":"codeVoice","code":"case"},{"type":"text","text":" compares that value to a number or interval."},{"type":"text","text":" "},{"type":"text","text":"Because the value of "},{"type":"codeVoice","code":"approximateCount"},{"type":"text","text":" falls between 12 and 100,"},{"type":"text","text":" "},{"type":"codeVoice","code":"naturalCount"},{"type":"text","text":" is assigned the value "},{"type":"codeVoice","code":"\"dozens of\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and execution is transferred out of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."}]},{"anchor":"Tuples","level":4,"type":"heading","text":"Tuples"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use tuples to test multiple values in the same "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Each element of the tuple can be tested against a different value or interval of values."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use the underscore character ("},{"type":"codeVoice","code":"_"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"also known as the wildcard pattern,"},{"type":"text","text":" "},{"type":"text","text":"to match any possible value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below takes an (x, y) point,"},{"type":"text","text":" "},{"type":"text","text":"expressed as a simple tuple of type "},{"type":"codeVoice","code":"(Int, Int)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and categorizes it on the graph that follows the example."}]},{"type":"codeListing","syntax":"swift","code":["let somePoint = (1, 1)","switch somePoint {","   case (0, 0):","      print(\"\\(somePoint) is at the origin\")","   case (_, 0):","      print(\"\\(somePoint) is on the x-axis\")","   case (0, _):","      print(\"\\(somePoint) is on the y-axis\")","   case (-2...2, -2...2):","      print(\"\\(somePoint) is inside the box\")","   default:","      print(\"\\(somePoint) is outside of the box\")","}","\/\/ Prints \"(1, 1) is inside the box\""]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"coordinateGraphSimple"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement determines whether the point is"},{"type":"text","text":" "},{"type":"text","text":"at the origin (0, 0),"},{"type":"text","text":" "},{"type":"text","text":"on the red x-axis,"},{"type":"text","text":" "},{"type":"text","text":"on the green y-axis,"},{"type":"text","text":" "},{"type":"text","text":"inside the blue 4-by-4 box centered on the origin,"},{"type":"text","text":" "},{"type":"text","text":"or outside of the box."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike C, Swift allows multiple "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" cases to consider the same value or values."},{"type":"text","text":" "},{"type":"text","text":"In fact, the point (0, 0) could match all "},{"type":"emphasis","inlineContent":[{"type":"text","text":"four"}]},{"type":"text","text":" of the cases in this example."},{"type":"text","text":" "},{"type":"text","text":"However, if multiple matches are possible,"},{"type":"text","text":" "},{"type":"text","text":"the first matching case is always used."},{"type":"text","text":" "},{"type":"text","text":"The point (0, 0) would match "},{"type":"codeVoice","code":"case (0, 0)"},{"type":"text","text":" first,"},{"type":"text","text":" "},{"type":"text","text":"and so all other matching cases would be ignored."}]},{"anchor":"Value-Bindings","level":4,"type":"heading","text":"Value Bindings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case can name the value or values it matches to temporary constants or variables,"},{"type":"text","text":" "},{"type":"text","text":"for use in the body of the case."},{"type":"text","text":" "},{"type":"text","text":"This behavior is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value binding"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because the values are bound to temporary constants or variables within the case’s body."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below takes an (x, y) point,"},{"type":"text","text":" "},{"type":"text","text":"expressed as a tuple of type "},{"type":"codeVoice","code":"(Int, Int)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and categorizes it on the graph that follows:"}]},{"type":"codeListing","syntax":"swift","code":["let anotherPoint = (2, 0)","switch anotherPoint {","   case (let x, 0):","      print(\"on the x-axis with an x value of \\(x)\")","   case (0, let y):","      print(\"on the y-axis with a y value of \\(y)\")","   case let (x, y):","      print(\"somewhere else at (\\(x), \\(y))\")","}","\/\/ Prints \"on the x-axis with an x value of 2\""]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"coordinateGraphMedium"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement determines whether the point is"},{"type":"text","text":" "},{"type":"text","text":"on the red x-axis,"},{"type":"text","text":" "},{"type":"text","text":"on the green y-axis,"},{"type":"text","text":" "},{"type":"text","text":"or elsewhere (on neither axis)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The three "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" cases declare placeholder constants "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which temporarily take on one or both tuple values from "},{"type":"codeVoice","code":"anotherPoint"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The first case, "},{"type":"codeVoice","code":"case (let x, 0)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"matches any point with a "},{"type":"codeVoice","code":"y"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":" "},{"type":"text","text":"and assigns the point’s "},{"type":"codeVoice","code":"x"},{"type":"text","text":" value to the temporary constant "},{"type":"codeVoice","code":"x"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Similarly, the second case, "},{"type":"codeVoice","code":"case (0, let y)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"matches any point with an "},{"type":"codeVoice","code":"x"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":" "},{"type":"text","text":"and assigns the point’s "},{"type":"codeVoice","code":"y"},{"type":"text","text":" value to the temporary constant "},{"type":"codeVoice","code":"y"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the temporary constants are declared,"},{"type":"text","text":" "},{"type":"text","text":"they can be used within the case’s code block."},{"type":"text","text":" "},{"type":"text","text":"Here, they’re used to print the categorization of the point."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement doesn’t have a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case."},{"type":"text","text":" "},{"type":"text","text":"The final case, "},{"type":"codeVoice","code":"case let (x, y)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"declares a tuple of two placeholder constants that can match any value."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"anotherPoint"},{"type":"text","text":" is always a tuple of two values,"},{"type":"text","text":" "},{"type":"text","text":"this case matches all possible remaining values,"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case isn’t needed to make the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement exhaustive."}]},{"anchor":"Where","level":4,"type":"heading","text":"Where"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case can use a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause to check for additional conditions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below categorizes an (x, y) point on the following graph:"}]},{"type":"codeListing","syntax":"swift","code":["let yetAnotherPoint = (1, -1)","switch yetAnotherPoint {","   case let (x, y) where x == y:","      print(\"(\\(x), \\(y)) is on the line x == y\")","   case let (x, y) where x == -y:","      print(\"(\\(x), \\(y)) is on the line x == -y\")","   case let (x, y):","      print(\"(\\(x), \\(y)) is just some arbitrary point\")","}","\/\/ Prints \"(1, -1) is on the line x == -y\""]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"coordinateGraphComplex"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement determines whether the point is"},{"type":"text","text":" "},{"type":"text","text":"on the green diagonal line where "},{"type":"codeVoice","code":"x == y"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"on the purple diagonal line where "},{"type":"codeVoice","code":"x == -y"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or neither."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The three "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" cases declare placeholder constants "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which temporarily take on the two tuple values from "},{"type":"codeVoice","code":"yetAnotherPoint"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These constants are used as part of a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause,"},{"type":"text","text":" "},{"type":"text","text":"to create a dynamic filter."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case matches the current value of "},{"type":"codeVoice","code":"point"},{"type":"text","text":" "},{"type":"text","text":"only if the "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause’s condition evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for that value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As in the previous example, the final case matches all possible remaining values,"},{"type":"text","text":" "},{"type":"text","text":"and so a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case isn’t needed to make the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement exhaustive."}]},{"anchor":"Compound-Cases","level":4,"type":"heading","text":"Compound Cases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple switch cases that share the same body"},{"type":"text","text":" "},{"type":"text","text":"can be combined by writing several patterns after "},{"type":"codeVoice","code":"case"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a comma between each of the patterns."},{"type":"text","text":" "},{"type":"text","text":"If any of the patterns match, then the case is considered to match."},{"type":"text","text":" "},{"type":"text","text":"The patterns can be written over multiple lines if the list is long."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let someCharacter: Character = \"e\"","switch someCharacter {","    case \"a\", \"e\", \"i\", \"o\", \"u\":","        print(\"\\(someCharacter) is a vowel\")","    case \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",","        \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":","        print(\"\\(someCharacter) is a consonant\")","    default:","        print(\"\\(someCharacter) isn't a vowel or a consonant\")","}","\/\/ Prints \"e is a vowel\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s first case matches"},{"type":"text","text":" "},{"type":"text","text":"all five lowercase vowels in the English language."},{"type":"text","text":" "},{"type":"text","text":"Similarly, its second case matches all lowercase English consonants."},{"type":"text","text":" "},{"type":"text","text":"Finally, the "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case matches any other character."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Compound cases can also include value bindings."},{"type":"text","text":" "},{"type":"text","text":"All of the patterns of a compound case"},{"type":"text","text":" "},{"type":"text","text":"have to include the same set of value bindings,"},{"type":"text","text":" "},{"type":"text","text":"and each binding has to get a value of the same type"},{"type":"text","text":" "},{"type":"text","text":"from all of the patterns in the compound case."},{"type":"text","text":" "},{"type":"text","text":"This ensures that,"},{"type":"text","text":" "},{"type":"text","text":"no matter which part of the compound case matched,"},{"type":"text","text":" "},{"type":"text","text":"the code in the body of the case"},{"type":"text","text":" "},{"type":"text","text":"can always access a value for the bindings"},{"type":"text","text":" "},{"type":"text","text":"and that the value always has the same type."}]},{"type":"codeListing","syntax":"swift","code":["let stillAnotherPoint = (9, 0)","switch stillAnotherPoint {","    case (let distance, 0), (0, let distance):","        print(\"On an axis, \\(distance) from the origin\")","    default:","        print(\"Not on an axis\")","}","\/\/ Prints \"On an axis, 9 from the origin\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"case"},{"type":"text","text":" above has two patterns:"},{"type":"text","text":" "},{"type":"codeVoice","code":"(let distance, 0)"},{"type":"text","text":" matches points on the x-axis"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"(0, let distance)"},{"type":"text","text":" matches points on the y-axis."},{"type":"text","text":" "},{"type":"text","text":"Both patterns include a binding for "},{"type":"codeVoice","code":"distance"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"distance"},{"type":"text","text":" is an integer in both patterns —"},{"type":"text","text":" "},{"type":"text","text":"which means that the code in the body of the "},{"type":"codeVoice","code":"case"},{"type":"text","text":" "},{"type":"text","text":"can always access a value for "},{"type":"codeVoice","code":"distance"},{"type":"text","text":"."}]},{"anchor":"Control-Transfer-Statements","level":2,"type":"heading","text":"Control Transfer Statements"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Control transfer statements"}]},{"type":"text","text":" change the order in which your code is executed,"},{"type":"text","text":" "},{"type":"text","text":"by transferring control from one piece of code to another."},{"type":"text","text":" "},{"type":"text","text":"Swift has five control transfer statements:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"continue"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"break"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fallthrough"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"return"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"throw"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"continue"},{"type":"text","text":", "},{"type":"codeVoice","code":"break"},{"type":"text","text":", and "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" statements are described below."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement is described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement is described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions"},{"type":"text","text":"."}]},{"anchor":"Continue","level":3,"type":"heading","text":"Continue"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A instrução "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" diz ao "},{"type":"emphasis","inlineContent":[{"type":"text","text":"loop"}]},{"type":"text","text":" para parar o que está fazendo"},{"type":"text","text":" "},{"type":"text","text":"e recomeçar no início da próxima iteração do "},{"type":"emphasis","inlineContent":[{"type":"text","text":"loop"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Ela diz “Terminei a atual iteração”"},{"type":"text","text":" "},{"type":"text","text":"sem sair completamente do "},{"type":"emphasis","inlineContent":[{"type":"text","text":"loop"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O seguinte exemplo remove todas as vogais e espaços de uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" com letras minúsculas"},{"type":"text","text":" "},{"type":"text","text":"para criar uma frase de quebra-cabeça enigmática:"}]},{"type":"codeListing","syntax":"swift","code":["let puzzleInput = \"great minds think alike\"","var puzzleOutput = \"\"","let charactersToRemove: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \" \"]","for character in puzzleInput {","   if charactersToRemove.contains(character) {","      continue","   }","   puzzleOutput.append(character)","}","print(puzzleOutput)","\/\/ Prints \"grtmndsthnklk\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O código acima chama a palavra-chave "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" sempre que ele encontrar uma vogal ou espaço,"},{"type":"text","text":" "},{"type":"text","text":"fazendo com que a atual iteração do "},{"type":"emphasis","inlineContent":[{"type":"text","text":"loop"}]},{"type":"text","text":" pare imediatamente"},{"type":"text","text":" "},{"type":"text","text":"e pule direto para o início da próxima iteração."}]},{"anchor":"Break","level":3,"type":"heading","text":"Break"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement ends execution of an entire control flow statement immediately."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement can be used inside a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" or loop statement"},{"type":"text","text":" "},{"type":"text","text":"when you want to terminate the execution of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" or loop statement"},{"type":"text","text":" "},{"type":"text","text":"earlier than would otherwise be the case."}]},{"anchor":"Break-in-a-Loop-Statement","level":4,"type":"heading","text":"Break in a Loop Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When used inside a loop statement,"},{"type":"text","text":" "},{"type":"codeVoice","code":"break"},{"type":"text","text":" ends the loop’s execution immediately"},{"type":"text","text":" "},{"type":"text","text":"and transfers control to the code after the loop’s closing brace ("},{"type":"codeVoice","code":"}"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"No further code from the current iteration of the loop is executed,"},{"type":"text","text":" "},{"type":"text","text":"and no further iterations of the loop are started."}]},{"anchor":"Break-in-a-Switch-Statement","level":4,"type":"heading","text":"Break in a Switch Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When used inside a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"codeVoice","code":"break"},{"type":"text","text":" causes the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement to end its execution immediately"},{"type":"text","text":" "},{"type":"text","text":"and to transfer control to the code after"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s closing brace ("},{"type":"codeVoice","code":"}"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This behavior can be used to match and ignore one or more cases in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Because Swift’s "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement is exhaustive"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t allow empty cases,"},{"type":"text","text":" "},{"type":"text","text":"it’s sometimes necessary to deliberately match and ignore a case"},{"type":"text","text":" "},{"type":"text","text":"in order to make your intentions explicit."},{"type":"text","text":" "},{"type":"text","text":"You do this by writing the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement as the entire body of the case you want to ignore."},{"type":"text","text":" "},{"type":"text","text":"When that case is matched by the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement inside the case ends the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s execution immediately."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case that contains only a comment is reported as a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"Comments aren’t statements and don’t cause a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case to be ignored."},{"type":"text","text":" "},{"type":"text","text":"Always use a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement to ignore a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example switches on a "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"and determines whether it represents a number symbol in one of four languages."},{"type":"text","text":" "},{"type":"text","text":"For brevity, multiple values are covered in a single "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case."}]},{"type":"codeListing","syntax":"swift","code":["let numberSymbol: Character = \"三\"  \/\/ Chinese symbol for the number 3","var possibleIntegerValue: Int?","switch numberSymbol {","   case \"1\", \"١\", \"一\", \"๑\":","      possibleIntegerValue = 1","   case \"2\", \"٢\", \"二\", \"๒\":","      possibleIntegerValue = 2","   case \"3\", \"٣\", \"三\", \"๓\":","      possibleIntegerValue = 3","   case \"4\", \"٤\", \"四\", \"๔\":","      possibleIntegerValue = 4","   default:","      break","}","if let integerValue = possibleIntegerValue {","   print(\"The integer value of \\(numberSymbol) is \\(integerValue).\")","} else {","   print(\"An integer value couldn't be found for \\(numberSymbol).\")","}","\/\/ Prints \"The integer value of 三 is 3.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example checks "},{"type":"codeVoice","code":"numberSymbol"},{"type":"text","text":" to determine whether it’s"},{"type":"text","text":" "},{"type":"text","text":"a Latin, Arabic, Chinese, or Thai symbol for"},{"type":"text","text":" "},{"type":"text","text":"the numbers "},{"type":"codeVoice","code":"1"},{"type":"text","text":" to "},{"type":"codeVoice","code":"4"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If a match is found,"},{"type":"text","text":" "},{"type":"text","text":"one of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s cases sets"},{"type":"text","text":" "},{"type":"text","text":"an optional "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"possibleIntegerValue"},{"type":"text","text":" "},{"type":"text","text":"to an appropriate integer value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement completes its execution,"},{"type":"text","text":" "},{"type":"text","text":"the example uses optional binding to determine whether a value was found."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"possibleIntegerValue"},{"type":"text","text":" variable has an implicit initial value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"by virtue of being an optional type,"},{"type":"text","text":" "},{"type":"text","text":"and so the optional binding will succeed only"},{"type":"text","text":" "},{"type":"text","text":"if "},{"type":"codeVoice","code":"possibleIntegerValue"},{"type":"text","text":" was set to an actual value"},{"type":"text","text":" "},{"type":"text","text":"by one of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s first four cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it’s not practical to list every possible "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value in the example above,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case handles any characters that aren’t matched."},{"type":"text","text":" "},{"type":"text","text":"This "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case doesn’t need to perform any action,"},{"type":"text","text":" "},{"type":"text","text":"and so it’s written with a single "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement as its body."},{"type":"text","text":" "},{"type":"text","text":"As soon as the "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case is matched,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement ends the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s execution,"},{"type":"text","text":" "},{"type":"text","text":"and code execution continues from the "},{"type":"codeVoice","code":"if let"},{"type":"text","text":" statement."}]},{"anchor":"Fallthrough","level":3,"type":"heading","text":"Fallthrough"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements don’t fall through the bottom of each case and into the next one."},{"type":"text","text":" "},{"type":"text","text":"That is, the entire "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement completes its execution as soon as the first matching case is completed."},{"type":"text","text":" "},{"type":"text","text":"By contrast, C requires you to insert an explicit "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"at the end of every "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case to prevent fallthrough."},{"type":"text","text":" "},{"type":"text","text":"Avoiding default fallthrough means that Swift "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements are"},{"type":"text","text":" "},{"type":"text","text":"much more concise and predictable than their counterparts in C,"},{"type":"text","text":" "},{"type":"text","text":"and thus they avoid executing multiple "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" cases by mistake."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need C-style fallthrough behavior,"},{"type":"text","text":" "},{"type":"text","text":"you can opt in to this behavior on a case-by-case basis with the "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"The example below uses "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" to create a textual description of a number."}]},{"type":"codeListing","syntax":"swift","code":["let integerToDescribe = 5","var description = \"The number \\(integerToDescribe) is\"","switch integerToDescribe {","   case 2, 3, 5, 7, 11, 13, 17, 19:","      description += \" a prime number, and also\"","      fallthrough","   default:","      description += \" an integer.\"","}","print(description)","\/\/ Prints \"The number 5 is a prime number, and also an integer.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example declares a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"description"},{"type":"text","text":" "},{"type":"text","text":"and assigns it an initial value."},{"type":"text","text":" "},{"type":"text","text":"The function then considers the value of "},{"type":"codeVoice","code":"integerToDescribe"},{"type":"text","text":" using a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"If the value of "},{"type":"codeVoice","code":"integerToDescribe"},{"type":"text","text":" is one of the prime numbers in the list,"},{"type":"text","text":" "},{"type":"text","text":"the function appends text to the end of "},{"type":"codeVoice","code":"description"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to note that the number is prime."},{"type":"text","text":" "},{"type":"text","text":"It then uses the "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword to “fall into” the "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case as well."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case adds some extra text to the end of the description,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement is complete."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless the value of "},{"type":"codeVoice","code":"integerToDescribe"},{"type":"text","text":" is in the list of known prime numbers,"},{"type":"text","text":" "},{"type":"text","text":"it isn’t matched by the first "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case at all."},{"type":"text","text":" "},{"type":"text","text":"Because there are no other specific cases,"},{"type":"text","text":" "},{"type":"codeVoice","code":"integerToDescribe"},{"type":"text","text":" is matched by the "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement has finished executing,"},{"type":"text","text":" "},{"type":"text","text":"the number’s description is printed using the "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the number "},{"type":"codeVoice","code":"5"},{"type":"text","text":" is correctly identified as a prime number."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword doesn’t check the case conditions"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case that it causes execution to fall into."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword simply causes code execution to move"},{"type":"text","text":" "},{"type":"text","text":"directly to the statements inside the next case (or "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case) block,"},{"type":"text","text":" "},{"type":"text","text":"as in C’s standard "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement behavior."}]}],"type":"aside","name":"Note"},{"anchor":"Labeled-Statements","level":3,"type":"heading","text":"Labeled Statements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, you can nest loops and conditional statements"},{"type":"text","text":" "},{"type":"text","text":"inside other loops and conditional statements"},{"type":"text","text":" "},{"type":"text","text":"to create complex control flow structures."},{"type":"text","text":" "},{"type":"text","text":"However, loops and conditional statements can both use the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to end their execution prematurely."},{"type":"text","text":" "},{"type":"text","text":"Therefore, it’s sometimes useful to be explicit about"},{"type":"text","text":" "},{"type":"text","text":"which loop or conditional statement you want a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement to terminate."},{"type":"text","text":" "},{"type":"text","text":"Similarly, if you have multiple nested loops,"},{"type":"text","text":" "},{"type":"text","text":"it can be useful to be explicit about which loop the "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"should affect."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To achieve these aims,"},{"type":"text","text":" "},{"type":"text","text":"you can mark a loop statement or conditional statement with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statement label"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"With a conditional statement,"},{"type":"text","text":" "},{"type":"text","text":"you can use a statement label with the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to end the execution of the labeled statement."},{"type":"text","text":" "},{"type":"text","text":"With a loop statement,"},{"type":"text","text":" "},{"type":"text","text":"you can use a statement label with the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" or "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to end or continue the execution of the labeled statement."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A labeled statement is indicated by placing"},{"type":"text","text":" "},{"type":"text","text":"a label on the same line as the statement’s introducer keyword, followed by a colon."},{"type":"text","text":" "},{"type":"text","text":"Here’s an example of this syntax for a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"text","text":"although the principle is the same for all loops and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements:"}]},{"type":"codeListing","syntax":"markdown","code":["<#label name#>: while <#condition#> {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example uses the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"with a labeled "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop for an adapted version of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Snakes and Ladders"}]},{"type":"text","text":" game"},{"type":"text","text":" "},{"type":"text","text":"that you saw earlier in this chapter."},{"type":"text","text":" "},{"type":"text","text":"This time around, the game has an extra rule:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To win, you must land "},{"type":"emphasis","inlineContent":[{"type":"text","text":"exactly"}]},{"type":"text","text":" on square 25."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a particular dice roll would take you beyond square 25,"},{"type":"text","text":" "},{"type":"text","text":"you must roll again until you roll the exact number needed to land on square 25."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The game board is the same as before."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"snakesAndLadders"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values of "},{"type":"codeVoice","code":"finalSquare"},{"type":"text","text":", "},{"type":"codeVoice","code":"board"},{"type":"text","text":", "},{"type":"codeVoice","code":"square"},{"type":"text","text":", and "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" "},{"type":"text","text":"are initialized in the same way as before:"}]},{"type":"codeListing","syntax":"swift","code":["let finalSquare = 25","var board = [Int](repeating: 0, count: finalSquare + 1)","board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02","board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08","var square = 0","var diceRoll = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This version of the game uses a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop and a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to implement the game’s logic."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop has a statement label called "},{"type":"codeVoice","code":"gameLoop"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it’s the main game loop for the Snakes and Ladders game."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop’s condition is "},{"type":"codeVoice","code":"while square != finalSquare"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to reflect that you must land exactly on square 25."}]},{"type":"codeListing","syntax":"swift","code":["gameLoop: while square != finalSquare {","   diceRoll += 1","   if diceRoll == 7 { diceRoll = 1 }","   switch square + diceRoll {","      case finalSquare:","         \/\/ diceRoll will move us to the final square, so the game is over","         break gameLoop","      case let newSquare where newSquare > finalSquare:","         \/\/ diceRoll will move us beyond the final square, so roll again","         continue gameLoop","      default:","         \/\/ this is a valid move, so find out its effect","         square += diceRoll","         square += board[square]","   }","}","print(\"Game over!\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The dice is rolled at the start of each loop."},{"type":"text","text":" "},{"type":"text","text":"Rather than moving the player immediately,"},{"type":"text","text":" "},{"type":"text","text":"the loop uses a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement to consider the result of the move"},{"type":"text","text":" "},{"type":"text","text":"and to determine whether the move is allowed:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the dice roll will move the player onto the final square,"},{"type":"text","text":" "},{"type":"text","text":"the game is over."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"break gameLoop"},{"type":"text","text":" statement transfers control to"},{"type":"text","text":" "},{"type":"text","text":"the first line of code outside of the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop, which ends the game."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the dice roll will move the player "},{"type":"emphasis","inlineContent":[{"type":"text","text":"beyond"}]},{"type":"text","text":" the final square,"},{"type":"text","text":" "},{"type":"text","text":"the move is invalid and the player needs to roll again."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"continue gameLoop"},{"type":"text","text":" statement ends the current "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop iteration"},{"type":"text","text":" "},{"type":"text","text":"and begins the next iteration of the loop."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In all other cases, the dice roll is a valid move."},{"type":"text","text":" "},{"type":"text","text":"The player moves forward by "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" squares,"},{"type":"text","text":" "},{"type":"text","text":"and the game logic checks for any snakes and ladders."},{"type":"text","text":" "},{"type":"text","text":"The loop then ends, and control returns to the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" condition"},{"type":"text","text":" "},{"type":"text","text":"to decide whether another turn is required."}]}]}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement above didn’t use the "},{"type":"codeVoice","code":"gameLoop"},{"type":"text","text":" label,"},{"type":"text","text":" "},{"type":"text","text":"it would break out of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement, not the "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Using the "},{"type":"codeVoice","code":"gameLoop"},{"type":"text","text":" label makes it clear which control statement should be terminated.It isn’t strictly necessary to use the "},{"type":"codeVoice","code":"gameLoop"},{"type":"text","text":" label"},{"type":"text","text":" "},{"type":"text","text":"when calling "},{"type":"codeVoice","code":"continue gameLoop"},{"type":"text","text":" to jump to the next iteration of the loop."},{"type":"text","text":" "},{"type":"text","text":"there’s only one loop in the game,"},{"type":"text","text":" "},{"type":"text","text":"and therefore no ambiguity as to which loop the "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement will affect."},{"type":"text","text":" "},{"type":"text","text":"However, there’s no harm in using the "},{"type":"codeVoice","code":"gameLoop"},{"type":"text","text":" label with the "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Doing so is consistent with the label’s use alongside the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"and helps make the game’s logic clearer to read and understand."}]}],"type":"aside","name":"Note"},{"anchor":"Early-Exit","level":2,"type":"heading","text":"Early Exit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement, like an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"executes statements depending on the Boolean value of an expression."},{"type":"text","text":" "},{"type":"text","text":"You use a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement to require that a condition must be true"},{"type":"text","text":" "},{"type":"text","text":"in order for the code after the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement to be executed."},{"type":"text","text":" "},{"type":"text","text":"Unlike an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement always has an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause —"},{"type":"text","text":" "},{"type":"text","text":"the code inside the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause is executed if the condition isn’t true."}]},{"type":"codeListing","syntax":"swift","code":["func greet(person: [String: String]) {","    guard let name = person[\"name\"] else {","        return","    }","","    print(\"Hello \\(name)!\")","","    guard let location = person[\"location\"] else {","        print(\"I hope the weather is nice near you.\")","        return","    }","","    print(\"I hope the weather is nice in \\(location).\")","}","","greet(person: [\"name\": \"John\"])","\/\/ Prints \"Hello John!\"","\/\/ Prints \"I hope the weather is nice near you.\"","greet(person: [\"name\": \"Jane\", \"location\": \"Cupertino\"])","\/\/ Prints \"Hello Jane!\"","\/\/ Prints \"I hope the weather is nice in Cupertino.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement’s condition is met,"},{"type":"text","text":" "},{"type":"text","text":"code execution continues after the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement’s closing brace."},{"type":"text","text":" "},{"type":"text","text":"Any variables or constants that were assigned values"},{"type":"text","text":" "},{"type":"text","text":"using an optional binding as part of the condition"},{"type":"text","text":" "},{"type":"text","text":"are available for the rest of the code block"},{"type":"text","text":" "},{"type":"text","text":"that the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement appears in."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If that condition isn’t met,"},{"type":"text","text":" "},{"type":"text","text":"the code inside the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" branch is executed."},{"type":"text","text":" "},{"type":"text","text":"That branch must transfer control to exit the code block"},{"type":"text","text":" "},{"type":"text","text":"in which the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement appears."},{"type":"text","text":" "},{"type":"text","text":"It can do this with a control transfer statement"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"return"},{"type":"text","text":", "},{"type":"codeVoice","code":"break"},{"type":"text","text":", "},{"type":"codeVoice","code":"continue"},{"type":"text","text":", or "},{"type":"codeVoice","code":"throw"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or it can call a function or method"},{"type":"text","text":" "},{"type":"text","text":"that doesn’t return, such as "},{"type":"codeVoice","code":"fatalError(_:file:line:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement for requirements"},{"type":"text","text":" "},{"type":"text","text":"improves the readability of your code,"},{"type":"text","text":" "},{"type":"text","text":"compared to doing the same check with an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"It lets you write the code that’s typically executed"},{"type":"text","text":" "},{"type":"text","text":"without wrapping it in an "},{"type":"codeVoice","code":"else"},{"type":"text","text":" block,"},{"type":"text","text":" "},{"type":"text","text":"and it lets you keep the code that handles a violated requirement"},{"type":"text","text":" "},{"type":"text","text":"next to the requirement."}]},{"anchor":"Checking-API-Availability","level":2,"type":"heading","text":"Checking API Availability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift has built-in support for checking API availability,"},{"type":"text","text":" "},{"type":"text","text":"which ensures that you don’t accidentally use APIs that are unavailable"},{"type":"text","text":" "},{"type":"text","text":"on a given deployment target."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler uses availability information in the SDK"},{"type":"text","text":" "},{"type":"text","text":"to verify that all of the APIs used in your code"},{"type":"text","text":" "},{"type":"text","text":"are available on the deployment target specified by your project."},{"type":"text","text":" "},{"type":"text","text":"Swift reports an error at compile time"},{"type":"text","text":" "},{"type":"text","text":"if you try to use an API that isn’t available."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"availability condition"}]},{"type":"text","text":" in an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" or "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to conditionally execute a block of code,"},{"type":"text","text":" "},{"type":"text","text":"depending on whether the APIs you want to use are available at runtime."},{"type":"text","text":" "},{"type":"text","text":"The compiler uses the information from the availability condition"},{"type":"text","text":" "},{"type":"text","text":"when it verifies that the APIs in that block of code are available."}]},{"type":"codeListing","syntax":"swift","code":["if #available(iOS 10, macOS 10.12, *) {","    \/\/ Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS","} else {","    \/\/ Fall back to earlier iOS and macOS APIs","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The availability condition above specifies that in iOS,"},{"type":"text","text":" "},{"type":"text","text":"the body of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement executes only in iOS 10 and later;"},{"type":"text","text":" "},{"type":"text","text":"in macOS, only in macOS 10.12 and later."},{"type":"text","text":" "},{"type":"text","text":"The last argument, "},{"type":"codeVoice","code":"*"},{"type":"text","text":", is required and specifies that on any other platform,"},{"type":"text","text":" "},{"type":"text","text":"the body of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" executes on the minimum deployment target specified by your target."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In its general form,"},{"type":"text","text":" "},{"type":"text","text":"the availability condition takes a list of platform names and versions."},{"type":"text","text":" "},{"type":"text","text":"You use platform names such as "},{"type":"codeVoice","code":"iOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"macOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"watchOS"},{"type":"text","text":", and "},{"type":"codeVoice","code":"tvOS"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"for the full list, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In addition to specifying major version numbers like iOS 8 or macOS 10.10,"},{"type":"text","text":" "},{"type":"text","text":"you can specify minor versions numbers like iOS 11.2.6 and macOS 10.13.3."}]},{"type":"codeListing","syntax":"markdown","code":["if #available(<#platform name#> <#version#>, <#...#>, *) {","    <#statements to execute if the APIs are available#>","} else {","    <#fallback statements to execute if the APIs are unavailable#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you use an availability condition with a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"it refines the availability information that’s used"},{"type":"text","text":" "},{"type":"text","text":"for the rest of the code in that code block."}]},{"type":"codeListing","syntax":"swift","code":["@available(macOS 10.12, *)","struct ColorPreference {","    var bestColor = \"blue\"","}","","func chooseBestColor() -> String {","   guard #available(macOS 10.12, *) else {","       return \"gray\"","   }","   let colors = ColorPreference()","   return colors.bestColor","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"ColorPreference"},{"type":"text","text":" structure requires macOS 10.12 or later."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"chooseBestColor()"},{"type":"text","text":" function begins with an availability guard."},{"type":"text","text":" "},{"type":"text","text":"If the platform version is too old to use "},{"type":"codeVoice","code":"ColorPreference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it falls back to behavior that’s always available."},{"type":"text","text":" "},{"type":"text","text":"After the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"you can use APIs that require macOS 10.12 or later."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to "},{"type":"codeVoice","code":"#available"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift also supports the opposite check using an unavailability condition."},{"type":"text","text":" "},{"type":"text","text":"For example, the following two checks do the same thing:"}]},{"type":"codeListing","syntax":"swift","code":["if #available(iOS 10, *) {","} else {","   \/\/ Fallback code","}","","if #unavailable(iOS 10) {","   \/\/ Fallback code","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"#unavailable"},{"type":"text","text":" form helps make your code more readable"},{"type":"text","text":" "},{"type":"text","text":"when the check contains only fallback code."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/controlflow"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Control Flow","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Propagating-Errors-Using-Throwing-Functions":{"abstract":[],"title":"Propagating Errors Using Throwing Functions","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions","url":"\/documentation\/the-swift-programming-language\/errorhandling#Propagating-Errors-Using-Throwing-Functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"coordinateGraphSimple":{"alt":null,"type":"image","identifier":"coordinateGraphSimple","variants":[{"url":"\/images\/coordinateGraphSimple@2x.png","traits":["2x","light"]},{"url":"\/images\/coordinateGraphSimple~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"https://developer.apple.com/documentation/swift/sequence":{"title":"Sequence","titleInlineContent":[{"type":"text","text":"Sequence"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"coordinateGraphComplex":{"alt":null,"type":"image","identifier":"coordinateGraphComplex","variants":[{"url":"\/images\/coordinateGraphComplex@2x.png","traits":["2x","light"]},{"url":"\/images\/coordinateGraphComplex~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Fallthrough":{"abstract":[],"title":"Fallthrough","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Fallthrough","url":"\/documentation\/the-swift-programming-language\/controlflow#Fallthrough"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"snakesAndLadders":{"alt":null,"type":"image","identifier":"snakesAndLadders","variants":[{"url":"\/images\/snakesAndLadders@2x.png","traits":["2x","light"]},{"url":"\/images\/snakesAndLadders~dark@2x.png","traits":["2x","dark"]}]},"coordinateGraphMedium":{"alt":null,"type":"image","identifier":"coordinateGraphMedium","variants":[{"url":"\/images\/coordinateGraphMedium@2x.png","traits":["2x","light"]},{"url":"\/images\/coordinateGraphMedium~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"abstract":[],"title":"Declaration Attributes","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"}}}