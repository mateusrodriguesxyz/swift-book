{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored and computed properties are usually associated with instances of a particular type."},{"type":"text","text":" "},{"type":"text","text":"However, properties can also be associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Such properties are known as type properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition, you can define property observers to monitor changes in a property’s value,"},{"type":"text","text":" "},{"type":"text","text":"which you can respond to with custom actions."},{"type":"text","text":" "},{"type":"text","text":"Property observers can be added to stored properties you define yourself,"},{"type":"text","text":" "},{"type":"text","text":"and also to properties that a subclass inherits from its superclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use a property wrapper"},{"type":"text","text":" "},{"type":"text","text":"to reuse code in the getter and setter of multiple properties."}]},{"anchor":"Stored-Properties","level":2,"type":"heading","text":"Stored Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In its simplest form, a stored property is a constant or variable"},{"type":"text","text":" "},{"type":"text","text":"that’s stored as part of an instance of a particular class or structure."},{"type":"text","text":" "},{"type":"text","text":"Stored properties can be either"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"variable stored properties"}]},{"type":"text","text":" (introduced by the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" keyword)"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constant stored properties"}]},{"type":"text","text":" (introduced by the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide a default value for a stored property as part of its definition,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Property-Values"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can also set and modify the initial value for a stored property during initialization."},{"type":"text","text":" "},{"type":"text","text":"This is true even for constant stored properties,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"text","text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"FixedLengthRange"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which describes a range of integers"},{"type":"text","text":" "},{"type":"text","text":"whose range length can’t be changed after it’s created:"}]},{"type":"codeListing","syntax":"swift","code":["struct FixedLengthRange {","   var firstValue: Int","   let length: Int","}","var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)","\/\/ the range represents integer values 0, 1, and 2","rangeOfThreeItems.firstValue = 6","\/\/ the range now represents integer values 6, 7, and 8"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instances of "},{"type":"codeVoice","code":"FixedLengthRange"},{"type":"text","text":" have"},{"type":"text","text":" "},{"type":"text","text":"a variable stored property called "},{"type":"codeVoice","code":"firstValue"},{"type":"text","text":" "},{"type":"text","text":"and a constant stored property called "},{"type":"codeVoice","code":"length"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In the example above, "},{"type":"codeVoice","code":"length"},{"type":"text","text":" is initialized when the new range is created"},{"type":"text","text":" "},{"type":"text","text":"and can’t be changed thereafter, because it’s a constant property."}]},{"anchor":"Stored-Properties-of-Constant-Structure-Instances","level":3,"type":"heading","text":"Stored Properties of Constant Structure Instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an instance of a structure"},{"type":"text","text":" "},{"type":"text","text":"and assign that instance to a constant,"},{"type":"text","text":" "},{"type":"text","text":"you can’t modify the instance’s properties,"},{"type":"text","text":" "},{"type":"text","text":"even if they were declared as variable properties:"}]},{"type":"codeListing","syntax":"swift","code":["let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)","\/\/ this range represents integer values 0, 1, 2, and 3","rangeOfFourItems.firstValue = 6","\/\/ this will report an error, even though firstValue is a variable property"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"rangeOfFourItems"},{"type":"text","text":" is declared as a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword),"},{"type":"text","text":" "},{"type":"text","text":"it isn’t possible to change its "},{"type":"codeVoice","code":"firstValue"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"even though "},{"type":"codeVoice","code":"firstValue"},{"type":"text","text":" is a variable property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This behavior is due to structures being "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value types"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When an instance of a value type is marked as a constant,"},{"type":"text","text":" "},{"type":"text","text":"so are all of its properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same isn’t true for classes, which are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference types"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If you assign an instance of a reference type to a constant,"},{"type":"text","text":" "},{"type":"text","text":"you can still change that instance’s variable properties."}]},{"anchor":"Lazy-Stored-Properties","level":3,"type":"heading","text":"Lazy Stored Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lazy stored property"}]},{"type":"text","text":" is a property whose initial value isn’t calculated"},{"type":"text","text":" "},{"type":"text","text":"until the first time it’s used."},{"type":"text","text":" "},{"type":"text","text":"You indicate a lazy stored property by writing"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier before its declaration."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You must always declare a lazy property as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" keyword),"},{"type":"text","text":" "},{"type":"text","text":"because its initial value might not be retrieved until"},{"type":"text","text":" "},{"type":"text","text":"after instance initialization completes."},{"type":"text","text":" "},{"type":"text","text":"Constant properties must always have a value "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" initialization completes,"},{"type":"text","text":" "},{"type":"text","text":"and therefore can’t be declared as lazy."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lazy properties are useful when the initial value for a property"},{"type":"text","text":" "},{"type":"text","text":"is dependent on outside factors whose values aren’t known"},{"type":"text","text":" "},{"type":"text","text":"until after an instance’s initialization is complete."},{"type":"text","text":" "},{"type":"text","text":"Lazy properties are also useful when the initial value for a property requires"},{"type":"text","text":" "},{"type":"text","text":"complex or computationally expensive setup that shouldn’t be performed"},{"type":"text","text":" "},{"type":"text","text":"unless or until it’s needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below uses a lazy stored property to avoid"},{"type":"text","text":" "},{"type":"text","text":"unnecessary initialization of a complex class."},{"type":"text","text":" "},{"type":"text","text":"This example defines two classes called "},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" and "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"neither of which is shown in full:"}]},{"type":"codeListing","syntax":"swift","code":["class DataImporter {","   \/*","   DataImporter is a class to import data from an external file.","   The class is assumed to take a nontrivial amount of time to initialize.","   *\/","   var filename = \"data.txt\"","   \/\/ the DataImporter class would provide data importing functionality here","}","","class DataManager {","   lazy var importer = DataImporter()","   var data: [String] = []","   \/\/ the DataManager class would provide data management functionality here","}","","let manager = DataManager()","manager.data.append(\"Some data\")","manager.data.append(\"Some more data\")","\/\/ the DataImporter instance for the importer property hasn't yet been created"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" class has a stored property called "},{"type":"codeVoice","code":"data"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is initialized with a new, empty array of "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Although the rest of its functionality isn’t shown,"},{"type":"text","text":" "},{"type":"text","text":"the purpose of this "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" class is to manage and provide access to"},{"type":"text","text":" "},{"type":"text","text":"this array of "},{"type":"codeVoice","code":"String"},{"type":"text","text":" data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Part of the functionality of the "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" class"},{"type":"text","text":" "},{"type":"text","text":"is the ability to import data from a file."},{"type":"text","text":" "},{"type":"text","text":"This functionality is provided by the "},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" class,"},{"type":"text","text":" "},{"type":"text","text":"which is assumed to take a nontrivial amount of time to initialize."},{"type":"text","text":" "},{"type":"text","text":"This might be because a "},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance needs to open a file"},{"type":"text","text":" "},{"type":"text","text":"and read its contents into memory when the "},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance is initialized."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it’s possible for a "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" instance to manage its data"},{"type":"text","text":" "},{"type":"text","text":"without ever importing data from a file,"},{"type":"text","text":" "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" doesn’t create a new "},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"when the "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" itself is created."},{"type":"text","text":" "},{"type":"text","text":"Instead, it makes more sense to create the "},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"if and when it’s first used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it’s marked with the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance for the "},{"type":"codeVoice","code":"importer"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"is only created when the "},{"type":"codeVoice","code":"importer"},{"type":"text","text":" property is first accessed,"},{"type":"text","text":" "},{"type":"text","text":"such as when its "},{"type":"codeVoice","code":"filename"},{"type":"text","text":" property is queried:"}]},{"type":"codeListing","syntax":"swift","code":["print(manager.importer.filename)","\/\/ the DataImporter instance for the importer property has now been created","\/\/ Prints \"data.txt\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If a property marked with the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"is accessed by multiple threads simultaneously"},{"type":"text","text":" "},{"type":"text","text":"and the property hasn’t yet been initialized,"},{"type":"text","text":" "},{"type":"text","text":"there’s no guarantee that the property will be initialized only once."}]}],"type":"aside","name":"Note"},{"anchor":"Stored-Properties-and-Instance-Variables","level":3,"type":"heading","text":"Stored Properties and Instance Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have experience with Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"you may know that it provides "},{"type":"emphasis","inlineContent":[{"type":"text","text":"two"}]},{"type":"text","text":" ways"},{"type":"text","text":" "},{"type":"text","text":"to store values and references as part of a class instance."},{"type":"text","text":" "},{"type":"text","text":"In addition to properties,"},{"type":"text","text":" "},{"type":"text","text":"you can use instance variables as a backing store for the values stored in a property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift unifies these concepts into a single property declaration."},{"type":"text","text":" "},{"type":"text","text":"A Swift property doesn’t have a corresponding instance variable,"},{"type":"text","text":" "},{"type":"text","text":"and the backing store for a property isn’t accessed directly."},{"type":"text","text":" "},{"type":"text","text":"This approach avoids confusion about how the value is accessed in different contexts"},{"type":"text","text":" "},{"type":"text","text":"and simplifies the property’s declaration into a single, definitive statement."},{"type":"text","text":" "},{"type":"text","text":"All information about the property —"},{"type":"text","text":" "},{"type":"text","text":"including its name, type, and memory management characteristics —"},{"type":"text","text":" "},{"type":"text","text":"is defined in a single location as part of the type’s definition."}]},{"anchor":"Computed-Properties","level":2,"type":"heading","text":"Computed Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to stored properties,"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"computed properties"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which don’t actually store a value."},{"type":"text","text":" "},{"type":"text","text":"Instead, they provide a getter and an optional setter"},{"type":"text","text":" "},{"type":"text","text":"to retrieve and set other properties and values indirectly."}]},{"type":"codeListing","syntax":"swift","code":["struct Point {","   var x = 0.0, y = 0.0","}","struct Size {","   var width = 0.0, height = 0.0","}","struct Rect {","   var origin = Point()","   var size = Size()","   var center: Point {","      get {","         let centerX = origin.x + (size.width \/ 2)","         let centerY = origin.y + (size.height \/ 2)","         return Point(x: centerX, y: centerY)","      }","      set(newCenter) {","         origin.x = newCenter.x - (size.width \/ 2)","         origin.y = newCenter.y - (size.height \/ 2)","      }","   }","}","var square = Rect(origin: Point(x: 0.0, y: 0.0),","   size: Size(width: 10.0, height: 10.0))","let initialSquareCenter = square.center","\/\/ initialSquareCenter is at (5.0, 5.0)","square.center = Point(x: 15.0, y: 15.0)","print(\"square.origin is now at (\\(square.origin.x), \\(square.origin.y))\")","\/\/ Prints \"square.origin is now at (10.0, 10.0)\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines three structures for working with geometric shapes:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Point"},{"type":"text","text":" encapsulates the x- and y-coordinate of a point."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Size"},{"type":"text","text":" encapsulates a "},{"type":"codeVoice","code":"width"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"height"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Rect"},{"type":"text","text":" defines a rectangle by an origin point and a size."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure also provides a computed property called "},{"type":"codeVoice","code":"center"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The current center position of a "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" can always be determined from its "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"size"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so you don’t need to store the center point as an explicit "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"Instead, "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" defines a custom getter and setter for a computed variable called "},{"type":"codeVoice","code":"center"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to enable you to work with the rectangle’s "},{"type":"codeVoice","code":"center"},{"type":"text","text":" as if it were a real stored property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above creates a new "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"square"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"square"},{"type":"text","text":" variable is initialized with an origin point of "},{"type":"codeVoice","code":"(0, 0)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and a width and height of "},{"type":"codeVoice","code":"10"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This square is represented by the light green square in the diagram below."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"square"},{"type":"text","text":" variable’s "},{"type":"codeVoice","code":"center"},{"type":"text","text":" property is then accessed through dot syntax ("},{"type":"codeVoice","code":"square.center"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"which causes the getter for "},{"type":"codeVoice","code":"center"},{"type":"text","text":" to be called,"},{"type":"text","text":" "},{"type":"text","text":"to retrieve the current property value."},{"type":"text","text":" "},{"type":"text","text":"Rather than returning an existing value,"},{"type":"text","text":" "},{"type":"text","text":"the getter actually calculates and returns a new "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" to represent the center of the square."},{"type":"text","text":" "},{"type":"text","text":"As can be seen above, the getter correctly returns a center point of "},{"type":"codeVoice","code":"(5, 5)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"center"},{"type":"text","text":" property is then set to a new value of "},{"type":"codeVoice","code":"(15, 15)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which moves the square up and to the right,"},{"type":"text","text":" "},{"type":"text","text":"to the new position shown by the dark green square in the diagram below."},{"type":"text","text":" "},{"type":"text","text":"Setting the "},{"type":"codeVoice","code":"center"},{"type":"text","text":" property calls the setter for "},{"type":"codeVoice","code":"center"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which modifies the "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" values of the stored "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"and moves the square to its new position."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"computedProperties"}]},{"anchor":"Shorthand-Setter-Declaration","level":3,"type":"heading","text":"Shorthand Setter Declaration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a computed property’s setter doesn’t define a name for the new value to be set,"},{"type":"text","text":" "},{"type":"text","text":"a default name of "},{"type":"codeVoice","code":"newValue"},{"type":"text","text":" is used."},{"type":"text","text":" "},{"type":"text","text":"Here’s an alternative version of the "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure"},{"type":"text","text":" "},{"type":"text","text":"that takes advantage of this shorthand notation:"}]},{"type":"codeListing","syntax":"swift","code":["struct AlternativeRect {","   var origin = Point()","   var size = Size()","   var center: Point {","      get {","         let centerX = origin.x + (size.width \/ 2)","         let centerY = origin.y + (size.height \/ 2)","         return Point(x: centerX, y: centerY)","      }","      set {","         origin.x = newValue.x - (size.width \/ 2)","         origin.y = newValue.y - (size.height \/ 2)","      }","   }","}"]},{"anchor":"Shorthand-Getter-Declaration","level":3,"type":"heading","text":"Shorthand Getter Declaration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the entire body of a getter is a single expression,"},{"type":"text","text":" "},{"type":"text","text":"the getter implicitly returns that expression."},{"type":"text","text":" "},{"type":"text","text":"Here’s an another version of the "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure"},{"type":"text","text":" "},{"type":"text","text":"that takes advantage of this shorthand notation"},{"type":"text","text":" "},{"type":"text","text":"and the shorthand notation for setters:"}]},{"type":"codeListing","syntax":"swift","code":["struct CompactRect {","   var origin = Point()","   var size = Size()","   var center: Point {","      get {","         Point(x: origin.x + (size.width \/ 2),","               y: origin.y + (size.height \/ 2))","      }","      set {","         origin.x = newValue.x - (size.width \/ 2)","         origin.y = newValue.y - (size.height \/ 2)","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Omitting the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" from a getter"},{"type":"text","text":" "},{"type":"text","text":"follows the same rules as omitting "},{"type":"codeVoice","code":"return"},{"type":"text","text":" from a function,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":"."}]},{"anchor":"Read-Only-Computed-Properties","level":3,"type":"heading","text":"Read-Only Computed Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A computed property with a getter but no setter is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"read-only computed property"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A read-only computed property always returns a value,"},{"type":"text","text":" "},{"type":"text","text":"and can be accessed through dot syntax, but can’t be set to a different value."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You must declare computed properties — including read-only computed properties —"},{"type":"text","text":" "},{"type":"text","text":"as variable properties with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" keyword, because their value isn’t fixed."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword is only used for constant properties,"},{"type":"text","text":" "},{"type":"text","text":"to indicate that their values can’t be changed once they’re set"},{"type":"text","text":" "},{"type":"text","text":"as part of instance initialization."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can simplify the declaration of a read-only computed property"},{"type":"text","text":" "},{"type":"text","text":"by removing the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" keyword and its braces:"}]},{"type":"codeListing","syntax":"swift","code":["struct Cuboid {","   var width = 0.0, height = 0.0, depth = 0.0","   var volume: Double {","      return width * height * depth","   }","}","let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)","print(\"the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)\")","\/\/ Prints \"the volume of fourByFiveByTwo is 40.0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines a new structure called "},{"type":"codeVoice","code":"Cuboid"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents a 3D rectangular box with "},{"type":"codeVoice","code":"width"},{"type":"text","text":", "},{"type":"codeVoice","code":"height"},{"type":"text","text":", and "},{"type":"codeVoice","code":"depth"},{"type":"text","text":" properties."},{"type":"text","text":" "},{"type":"text","text":"This structure also has a read-only computed property called "},{"type":"codeVoice","code":"volume"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which calculates and returns the current volume of the cuboid."},{"type":"text","text":" "},{"type":"text","text":"It doesn’t make sense for "},{"type":"codeVoice","code":"volume"},{"type":"text","text":" to be settable,"},{"type":"text","text":" "},{"type":"text","text":"because it would be ambiguous as to which values of "},{"type":"codeVoice","code":"width"},{"type":"text","text":", "},{"type":"codeVoice","code":"height"},{"type":"text","text":", and "},{"type":"codeVoice","code":"depth"},{"type":"text","text":" "},{"type":"text","text":"should be used for a particular "},{"type":"codeVoice","code":"volume"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"Nonetheless, it’s useful for a "},{"type":"codeVoice","code":"Cuboid"},{"type":"text","text":" to provide a read-only computed property"},{"type":"text","text":" "},{"type":"text","text":"to enable external users to discover its current calculated volume."}]},{"anchor":"Property-Observers","level":2,"type":"heading","text":"Property Observers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Property observers observe and respond to changes in a property’s value."},{"type":"text","text":" "},{"type":"text","text":"Property observers are called every time a property’s value is set,"},{"type":"text","text":" "},{"type":"text","text":"even if the new value is the same as the property’s current value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add property observers in the following places:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored properties that you define"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored properties that you inherit"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Computed properties that you inherit"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For an inherited property,"},{"type":"text","text":" "},{"type":"text","text":"you add a property observer by overriding that property in a subclass."},{"type":"text","text":" "},{"type":"text","text":"For a computed property that you define,"},{"type":"text","text":" "},{"type":"text","text":"use the property’s setter to observe and respond to value changes,"},{"type":"text","text":" "},{"type":"text","text":"instead of trying to create an observer."},{"type":"text","text":" "},{"type":"text","text":"Overriding properties is described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You have the option to define either or both of these observers on a property:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"willSet"},{"type":"text","text":" is called just before the value is stored."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"didSet"},{"type":"text","text":" is called immediately after the new value is stored."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you implement a "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" observer,"},{"type":"text","text":" "},{"type":"text","text":"it’s passed the new property value as a constant parameter."},{"type":"text","text":" "},{"type":"text","text":"You can specify a name for this parameter as part of your "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" implementation."},{"type":"text","text":" "},{"type":"text","text":"If you don’t write the parameter name and parentheses within your implementation,"},{"type":"text","text":" "},{"type":"text","text":"the parameter is made available with a default parameter name of "},{"type":"codeVoice","code":"newValue"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, if you implement a "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer,"},{"type":"text","text":" "},{"type":"text","text":"it’s passed a constant parameter containing the old property value."},{"type":"text","text":" "},{"type":"text","text":"You can name the parameter or use the default parameter name of "},{"type":"codeVoice","code":"oldValue"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If you assign a value to a property within its own "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer,"},{"type":"text","text":" "},{"type":"text","text":"the new value that you assign replaces the one that was just set."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers of superclass properties"},{"type":"text","text":" "},{"type":"text","text":"are called when a property is set in a subclass initializer,"},{"type":"text","text":" "},{"type":"text","text":"after the superclass initializer has been called."},{"type":"text","text":" "},{"type":"text","text":"They aren’t called while a class is setting its own properties,"},{"type":"text","text":" "},{"type":"text","text":"before the superclass initializer has been called.For more information about initializer delegation,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" in action."},{"type":"text","text":" "},{"type":"text","text":"The example below defines a new class called "},{"type":"codeVoice","code":"StepCounter"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which tracks the total number of steps that a person takes while walking."},{"type":"text","text":" "},{"type":"text","text":"This class might be used with input data from a pedometer or other step counter"},{"type":"text","text":" "},{"type":"text","text":"to keep track of a person’s exercise during their daily routine."}]},{"type":"codeListing","syntax":"swift","code":["class StepCounter {","   var totalSteps: Int = 0 {","      willSet(newTotalSteps) {","         print(\"About to set totalSteps to \\(newTotalSteps)\")","      }","      didSet {","         if totalSteps > oldValue  {","            print(\"Added \\(totalSteps - oldValue) steps\")","         }","      }","   }","}","let stepCounter = StepCounter()","stepCounter.totalSteps = 200","\/\/ About to set totalSteps to 200","\/\/ Added 200 steps","stepCounter.totalSteps = 360","\/\/ About to set totalSteps to 360","\/\/ Added 160 steps","stepCounter.totalSteps = 896","\/\/ About to set totalSteps to 896","\/\/ Added 536 steps"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"StepCounter"},{"type":"text","text":" class declares a "},{"type":"codeVoice","code":"totalSteps"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is a stored property with "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers for "},{"type":"codeVoice","code":"totalSteps"},{"type":"text","text":" are called"},{"type":"text","text":" "},{"type":"text","text":"whenever the property is assigned a new value."},{"type":"text","text":" "},{"type":"text","text":"This is true even if the new value is the same as the current value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example’s "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" observer uses"},{"type":"text","text":" "},{"type":"text","text":"a custom parameter name of "},{"type":"codeVoice","code":"newTotalSteps"},{"type":"text","text":" for the upcoming new value."},{"type":"text","text":" "},{"type":"text","text":"In this example, it simply prints out the value that’s about to be set."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer is called after the value of "},{"type":"codeVoice","code":"totalSteps"},{"type":"text","text":" is updated."},{"type":"text","text":" "},{"type":"text","text":"It compares the new value of "},{"type":"codeVoice","code":"totalSteps"},{"type":"text","text":" against the old value."},{"type":"text","text":" "},{"type":"text","text":"If the total number of steps has increased,"},{"type":"text","text":" "},{"type":"text","text":"a message is printed to indicate how many new steps have been taken."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer doesn’t provide a custom parameter name for the old value,"},{"type":"text","text":" "},{"type":"text","text":"and the default name of "},{"type":"codeVoice","code":"oldValue"},{"type":"text","text":" is used instead."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you pass a property that has observers"},{"type":"text","text":" "},{"type":"text","text":"to a function as an in-out parameter,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers are always called."},{"type":"text","text":" "},{"type":"text","text":"This is because of the copy-in copy-out memory model for in-out parameters:"},{"type":"text","text":" "},{"type":"text","text":"The value is always written back to the property at the end of the function."},{"type":"text","text":" "},{"type":"text","text":"For a detailed discussion of the behavior of in-out parameters,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Property-Wrappers","level":2,"type":"heading","text":"Property Wrappers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property wrapper adds a layer of separation"},{"type":"text","text":" "},{"type":"text","text":"between code that manages how a property is stored"},{"type":"text","text":" "},{"type":"text","text":"and the code that defines a property."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"if you have properties that"},{"type":"text","text":" "},{"type":"text","text":"provide thread-safety checks"},{"type":"text","text":" "},{"type":"text","text":"or store their underlying data in a database,"},{"type":"text","text":" "},{"type":"text","text":"you have to write that code on every property."},{"type":"text","text":" "},{"type":"text","text":"When you use a property wrapper,"},{"type":"text","text":" "},{"type":"text","text":"you write the management code once when you define the wrapper,"},{"type":"text","text":" "},{"type":"text","text":"and then reuse that management code by applying it to multiple properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To define a property wrapper,"},{"type":"text","text":" "},{"type":"text","text":"you make a structure, enumeration, or class"},{"type":"text","text":" "},{"type":"text","text":"that defines a "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"In the code below,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" structure ensures that"},{"type":"text","text":" "},{"type":"text","text":"the value it wraps always contains a number less than or equal to 12."},{"type":"text","text":" "},{"type":"text","text":"If you ask it to store a larger number, it stores 12 instead."}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct TwelveOrLess {","    private var number = 0","    var wrappedValue: Int {","        get { return number }","        set { number = min(newValue, 12) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The setter ensures that new values are less than or equal to 12,"},{"type":"text","text":" "},{"type":"text","text":"and the getter returns the stored value."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration for "},{"type":"codeVoice","code":"number"},{"type":"text","text":" in the example above"},{"type":"text","text":" "},{"type":"text","text":"marks the variable as "},{"type":"codeVoice","code":"private"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which ensures "},{"type":"codeVoice","code":"number"},{"type":"text","text":" is used only"},{"type":"text","text":" "},{"type":"text","text":"in the implementation of "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Code that’s written anywhere else"},{"type":"text","text":" "},{"type":"text","text":"accesses the value using the getter and setter for "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and can’t use "},{"type":"codeVoice","code":"number"},{"type":"text","text":" directly."},{"type":"text","text":" "},{"type":"text","text":"For information about "},{"type":"codeVoice","code":"private"},{"type":"text","text":", see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You apply a wrapper to a property"},{"type":"text","text":" "},{"type":"text","text":"by writing the wrapper’s name before the property"},{"type":"text","text":" "},{"type":"text","text":"as an attribute."},{"type":"text","text":" "},{"type":"text","text":"Here’s a structure that stores a rectangle"},{"type":"text","text":" "},{"type":"text","text":"that uses the "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" property wrapper"},{"type":"text","text":" "},{"type":"text","text":"to ensure its dimensions are always 12 or less:"}]},{"type":"codeListing","syntax":"swift","code":["struct SmallRectangle {","    @TwelveOrLess var height: Int","    @TwelveOrLess var width: Int","}","","var rectangle = SmallRectangle()","print(rectangle.height)","\/\/ Prints \"0\"","","rectangle.height = 10","print(rectangle.height)","\/\/ Prints \"10\"","","rectangle.height = 24","print(rectangle.height)","\/\/ Prints \"12\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" properties get their initial values"},{"type":"text","text":" "},{"type":"text","text":"from the definition of "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which sets "},{"type":"codeVoice","code":"TwelveOrLess.number"},{"type":"text","text":" to zero."},{"type":"text","text":" "},{"type":"text","text":"The setter in "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" treats 10 as a valid value"},{"type":"text","text":" "},{"type":"text","text":"so storing the number 10 in "},{"type":"codeVoice","code":"rectangle.height"},{"type":"text","text":" proceeds as written."},{"type":"text","text":" "},{"type":"text","text":"However, 24 is larger than "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" allows,"},{"type":"text","text":" "},{"type":"text","text":"so trying to store 24 end up setting "},{"type":"codeVoice","code":"rectangle.height"},{"type":"text","text":" "},{"type":"text","text":"to 12 instead, the largest allowed value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you apply a wrapper to a property,"},{"type":"text","text":" "},{"type":"text","text":"the compiler synthesizes code that provides storage for the wrapper"},{"type":"text","text":" "},{"type":"text","text":"and code that provides access to the property through the wrapper."},{"type":"text","text":" "},{"type":"text","text":"(The property wrapper is responsible for storing the wrapped value,"},{"type":"text","text":" "},{"type":"text","text":"so there’s no synthesized code for that.)"},{"type":"text","text":" "},{"type":"text","text":"You could write code that uses the behavior of a property wrapper,"},{"type":"text","text":" "},{"type":"text","text":"without taking advantage of the special attribute syntax."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s a version of "},{"type":"codeVoice","code":"SmallRectangle"},{"type":"text","text":" "},{"type":"text","text":"from the previous code listing"},{"type":"text","text":" "},{"type":"text","text":"that wraps its properties in the "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" structure explicitly,"},{"type":"text","text":" "},{"type":"text","text":"instead of writing "},{"type":"codeVoice","code":"@TwelveOrLess"},{"type":"text","text":" as an attribute:"}]},{"type":"codeListing","syntax":"swift","code":["struct SmallRectangle {","    private var _height = TwelveOrLess()","    private var _width = TwelveOrLess()","    var height: Int {","        get { return _height.wrappedValue }","        set { _height.wrappedValue = newValue }","    }","    var width: Int {","        get { return _width.wrappedValue }","        set { _width.wrappedValue = newValue }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"_height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"_width"},{"type":"text","text":" properties"},{"type":"text","text":" "},{"type":"text","text":"store an instance of the property wrapper, "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The getter and setter for "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"type":"text","text":"wrap access to the "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" property."}]},{"anchor":"Setting-Initial-Values-for-Wrapped-Properties","level":3,"type":"heading","text":"Setting Initial Values for Wrapped Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code in the examples above"},{"type":"text","text":" "},{"type":"text","text":"sets the initial value for the wrapped property"},{"type":"text","text":" "},{"type":"text","text":"by giving "},{"type":"codeVoice","code":"number"},{"type":"text","text":" an initial value in the definition of "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Code that uses this property wrapper"},{"type":"text","text":" "},{"type":"text","text":"can’t specify a different initial value for a property"},{"type":"text","text":" "},{"type":"text","text":"that’s wrapped by "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"for example,"},{"type":"text","text":" "},{"type":"text","text":"the definition of "},{"type":"codeVoice","code":"SmallRectangle"},{"type":"text","text":" "},{"type":"text","text":"can’t give "},{"type":"codeVoice","code":"height"},{"type":"text","text":" or "},{"type":"codeVoice","code":"width"},{"type":"text","text":" initial values."},{"type":"text","text":" "},{"type":"text","text":"To support setting an initial value or other customization,"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper needs to add an initializer."},{"type":"text","text":" "},{"type":"text","text":"Here’s an expanded version of "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" called "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" "},{"type":"text","text":"that defines initializers that set the wrapped and maximum value:"}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct SmallNumber {","    private var maximum: Int","    private var number: Int","","    var wrappedValue: Int {","        get { return number }","        set { number = min(newValue, maximum) }","    }","","    init() {","        maximum = 12","        number = 0","    }","    init(wrappedValue: Int) {","        maximum = 12","        number = min(wrappedValue, maximum)","    }","    init(wrappedValue: Int, maximum: Int) {","        self.maximum = maximum","        number = min(wrappedValue, maximum)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The definition of "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" includes three initializers —"},{"type":"text","text":" "},{"type":"codeVoice","code":"init()"},{"type":"text","text":", "},{"type":"codeVoice","code":"init(wrappedValue:)"},{"type":"text","text":", and "},{"type":"codeVoice","code":"init(wrappedValue:maximum:)"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"which the examples below use"},{"type":"text","text":" "},{"type":"text","text":"to set the wrapped value and the maximum value."},{"type":"text","text":" "},{"type":"text","text":"For information about initialization and initializer syntax,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you apply a wrapper to a property and you don’t specify an initial value,"},{"type":"text","text":" "},{"type":"text","text":"Swift uses the "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" initializer to set up the wrapper."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct ZeroRectangle {","    @SmallNumber var height: Int","    @SmallNumber var width: Int","}","","var zeroRectangle = ZeroRectangle()","print(zeroRectangle.height, zeroRectangle.width)","\/\/ Prints \"0 0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The instances of "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" that wrap "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"type":"text","text":"are created by calling "},{"type":"codeVoice","code":"SmallNumber()"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The code inside that initializer"},{"type":"text","text":" "},{"type":"text","text":"sets the initial wrapped value and the initial maximum value,"},{"type":"text","text":" "},{"type":"text","text":"using the default values of zero and 12."},{"type":"text","text":" "},{"type":"text","text":"The property wrapper still provides all of the initial values,"},{"type":"text","text":" "},{"type":"text","text":"like the earlier example that used "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" in "},{"type":"codeVoice","code":"SmallRectangle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Unlike that example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" also supports writing those initial values"},{"type":"text","text":" "},{"type":"text","text":"as part of declaring the property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you specify an initial value for the property,"},{"type":"text","text":" "},{"type":"text","text":"Swift uses the "},{"type":"codeVoice","code":"init(wrappedValue:)"},{"type":"text","text":" initializer to set up the wrapper."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct UnitRectangle {","    @SmallNumber var height: Int = 1","    @SmallNumber var width: Int = 1","}","","var unitRectangle = UnitRectangle()","print(unitRectangle.height, unitRectangle.width)","\/\/ Prints \"1 1\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write "},{"type":"codeVoice","code":"= 1"},{"type":"text","text":" on a property with a wrapper,"},{"type":"text","text":" "},{"type":"text","text":"that’s translated into a call to the "},{"type":"codeVoice","code":"init(wrappedValue:)"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"The instances of "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" that wrap "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"type":"text","text":"are created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 1)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The initializer uses the wrapped value that’s specified here,"},{"type":"text","text":" "},{"type":"text","text":"and it uses the default maximum value of 12."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write arguments in parentheses after the custom attribute,"},{"type":"text","text":" "},{"type":"text","text":"Swift uses the initializer that accepts those arguments to set up the wrapper."},{"type":"text","text":" "},{"type":"text","text":"For example, if you provide an initial value and a maximum value,"},{"type":"text","text":" "},{"type":"text","text":"Swift uses the "},{"type":"codeVoice","code":"init(wrappedValue:maximum:)"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"swift","code":["struct NarrowRectangle {","    @SmallNumber(wrappedValue: 2, maximum: 5) var height: Int","    @SmallNumber(wrappedValue: 3, maximum: 4) var width: Int","}","","var narrowRectangle = NarrowRectangle()","print(narrowRectangle.height, narrowRectangle.width)","\/\/ Prints \"2 3\"","","narrowRectangle.height = 100","narrowRectangle.width = 100","print(narrowRectangle.height, narrowRectangle.width)","\/\/ Prints \"5 4\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The instance of "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" that wraps "},{"type":"codeVoice","code":"height"},{"type":"text","text":" "},{"type":"text","text":"is created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 2, maximum: 5)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the instance that wraps "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"type":"text","text":"is created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 3, maximum: 4)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By including arguments to the property wrapper,"},{"type":"text","text":" "},{"type":"text","text":"you can set up the initial state in the wrapper"},{"type":"text","text":" "},{"type":"text","text":"or pass other options to the wrapper when it’s created."},{"type":"text","text":" "},{"type":"text","text":"This syntax is the most general way to use a property wrapper."},{"type":"text","text":" "},{"type":"text","text":"You can provide whatever arguments you need to the attribute,"},{"type":"text","text":" "},{"type":"text","text":"and they’re passed to the initializer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you include property wrapper arguments,"},{"type":"text","text":" "},{"type":"text","text":"you can also specify an initial value using assignment."},{"type":"text","text":" "},{"type":"text","text":"Swift treats the assignment like a "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" argument"},{"type":"text","text":" "},{"type":"text","text":"and uses the initializer that accepts the arguments you include."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct MixedRectangle {","    @SmallNumber var height: Int = 1","    @SmallNumber(maximum: 9) var width: Int = 2","}","","var mixedRectangle = MixedRectangle()","print(mixedRectangle.height)","\/\/ Prints \"1\"","","mixedRectangle.height = 20","print(mixedRectangle.height)","\/\/ Prints \"12\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The instance of "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" that wraps "},{"type":"codeVoice","code":"height"},{"type":"text","text":" "},{"type":"text","text":"is created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 1)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which uses the default maximum value of 12."},{"type":"text","text":" "},{"type":"text","text":"The instance that wraps "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"type":"text","text":"is created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 2, maximum: 9)"},{"type":"text","text":"."}]},{"anchor":"Projecting-a-Value-From-a-Property-Wrapper","level":3,"type":"heading","text":"Projecting a Value From a Property Wrapper"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the wrapped value,"},{"type":"text","text":" "},{"type":"text","text":"a property wrapper can expose additional functionality"},{"type":"text","text":" "},{"type":"text","text":"by defining a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"projected value"}]},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"for example, a property wrapper that manages access to a database"},{"type":"text","text":" "},{"type":"text","text":"can expose a "},{"type":"codeVoice","code":"flushDatabaseConnection()"},{"type":"text","text":" method on its projected value."},{"type":"text","text":" "},{"type":"text","text":"The name of the projected value is the same as the wrapped value,"},{"type":"text","text":" "},{"type":"text","text":"except it begins with a dollar sign ("},{"type":"codeVoice","code":"$"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Because your code can’t define properties that start with "},{"type":"codeVoice","code":"$"},{"type":"text","text":" "},{"type":"text","text":"the projected value never interferes with properties you define."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" example above,"},{"type":"text","text":" "},{"type":"text","text":"if you try to set the property to a number that’s too large,"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper adjusts the number before storing it."},{"type":"text","text":" "},{"type":"text","text":"The code below adds a "},{"type":"codeVoice","code":"projectedValue"},{"type":"text","text":" property to the "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" structure"},{"type":"text","text":" "},{"type":"text","text":"to keep track of whether the property wrapper"},{"type":"text","text":" "},{"type":"text","text":"adjusted the new value for the property before storing that new value."}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct SmallNumber {","    private var number: Int","    private(set) var projectedValue: Bool","","    var wrappedValue: Int {","        get { return number }","        set {","            if newValue > 12 {","                number = 12","                projectedValue = true","            } else {","                number = newValue","                projectedValue = false","            }","        }","    }","","    init() {","        self.number = 0","        self.projectedValue = false","    }","}","struct SomeStructure {","    @SmallNumber var someNumber: Int","}","var someStructure = SomeStructure()","","someStructure.someNumber = 4","print(someStructure.$someNumber)","\/\/ Prints \"false\"","","someStructure.someNumber = 55","print(someStructure.$someNumber)","\/\/ Prints \"true\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Writing "},{"type":"codeVoice","code":"someStructure.$someNumber"},{"type":"text","text":" accesses the wrapper’s projected value."},{"type":"text","text":" "},{"type":"text","text":"After storing a small number like four,"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"someStructure.$someNumber"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"the projected value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":" "},{"type":"text","text":"after trying to store a number that’s too large, like 55."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property wrapper can return a value of any type as its projected value."},{"type":"text","text":" "},{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper exposes only one piece of information —"},{"type":"text","text":" "},{"type":"text","text":"whether the number was adjusted —"},{"type":"text","text":" "},{"type":"text","text":"so it exposes that Boolean value as its projected value."},{"type":"text","text":" "},{"type":"text","text":"A wrapper that needs to expose more information"},{"type":"text","text":" "},{"type":"text","text":"can return an instance of some other data type,"},{"type":"text","text":" "},{"type":"text","text":"or it can return "},{"type":"codeVoice","code":"self"},{"type":"text","text":" "},{"type":"text","text":"to expose the instance of the wrapper as its projected value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you access a projected value from code that’s part of the type,"},{"type":"text","text":" "},{"type":"text","text":"like a property getter or an instance method,"},{"type":"text","text":" "},{"type":"text","text":"you can omit "},{"type":"codeVoice","code":"self."},{"type":"text","text":" before the property name,"},{"type":"text","text":" "},{"type":"text","text":"just like accessing other properties."},{"type":"text","text":" "},{"type":"text","text":"The code in the following example refers to the projected value"},{"type":"text","text":" "},{"type":"text","text":"of the wrapper around "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" as "},{"type":"codeVoice","code":"$height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"$width"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["enum Size {","    case small, large","}","","struct SizedRectangle {","    @SmallNumber var height: Int","    @SmallNumber var width: Int","","    mutating func resize(to size: Size) -> Bool {","        switch size {","            case .small:","                height = 10","                width = 20","            case .large:","                height = 100","                width = 100","        }","        return $height || $width","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because property wrapper syntax is just syntactic sugar"},{"type":"text","text":" "},{"type":"text","text":"for a property with a getter and a setter,"},{"type":"text","text":" "},{"type":"text","text":"accessing "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"type":"text","text":"behaves the same as accessing any other property."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the code in "},{"type":"codeVoice","code":"resize(to:)"},{"type":"text","text":" accesses "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"type":"text","text":"using their property wrapper."},{"type":"text","text":" "},{"type":"text","text":"If you call "},{"type":"codeVoice","code":"resize(to: .large)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the switch case for "},{"type":"codeVoice","code":".large"},{"type":"text","text":" sets the rectangle’s height and width to 100."},{"type":"text","text":" "},{"type":"text","text":"The wrapper prevents the value of those properties"},{"type":"text","text":" "},{"type":"text","text":"from being larger than 12,"},{"type":"text","text":" "},{"type":"text","text":"and it sets the projected value to "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to record the fact that it adjusted their values."},{"type":"text","text":" "},{"type":"text","text":"At the end of "},{"type":"codeVoice","code":"resize(to:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the return statement checks "},{"type":"codeVoice","code":"$height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"$width"},{"type":"text","text":" "},{"type":"text","text":"to determine whether"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper adjusted either "},{"type":"codeVoice","code":"height"},{"type":"text","text":" or "},{"type":"codeVoice","code":"width"},{"type":"text","text":"."}]},{"anchor":"Global-and-Local-Variables","level":2,"type":"heading","text":"Global and Local Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The capabilities described above for computing and observing properties"},{"type":"text","text":" "},{"type":"text","text":"are also available to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"global variables"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"local variables"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Global variables are variables that are defined outside of any"},{"type":"text","text":" "},{"type":"text","text":"function, method, closure, or type context."},{"type":"text","text":" "},{"type":"text","text":"Local variables are variables that are defined within"},{"type":"text","text":" "},{"type":"text","text":"a function, method, or closure context."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The global and local variables you have encountered in previous chapters"},{"type":"text","text":" "},{"type":"text","text":"have all been "},{"type":"emphasis","inlineContent":[{"type":"text","text":"stored variables"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Stored variables, like stored properties,"},{"type":"text","text":" "},{"type":"text","text":"provide storage for a value of a certain type and allow that value to be set and retrieved."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, you can also define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"computed variables"}]},{"type":"text","text":" "},{"type":"text","text":"and define observers for stored variables,"},{"type":"text","text":" "},{"type":"text","text":"in either a global or local scope."},{"type":"text","text":" "},{"type":"text","text":"Computed variables calculate their value, rather than storing it,"},{"type":"text","text":" "},{"type":"text","text":"and they’re written in the same way as computed properties."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Global constants and variables are always computed lazily,"},{"type":"text","text":" "},{"type":"text","text":"in a similar manner to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Lazy-Stored-Properties"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Unlike lazy stored properties,"},{"type":"text","text":" "},{"type":"text","text":"global constants and variables don’t need to be marked with the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier.Local constants and variables are never computed lazily."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply a property wrapper to a local stored variable,"},{"type":"text","text":" "},{"type":"text","text":"but not to a global variable or a computed variable."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"in the code below, "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" uses "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" as a property wrapper."}]},{"type":"codeListing","syntax":"swift","code":["func someFunction() {","    @SmallNumber var myNumber: Int = 0","","    myNumber = 10","    \/\/ now myNumber is 10","","    myNumber = 24","    \/\/ now myNumber is 12","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like when you apply "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" to a property,"},{"type":"text","text":" "},{"type":"text","text":"setting the value of "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" to 10 is valid."},{"type":"text","text":" "},{"type":"text","text":"Because the property wrapper doesn’t allow values higher than 12,"},{"type":"text","text":" "},{"type":"text","text":"it sets "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" to 12 instead of 24."}]},{"anchor":"Type-Properties","level":2,"type":"heading","text":"Type Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance properties are properties that belong to an instance of a particular type."},{"type":"text","text":" "},{"type":"text","text":"Every time you create a new instance of that type,"},{"type":"text","text":" "},{"type":"text","text":"it has its own set of property values, separate from any other instance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also define properties that belong to the type itself,"},{"type":"text","text":" "},{"type":"text","text":"not to any one instance of that type."},{"type":"text","text":" "},{"type":"text","text":"There will only ever be one copy of these properties,"},{"type":"text","text":" "},{"type":"text","text":"no matter how many instances of that type you create."},{"type":"text","text":" "},{"type":"text","text":"These kinds of properties are called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type properties"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type properties are useful for defining values that are universal to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" instances of a particular type,"},{"type":"text","text":" "},{"type":"text","text":"such as a constant property that all instances can use"},{"type":"text","text":" "},{"type":"text","text":"(like a static constant in C),"},{"type":"text","text":" "},{"type":"text","text":"or a variable property that stores a value that’s global to all instances of that type"},{"type":"text","text":" "},{"type":"text","text":"(like a static variable in C)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored type properties can be variables or constants."},{"type":"text","text":" "},{"type":"text","text":"Computed type properties are always declared as variable properties,"},{"type":"text","text":" "},{"type":"text","text":"in the same way as computed instance properties."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike stored instance properties,"},{"type":"text","text":" "},{"type":"text","text":"you must always give stored type properties a default value."},{"type":"text","text":" "},{"type":"text","text":"This is because the type itself doesn’t have an initializer"},{"type":"text","text":" "},{"type":"text","text":"that can assign a value to a stored type property at initialization time.Stored type properties are lazily initialized on their first access."},{"type":"text","text":" "},{"type":"text","text":"They’re guaranteed to be initialized only once,"},{"type":"text","text":" "},{"type":"text","text":"even when accessed by multiple threads simultaneously,"},{"type":"text","text":" "},{"type":"text","text":"and they don’t need to be marked with the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier."}]}],"type":"aside","name":"Note"},{"anchor":"Type-Property-Syntax","level":3,"type":"heading","text":"Type Property Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In C and Objective-C, you define static constants and variables associated with a type"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"global"}]},{"type":"text","text":" static variables."},{"type":"text","text":" "},{"type":"text","text":"In Swift, however, type properties are written as part of the type’s definition,"},{"type":"text","text":" "},{"type":"text","text":"within the type’s outer curly braces,"},{"type":"text","text":" "},{"type":"text","text":"and each type property is explicitly scoped to the type it supports."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You define type properties with the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"For computed type properties for class types,"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword instead"},{"type":"text","text":" "},{"type":"text","text":"to allow subclasses to override the superclass’s implementation."},{"type":"text","text":" "},{"type":"text","text":"The example below shows the syntax for stored and computed type properties:"}]},{"type":"codeListing","syntax":"swift","code":["struct SomeStructure {","   static var storedTypeProperty = \"Some value.\"","   static var computedTypeProperty: Int {","      return 1","   }","}","enum SomeEnumeration {","   static var storedTypeProperty = \"Some value.\"","   static var computedTypeProperty: Int {","      return 6","   }","}","class SomeClass {","   static var storedTypeProperty = \"Some value.\"","   static var computedTypeProperty: Int {","      return 27","   }","   class var overrideableComputedTypeProperty: Int {","      return 107","   }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The computed type property examples above are for read-only computed type properties,"},{"type":"text","text":" "},{"type":"text","text":"but you can also define read-write computed type properties"},{"type":"text","text":" "},{"type":"text","text":"with the same syntax as for computed instance properties."}]}],"type":"aside","name":"Note"},{"anchor":"Querying-and-Setting-Type-Properties","level":3,"type":"heading","text":"Querying and Setting Type Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type properties are queried and set with dot syntax, just like instance properties."},{"type":"text","text":" "},{"type":"text","text":"However, type properties are queried and set on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":", not on an instance of that type."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["print(SomeStructure.storedTypeProperty)","\/\/ Prints \"Some value.\"","SomeStructure.storedTypeProperty = \"Another value.\"","print(SomeStructure.storedTypeProperty)","\/\/ Prints \"Another value.\"","print(SomeEnumeration.computedTypeProperty)","\/\/ Prints \"6\"","print(SomeClass.computedTypeProperty)","\/\/ Prints \"27\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples that follow use two stored type properties as part of a structure"},{"type":"text","text":" "},{"type":"text","text":"that models an audio level meter for a number of audio channels."},{"type":"text","text":" "},{"type":"text","text":"Each channel has an integer audio level between "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"10"},{"type":"text","text":" inclusive."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below illustrates how two of these audio channels can be combined"},{"type":"text","text":" "},{"type":"text","text":"to model a stereo audio level meter."},{"type":"text","text":" "},{"type":"text","text":"When a channel’s audio level is "},{"type":"codeVoice","code":"0"},{"type":"text","text":", none of the lights for that channel are lit."},{"type":"text","text":" "},{"type":"text","text":"When the audio level is "},{"type":"codeVoice","code":"10"},{"type":"text","text":", all of the lights for that channel are lit."},{"type":"text","text":" "},{"type":"text","text":"In this figure, the left channel has a current level of "},{"type":"codeVoice","code":"9"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the right channel has a current level of "},{"type":"codeVoice","code":"7"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"staticPropertiesVUMeter"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The audio channels described above are represented by"},{"type":"text","text":" "},{"type":"text","text":"instances of the "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" structure:"}]},{"type":"codeListing","syntax":"swift","code":["struct AudioChannel {","   static let thresholdLevel = 10","   static var maxInputLevelForAllChannels = 0","   var currentLevel: Int = 0 {","      didSet {","         if currentLevel > AudioChannel.thresholdLevel {","            \/\/ cap the new audio level to the threshold level","            currentLevel = AudioChannel.thresholdLevel","         }","         if currentLevel > AudioChannel.maxInputLevelForAllChannels {","            \/\/ store this as the new overall maximum input level","            AudioChannel.maxInputLevelForAllChannels = currentLevel","         }","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" structure defines two stored type properties to support its functionality."},{"type":"text","text":" "},{"type":"text","text":"The first, "},{"type":"codeVoice","code":"thresholdLevel"},{"type":"text","text":", defines the maximum threshold value an audio level can take."},{"type":"text","text":" "},{"type":"text","text":"This is a constant value of "},{"type":"codeVoice","code":"10"},{"type":"text","text":" for all "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"If an audio signal comes in with a higher value than "},{"type":"codeVoice","code":"10"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it will be capped to this threshold value (as described below)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second type property is"},{"type":"text","text":" "},{"type":"text","text":"a variable stored property called "},{"type":"codeVoice","code":"maxInputLevelForAllChannels"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This keeps track of the maximum input value that has been received"},{"type":"text","text":" "},{"type":"text","text":"by "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It starts with an initial value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" structure also defines"},{"type":"text","text":" "},{"type":"text","text":"a stored instance property called "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents the channel’s current audio level on a scale of "},{"type":"codeVoice","code":"0"},{"type":"text","text":" to "},{"type":"codeVoice","code":"10"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" property has a "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" property observer"},{"type":"text","text":" "},{"type":"text","text":"to check the value of "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" whenever it’s set."},{"type":"text","text":" "},{"type":"text","text":"This observer performs two checks:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the new value of "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" is greater than the allowed "},{"type":"codeVoice","code":"thresholdLevel"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the property observer caps "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" to "},{"type":"codeVoice","code":"thresholdLevel"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the new value of "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" (after any capping) is higher than"},{"type":"text","text":" "},{"type":"text","text":"any value previously received by "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"the property observer stores the new "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" value in"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"maxInputLevelForAllChannels"},{"type":"text","text":" type property."}]}]}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the first of these two checks,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer sets "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" to a different value."},{"type":"text","text":" "},{"type":"text","text":"This doesn’t, however, cause the observer to be called again."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" structure to create"},{"type":"text","text":" "},{"type":"text","text":"two new audio channels called "},{"type":"codeVoice","code":"leftChannel"},{"type":"text","text":" and "},{"type":"codeVoice","code":"rightChannel"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to represent the audio levels of a stereo sound system:"}]},{"type":"codeListing","syntax":"swift","code":["var leftChannel = AudioChannel()","var rightChannel = AudioChannel()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you set the "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"left"}]},{"type":"text","text":" channel to "},{"type":"codeVoice","code":"7"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can see that the "},{"type":"codeVoice","code":"maxInputLevelForAllChannels"},{"type":"text","text":" type property"},{"type":"text","text":" "},{"type":"text","text":"is updated to equal "},{"type":"codeVoice","code":"7"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["leftChannel.currentLevel = 7","print(leftChannel.currentLevel)","\/\/ Prints \"7\"","print(AudioChannel.maxInputLevelForAllChannels)","\/\/ Prints \"7\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to set the "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"right"}]},{"type":"text","text":" channel to "},{"type":"codeVoice","code":"11"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can see that the right channel’s "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"is capped to the maximum value of "},{"type":"codeVoice","code":"10"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"maxInputLevelForAllChannels"},{"type":"text","text":" type property is updated to equal "},{"type":"codeVoice","code":"10"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["rightChannel.currentLevel = 11","print(rightChannel.currentLevel)","\/\/ Prints \"10\"","print(AudioChannel.maxInputLevelForAllChannels)","\/\/ Prints \"10\""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/properties"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Properties","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Default-Property-Values":{"abstract":[],"title":"Default Property Values","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Property-Values","url":"\/documentation\/the-swift-programming-language\/initialization#Default-Property-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-With-an-Implicit-Return":{"abstract":[],"title":"Functions With an Implicit Return","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return","url":"\/documentation\/the-swift-programming-language\/functions#Functions-With-an-Implicit-Return"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Class-Types":{"abstract":[],"title":"Initializer Delegation for Class Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Class-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Value-Types":{"abstract":[],"title":"Initializer Delegation for Value Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Value-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Lazy-Stored-Properties":{"abstract":[],"title":"Lazy Stored Properties","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Lazy-Stored-Properties","url":"\/documentation\/the-swift-programming-language\/properties#Lazy-Stored-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance#Overriding":{"abstract":[],"title":"Overriding","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding","url":"\/documentation\/the-swift-programming-language\/inheritance#Overriding"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#In-Out-Parameters":{"abstract":[],"title":"In-Out Parameters","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters","url":"\/documentation\/the-swift-programming-language\/declarations#In-Out-Parameters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"computedProperties":{"alt":null,"type":"image","identifier":"computedProperties","variants":[{"url":"\/images\/computedProperties@2x.png","traits":["2x","light"]},{"url":"\/images\/computedProperties~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"staticPropertiesVUMeter":{"alt":null,"type":"image","identifier":"staticPropertiesVUMeter","variants":[{"url":"\/images\/staticPropertiesVUMeter@2x.png","traits":["2x","light"]},{"url":"\/images\/staticPropertiesVUMeter~dark@2x.png","traits":["2x","dark"]}]}}}