{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A flexibilidade adicional de agendamento de código paralelo ou assíncrono"},{"type":"text","text":" "},{"type":"text","text":"também vem com um custo de maior complexidade."},{"type":"text","text":" "},{"type":"text","text":"Swift permite que você expresse sua intenção"},{"type":"text","text":" "},{"type":"text","text":"de uma forma que permite que haja verificação em tempo de compilação —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, você pode usar "},{"type":"emphasis","inlineContent":[{"type":"text","text":"actors"}]},{"type":"text","text":" para acessar com segurança um estado mutável."},{"type":"text","text":" "},{"type":"text","text":"No entanto, adicionar concorrência a um código lento ou com bugs"},{"type":"text","text":" "},{"type":"text","text":"não é uma garantia de que se tornará rápido ou correto."},{"type":"text","text":" "},{"type":"text","text":"Na verdade, adicionar concorrência pode até tornar seu código mais difícil de depurar."},{"type":"text","text":" "},{"type":"text","text":"No entanto, usar o suporte da linguagem para concorrência"},{"type":"text","text":" "},{"type":"text","text":"em um código que precisa ser concorrente"},{"type":"text","text":" "},{"type":"text","text":"permite que o Swift te ajude a detectar problemas em tempo de compilação."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O resto desse capitulo usa o termo "},{"type":"emphasis","inlineContent":[{"type":"text","text":"concorrência"}]},{"type":"text","text":" "},{"type":"text","text":"para se referir a essa combinação frequente de código assícnrono e paralelo."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Se você já escreveu código concorrente antes,"},{"type":"text","text":" "},{"type":"text","text":"você pode ter o costume de trabalhar com threads."},{"type":"text","text":" "},{"type":"text","text":"O modelo de concorrência em Swift é construído em cima de threads,"},{"type":"text","text":" "},{"type":"text","text":"mas você não interage diretamente com elas."},{"type":"text","text":" "},{"type":"text","text":"Uma função assíncrona em Swift"},{"type":"text","text":" "},{"type":"text","text":"pode desistir da thread em que está sendo executada,"},{"type":"text","text":" "},{"type":"text","text":"o que permite que outra função assíncrona seja executada nessa thread"},{"type":"text","text":" "},{"type":"text","text":"enquanto a primeira função está bloqueada."},{"type":"text","text":" "},{"type":"text","text":"Quando uma função assíncrona é retomada,"},{"type":"text","text":" "},{"type":"text","text":"Swift não garante qual thread"},{"type":"text","text":" "},{"type":"text","text":"essa função será executada."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Embora seja possível escrever código concorrente"},{"type":"text","text":" "},{"type":"text","text":"sem usar o suporte nativo do Swift,"},{"type":"text","text":" "},{"type":"text","text":"o código tende a ser mais difícil de ler."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o código a seguir baixa uma lista de nomes de fotos,"},{"type":"text","text":" "},{"type":"text","text":"baixa a primeira foto dessa lista,"},{"type":"text","text":" "},{"type":"text","text":"e mostra essa foto para o usuário:"}]},{"type":"codeListing","syntax":"swift","code":["listPhotos(inGallery: \"Summer Vacation\") { photoNames in","    let sortedNames = photoNames.sorted()","    let name = sortedNames[0]","    downloadPhoto(named: name) { photo in","        show(photo)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mesmo neste caso simples,"},{"type":"text","text":" "},{"type":"text","text":"porque o código deve ser escrito como uma série de "},{"type":"emphasis","inlineContent":[{"type":"text","text":"completion handlers"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"você acaba escrevendo "},{"type":"emphasis","inlineContent":[{"type":"text","text":"closures"}]},{"type":"text","text":" aninhadas."},{"type":"text","text":" "},{"type":"text","text":"Neste estilo,"},{"type":"text","text":" "},{"type":"text","text":"código mais complexo com muitas closures aninhadas pode rapidamente se tornar inviável, ou difícil de manter."}]},{"anchor":"Definindo-e-Chamando-Funções-Assíncronas","level":2,"type":"heading","text":"Definindo e Chamando Funções Assíncronas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"função assíncrona"}]},{"type":"text","text":" ou "},{"type":"emphasis","inlineContent":[{"type":"text","text":"método assíncrono"}]},{"type":"text","text":" "},{"type":"text","text":"é um tipo especial de função ou método"},{"type":"text","text":" "},{"type":"text","text":"que pode ser suspenso enquanto está no meio da execução."},{"type":"text","text":" "},{"type":"text","text":"Isso está em contraste com funções e métodos síncronos comuns,"},{"type":"text","text":" "},{"type":"text","text":"que são executados até a conclusão, geram um erro ou nunca retornam."},{"type":"text","text":" "},{"type":"text","text":"Uma função ou método assíncrono ainda faz uma dessas três coisas,"},{"type":"text","text":" "},{"type":"text","text":"mas também pode pausar no meio quando está esperando por algo."},{"type":"text","text":" "},{"type":"text","text":"Dentro do corpo de uma função ou método assíncrono,"},{"type":"text","text":" "},{"type":"text","text":"você marca cada um desses lugares onde a execução pode ser suspensa."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para indicar que uma função ou método é assíncrono,"},{"type":"text","text":" "},{"type":"text","text":"você escreve a palavra-chave "},{"type":"codeVoice","code":"async"},{"type":"text","text":" em sua declaração após seus parâmetros,"},{"type":"text","text":" "},{"type":"text","text":"semelhante a como você usa "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" para marcar uma função que pode lançar um erro."},{"type":"text","text":" "},{"type":"text","text":"Se a função ou método retornar um valor,"},{"type":"text","text":" "},{"type":"text","text":"você escreve "},{"type":"codeVoice","code":"async"},{"type":"text","text":" antes da seta de retorno ("},{"type":"codeVoice","code":"->"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo,"},{"type":"text","text":" "},{"type":"text","text":"veja como você pode buscar os nomes das fotos em uma galeria:"}]},{"type":"codeListing","syntax":"swift","code":["func listPhotos(inGallery name: String) async -> [String] {","    let result = \/\/ ... código de requisição web assíncrono ...","    return result","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para uma função ou método que é assíncrono e também pode lançar erros,"},{"type":"text","text":" "},{"type":"text","text":"você deve escrever "},{"type":"codeVoice","code":"async"},{"type":"text","text":" antes de "},{"type":"codeVoice","code":"throws"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ao chamar um método assíncrono,"},{"type":"text","text":" "},{"type":"text","text":"a execução é suspensa até que o método retorne."},{"type":"text","text":" "},{"type":"text","text":"Você escreve "},{"type":"codeVoice","code":"await"},{"type":"text","text":" na frente da chamada"},{"type":"text","text":" "},{"type":"text","text":"para marcar o possível ponto de suspensão."},{"type":"text","text":" "},{"type":"text","text":"Isso é como escrever "},{"type":"codeVoice","code":"try"},{"type":"text","text":" ao chamar uma função que lança um erro,"},{"type":"text","text":" "},{"type":"text","text":"para marcar a possível mudança no fluxo do programa se houver um erro."},{"type":"text","text":" "},{"type":"text","text":"Dentro de um método assíncrono,"},{"type":"text","text":" "},{"type":"text","text":"o fluxo de execução é suspenso "},{"type":"emphasis","inlineContent":[{"type":"text","text":"somente"}]},{"type":"text","text":" quando você chama outro método assíncrono —"},{"type":"text","text":" "},{"type":"text","text":"a suspensão nunca é implícita ou preventiva —"},{"type":"text","text":" "},{"type":"text","text":"o que significa que todos os pontos de suspensão possíveis são marcados com "},{"type":"codeVoice","code":"await"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Por exemplo,"},{"type":"text","text":" "},{"type":"text","text":"O código abaixo busca os nomes de todas as imagens que estão na galeria"},{"type":"text","text":" "},{"type":"text","text":"e após isso mostra a primeira imagem:"}]},{"type":"codeListing","syntax":"swift","code":["let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","let sortedNames = photoNames.sorted()","let name = sortedNames[0]","let photo = await downloadPhoto(named: name)","show(photo)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Porque as funções "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" e "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" "},{"type":"text","text":"ambas precisam fazer requisicoes web,"},{"type":"text","text":" "},{"type":"text","text":"elas podem levar um tempo significativo para serem finalizadas."},{"type":"text","text":" "},{"type":"text","text":"Tornando ambas funções assíncronas escrevendo "},{"type":"codeVoice","code":"async"},{"type":"text","text":" antes da seta de retorno"},{"type":"text","text":" "},{"type":"text","text":"permite que o resto do código do App continue executando"},{"type":"text","text":" "},{"type":"text","text":"enquanto esse código assíncrono espera até que a imagem esteja pronta."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para entender a natureza concorrente do exemplo acima, aqui está uma possível ordem de execução:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O código começa a ser executado a partir da primeira linha"},{"type":"text","text":" "},{"type":"text","text":"e vai até o primeiro "},{"type":"codeVoice","code":"await"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Ele chama a função "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" "},{"type":"text","text":"e suspende a execução enquanto aguarda o retorno dessa função."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enquanto a execução deste código estiver suspensa,"},{"type":"text","text":" "},{"type":"text","text":"algum outro código concorrente no mesmo programa é executado."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, talvez uma tarefa em segundo plano de longa duração"},{"type":"text","text":" "},{"type":"text","text":"continua atualizando uma lista de novas galerias de fotos."},{"type":"text","text":" "},{"type":"text","text":"Esse código também é executado até o próximo ponto de suspensão, marcado por "},{"type":"codeVoice","code":"await"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"ou até terminar."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Após o retorno de "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"esse código continua a execução a partir desse ponto."},{"type":"text","text":" "},{"type":"text","text":"Ele atribui o valor que foi retornado para "},{"type":"codeVoice","code":"photoNames"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As linhas que definem "},{"type":"codeVoice","code":"sortedNames"},{"type":"text","text":" e "},{"type":"codeVoice","code":"name"},{"type":"text","text":" "},{"type":"text","text":"são códigos regulares e síncronos."},{"type":"text","text":" "},{"type":"text","text":"Como nada está marcado como "},{"type":"codeVoice","code":"await"},{"type":"text","text":" nessas linhas,"},{"type":"text","text":" "},{"type":"text","text":"não há pontos de suspensão possíveis."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O próximo "},{"type":"codeVoice","code":"await"},{"type":"text","text":" marca a chamada para a função "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Este código pausa a execução novamente até que a função retorne,"},{"type":"text","text":" "},{"type":"text","text":"dando a outro código concorrente a oportunidade de ser executado."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Após o retorno de "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"seu valor de retorno é atribuído a "},{"type":"codeVoice","code":"photo"},{"type":"text","text":" "},{"type":"text","text":"e então passado como argumento ao chamar a função "},{"type":"codeVoice","code":"show(_:)"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Os possíveis pontos de suspensão em seu código marcados com "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"indicam que o trecho de código atual pode pausar a execução"},{"type":"text","text":" "},{"type":"text","text":"enquanto aguarda o retorno da função ou método assíncrono."},{"type":"text","text":" "},{"type":"text","text":"Isso também é chamado de "},{"type":"emphasis","inlineContent":[{"type":"text","text":"yielding the thread"}]},{"type":"text","text":" "},{"type":"text","text":"porque, nos bastidores,"},{"type":"text","text":" "},{"type":"text","text":"Swift suspende a execução do seu código na thread atual"},{"type":"text","text":" "},{"type":"text","text":"e executa algum outro código nessa thread."},{"type":"text","text":" "},{"type":"text","text":"Como o código com "},{"type":"codeVoice","code":"await"},{"type":"text","text":" precisa ser capaz de suspender a execução,"},{"type":"text","text":" "},{"type":"text","text":"apenas alguns lugares em seu programa podem chamar funções ou métodos assíncronos:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Código no corpo de uma função, método ou propriedade assíncrona."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Código no método estático "},{"type":"codeVoice","code":"main()"},{"type":"text","text":" de"},{"type":"text","text":" "},{"type":"text","text":"uma estrutura, classe ou enumeração marcada com "},{"type":"codeVoice","code":"@main"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Código em uma tarefa filho não estruturada,"},{"type":"text","text":" "},{"type":"text","text":"conforme mostrado em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency"},{"type":"text","text":" abaixo."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O código entre os possíveis pontos de suspensão é executado sequencialmente,"},{"type":"text","text":" "},{"type":"text","text":"sem a possibilidade de interrupção de outro código concorrente."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o código abaixo move uma imagem de uma galeria para outra."}]},{"type":"codeListing","syntax":"swift","code":["let firstPhoto = await listPhotos(inGallery: \"Summer Vacation\")[0]","add(firstPhoto toGallery: \"Road Trip\")","\/\/ Nesse ponto, firstPhoto está temporariamente em ambas galerias.","remove(firstPhoto fromGallery: \"Summer Vacation\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Não há como outro código ser executado no meio"},{"type":"text","text":" "},{"type":"text","text":"da chamada para "},{"type":"codeVoice","code":"add(_:toGallery:)"},{"type":"text","text":" e "},{"type":"codeVoice","code":"remove(_:fromGallery:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Durante esse tempo, a primeira foto aparece em ambas as galerias,"},{"type":"text","text":" "},{"type":"text","text":"quebrando temporariamente uma das invariantes do aplicativo."},{"type":"text","text":" "},{"type":"text","text":"Para deixar ainda mais claro que este pedaço de código"},{"type":"text","text":" "},{"type":"text","text":"não deve ter "},{"type":"codeVoice","code":"await"},{"type":"text","text":" adicionado a ele no futuro,"},{"type":"text","text":" "},{"type":"text","text":"você pode refatorar esse código em uma função síncrona:"}]},{"type":"codeListing","syntax":"swift","code":["func move(_ photoName: String, from source: String, to destination: String) {","    add(photoName, to: destination)","    remove(photoName, from: source)","}","\/\/ ...","let firstPhoto = await listPhotos(inGallery: \"Summer Vacation\")[0]","move(firstPhoto, from: \"Summer Vacation\", to: \"Road Trip\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"No exemplo acima,"},{"type":"text","text":" "},{"type":"text","text":"porque a função "},{"type":"codeVoice","code":"move(_:from:to:)"},{"type":"text","text":" é síncrona,"},{"type":"text","text":" "},{"type":"text","text":"você garante que nunca poderá conter possíveis pontos de suspensão."},{"type":"text","text":" "},{"type":"text","text":"No futuro,"},{"type":"text","text":" "},{"type":"text","text":"se você tentar adicionar código concorrente a esta função,"},{"type":"text","text":" "},{"type":"text","text":"introduzindo um possível ponto de suspensão,"},{"type":"text","text":" "},{"type":"text","text":"você verá um erro em tempo de compilação em vez de introduzir um bug."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"o método "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)"},{"type":"text","text":" "},{"type":"text","text":"é útil ao escrever código simples"},{"type":"text","text":" "},{"type":"text","text":"para saber como concorrencia funciona."},{"type":"text","text":" "},{"type":"text","text":"Este método não faz nada,"},{"type":"text","text":" "},{"type":"text","text":"mas espera pelo menos o número determinado de nanossegundos antes de retornar."},{"type":"text","text":" "},{"type":"text","text":"Aqui está uma versão da função "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" "},{"type":"text","text":"que usa "},{"type":"codeVoice","code":"sleep(until:tolerance:clock:)"},{"type":"text","text":" para simular a espera por uma operação de rede:"}]},{"type":"codeListing","syntax":"swift","code":["func listPhotos(inGallery name: String) async throws -> [String] {","    try await Task.sleep(until: .now + .seconds(2), clock: .continuous)","    return [\"IMG001\", \"IMG99\", \"IMG0404\"]","}"]}],"type":"aside","name":"Nota"},{"anchor":"Asynchronous-Sequences","level":2,"type":"heading","text":"Asynchronous Sequences"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" function in the previous section"},{"type":"text","text":" "},{"type":"text","text":"asynchronously returns the whole array at once,"},{"type":"text","text":" "},{"type":"text","text":"after all of the array’s elements are ready."},{"type":"text","text":" "},{"type":"text","text":"Another approach"},{"type":"text","text":" "},{"type":"text","text":"is to wait for one element of the collection at a time"},{"type":"text","text":" "},{"type":"text","text":"using an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"asynchronous sequence"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Here’s what iterating over an asynchronous sequence looks like:"}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","","let handle = FileHandle.standardInput","for try await line in handle.bytes.lines {","    print(line)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of using an ordinary "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"text","text":"the example above writes "},{"type":"codeVoice","code":"for"},{"type":"text","text":" with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" after it."},{"type":"text","text":" "},{"type":"text","text":"Like when you call an asynchronous function or method,"},{"type":"text","text":" "},{"type":"text","text":"writing "},{"type":"codeVoice","code":"await"},{"type":"text","text":" indicates a possible suspension point."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"await"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop potentially suspends execution"},{"type":"text","text":" "},{"type":"text","text":"at the beginning of each iteration,"},{"type":"text","text":" "},{"type":"text","text":"when it’s waiting for the next element to be available."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the same way that you can use your own types in a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop"},{"type":"text","text":" "},{"type":"text","text":"by adding conformance to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"you can use your own types in a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"await"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop"},{"type":"text","text":" "},{"type":"text","text":"by adding conformance to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence"},{"type":"text","text":" protocol."}]},{"anchor":"Calling-Asynchronous-Functions-in-Parallel","level":2,"type":"heading","text":"Calling Asynchronous Functions in Parallel"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling an asynchronous function with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"runs only one piece of code at a time."},{"type":"text","text":" "},{"type":"text","text":"While the asynchronous code is running,"},{"type":"text","text":" "},{"type":"text","text":"the caller waits for that code to finish"},{"type":"text","text":" "},{"type":"text","text":"before moving on to run the next line of code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"to fetch the first three photos from a gallery,"},{"type":"text","text":" "},{"type":"text","text":"you could await three calls to the "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"as follows:"}]},{"type":"codeListing","syntax":"swift","code":["let firstPhoto = await downloadPhoto(named: photoNames[0])","let secondPhoto = await downloadPhoto(named: photoNames[1])","let thirdPhoto = await downloadPhoto(named: photoNames[2])","","let photos = [firstPhoto, secondPhoto, thirdPhoto]","show(photos)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach has an important drawback:"},{"type":"text","text":" "},{"type":"text","text":"Although the download is asynchronous"},{"type":"text","text":" "},{"type":"text","text":"and lets other work happen while it progresses,"},{"type":"text","text":" "},{"type":"text","text":"only one call to "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" runs at a time."},{"type":"text","text":" "},{"type":"text","text":"Each photo downloads completely before the next one starts downloading."},{"type":"text","text":" "},{"type":"text","text":"However, there’s no need for these operations to wait —"},{"type":"text","text":" "},{"type":"text","text":"each photo can download independently, or even at the same time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To call an asynchronous function"},{"type":"text","text":" "},{"type":"text","text":"and let it run in parallel with code around it,"},{"type":"text","text":" "},{"type":"text","text":"write "},{"type":"codeVoice","code":"async"},{"type":"text","text":" in front of "},{"type":"codeVoice","code":"let"},{"type":"text","text":" when you define a constant,"},{"type":"text","text":" "},{"type":"text","text":"and then write "},{"type":"codeVoice","code":"await"},{"type":"text","text":" each time you use the constant."}]},{"type":"codeListing","syntax":"swift","code":["async let firstPhoto = downloadPhoto(named: photoNames[0])","async let secondPhoto = downloadPhoto(named: photoNames[1])","async let thirdPhoto = downloadPhoto(named: photoNames[2])","","let photos = await [firstPhoto, secondPhoto, thirdPhoto]","show(photos)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"all three calls to "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" start"},{"type":"text","text":" "},{"type":"text","text":"without waiting for the previous one to complete."},{"type":"text","text":" "},{"type":"text","text":"If there are enough system resources available, they can run at the same time."},{"type":"text","text":" "},{"type":"text","text":"None of these function calls are marked with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"because the code doesn’t suspend to wait for the function’s result."},{"type":"text","text":" "},{"type":"text","text":"Instead, execution continues"},{"type":"text","text":" "},{"type":"text","text":"until the line where "},{"type":"codeVoice","code":"photos"},{"type":"text","text":" is defined —"},{"type":"text","text":" "},{"type":"text","text":"at that point, the program needs the results from these asynchronous calls,"},{"type":"text","text":" "},{"type":"text","text":"so you write "},{"type":"codeVoice","code":"await"},{"type":"text","text":" to pause execution"},{"type":"text","text":" "},{"type":"text","text":"until all three photos finish downloading."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how you can think about the differences between these two approaches:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call asynchronous functions with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"when the code on the following lines depends on that function’s result."},{"type":"text","text":" "},{"type":"text","text":"This creates work that is carried out sequentially."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call asynchronous functions with "},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"when you don’t need the result until later in your code."},{"type":"text","text":" "},{"type":"text","text":"This creates work that can be carried out in parallel."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"await"},{"type":"text","text":" and "},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"allow other code to run while they’re suspended."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, you mark the possible suspension point with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"to indicate that execution will pause, if needed,"},{"type":"text","text":" "},{"type":"text","text":"until an asynchronous function has returned."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also mix both of these approaches in the same code."}]},{"anchor":"Tasks-and-Task-Groups","level":2,"type":"heading","text":"Tasks and Task Groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"task"}]},{"type":"text","text":" is a unit of work"},{"type":"text","text":" "},{"type":"text","text":"that can be run asynchronously as part of your program."},{"type":"text","text":" "},{"type":"text","text":"All asynchronous code runs as part of some task."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" syntax described in the previous section"},{"type":"text","text":" "},{"type":"text","text":"creates a child task for you."},{"type":"text","text":" "},{"type":"text","text":"You can also create a task group"},{"type":"text","text":" "},{"type":"text","text":"and add child tasks to that group,"},{"type":"text","text":" "},{"type":"text","text":"which gives you more control over priority and cancellation,"},{"type":"text","text":" "},{"type":"text","text":"and lets you create a dynamic number of tasks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tasks are arranged in a hierarchy."},{"type":"text","text":" "},{"type":"text","text":"Each task in a task group has the same parent task,"},{"type":"text","text":" "},{"type":"text","text":"and each task can have child tasks."},{"type":"text","text":" "},{"type":"text","text":"Because of the explicit relationship between tasks and task groups,"},{"type":"text","text":" "},{"type":"text","text":"this approach is called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"structured concurrency"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Although you take on some of the responsibility for correctness,"},{"type":"text","text":" "},{"type":"text","text":"the explicit parent-child relationships between tasks"},{"type":"text","text":" "},{"type":"text","text":"lets Swift handle some behaviors like propagating cancellation for you,"},{"type":"text","text":" "},{"type":"text","text":"and lets Swift detect some errors at compile time."}]},{"type":"codeListing","syntax":"markdown","code":["await withTaskGroup(of: Data.self) { taskGroup in","    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","    for name in photoNames {","        taskGroup.addTask { await downloadPhoto(named: name) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about task groups,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup"},{"type":"text","text":"."}]},{"anchor":"Unstructured-Concurrency","level":3,"type":"heading","text":"Unstructured Concurrency"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the structured approaches to concurrency"},{"type":"text","text":" "},{"type":"text","text":"described in the previous sections,"},{"type":"text","text":" "},{"type":"text","text":"Swift also supports unstructured concurrency."},{"type":"text","text":" "},{"type":"text","text":"Unlike tasks that are part of a task group,"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unstructured task"}]},{"type":"text","text":" doesn’t have a parent task."},{"type":"text","text":" "},{"type":"text","text":"You have complete flexibility to manage unstructured tasks"},{"type":"text","text":" "},{"type":"text","text":"in whatever way your program needs,"},{"type":"text","text":" "},{"type":"text","text":"but you’re also completely responsible for their correctness."},{"type":"text","text":" "},{"type":"text","text":"To create an unstructured task that runs on the current actor,"},{"type":"text","text":" "},{"type":"text","text":"call the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"To create an unstructured task that’s not part of the current actor,"},{"type":"text","text":" "},{"type":"text","text":"known more specifically as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"detached task"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"call the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached"},{"type":"text","text":" class method."},{"type":"text","text":" "},{"type":"text","text":"Both of these operations return a task that you can interact with —"},{"type":"text","text":" "},{"type":"text","text":"for example, to wait for its result or to cancel it."}]},{"type":"codeListing","syntax":"markdown","code":["let newPhoto = \/\/ ... some photo data ...","let handle = Task {","    return await add(newPhoto, toGalleryNamed: \"Spring Adventures\")","}","let result = await handle.value"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about managing detached tasks,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task"},{"type":"text","text":"."}]},{"anchor":"Task-Cancellation","level":3,"type":"heading","text":"Task Cancellation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift concurrency uses a cooperative cancellation model."},{"type":"text","text":" "},{"type":"text","text":"Each task checks whether it has been canceled"},{"type":"text","text":" "},{"type":"text","text":"at the appropriate points in its execution,"},{"type":"text","text":" "},{"type":"text","text":"and responds to cancellation in whatever way is appropriate."},{"type":"text","text":" "},{"type":"text","text":"Depending on the work you’re doing,"},{"type":"text","text":" "},{"type":"text","text":"that usually means one of the following:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing an error like "},{"type":"codeVoice","code":"CancellationError"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or an empty collection"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning the partially completed work"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check for cancellation,"},{"type":"text","text":" "},{"type":"text","text":"either call "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which throws "},{"type":"codeVoice","code":"CancellationError"},{"type":"text","text":" if the task has been canceled,"},{"type":"text","text":" "},{"type":"text","text":"or check the value of "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled"},{"type":"text","text":" "},{"type":"text","text":"and handle the cancellation in your own code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"a task that’s downloading photos from a gallery"},{"type":"text","text":" "},{"type":"text","text":"might need to delete partial downloads and close network connections."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To propagate cancellation manually,"},{"type":"text","text":" "},{"type":"text","text":"call "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel"},{"type":"text","text":"."}]},{"anchor":"Actors","level":2,"type":"heading","text":"Actors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use tasks to break up your program into isolated, concurrent pieces."},{"type":"text","text":" "},{"type":"text","text":"Tasks are isolated from each other,"},{"type":"text","text":" "},{"type":"text","text":"which is what makes it safe for them to run at the same time,"},{"type":"text","text":" "},{"type":"text","text":"but sometimes you need to share some information between tasks."},{"type":"text","text":" "},{"type":"text","text":"Actors let you safely share information between concurrent code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like classes, actors are reference types,"},{"type":"text","text":" "},{"type":"text","text":"so the comparison of value types and reference types"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"text","text":"doc:ClassesAndStructures#Classes-Are-Reference-Types"},{"type":"text","text":" "},{"type":"text","text":"applies to actors as well as classes."},{"type":"text","text":" "},{"type":"text","text":"Unlike classes,"},{"type":"text","text":" "},{"type":"text","text":"actors allow only one task to access their mutable state at a time,"},{"type":"text","text":" "},{"type":"text","text":"which makes it safe for code in multiple tasks"},{"type":"text","text":" "},{"type":"text","text":"to interact with the same instance of an actor."},{"type":"text","text":" "},{"type":"text","text":"For example, here’s an actor that records temperatures:"}]},{"type":"codeListing","syntax":"swift","code":["actor TemperatureLogger {","    let label: String","    var measurements: [Int]","    private(set) var max: Int","","    init(label: String, measurement: Int) {","        self.label = label","        self.measurements = [measurement]","        self.max = measurement","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You introduce an actor with the "},{"type":"codeVoice","code":"actor"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"followed by its definition in a pair of braces."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"TemperatureLogger"},{"type":"text","text":" actor has properties"},{"type":"text","text":" "},{"type":"text","text":"that other code outside the actor can access,"},{"type":"text","text":" "},{"type":"text","text":"and restricts the "},{"type":"codeVoice","code":"max"},{"type":"text","text":" property so only code inside the actor"},{"type":"text","text":" "},{"type":"text","text":"can update the maximum value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You create an instance of an actor"},{"type":"text","text":" "},{"type":"text","text":"using the same initializer syntax as structures and classes."},{"type":"text","text":" "},{"type":"text","text":"When you access a property or method of an actor,"},{"type":"text","text":" "},{"type":"text","text":"you use "},{"type":"codeVoice","code":"await"},{"type":"text","text":" to mark the potential suspension point."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"markdown","code":["let logger = TemperatureLogger(label: \"Outdoors\", measurement: 25)","print(await logger.max)","\/\/ Prints \"25\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"accessing "},{"type":"codeVoice","code":"logger.max"},{"type":"text","text":" is a possible suspension point."},{"type":"text","text":" "},{"type":"text","text":"Because the actor allows only one task at a time to access its mutable state,"},{"type":"text","text":" "},{"type":"text","text":"if code from another task is already interacting with the logger,"},{"type":"text","text":" "},{"type":"text","text":"this code suspends while it waits to access the property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"code that’s part of the actor doesn’t write "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"when accessing the actor’s properties."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s a method that updates a "},{"type":"codeVoice","code":"TemperatureLogger"},{"type":"text","text":" with a new temperature:"}]},{"type":"codeListing","syntax":"markdown","code":["extension TemperatureLogger {","    func update(with measurement: Int) {","        measurements.append(measurement)","        if measurement > max {","            max = measurement","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" method is already running on the actor,"},{"type":"text","text":" "},{"type":"text","text":"so it doesn’t mark its access to properties like "},{"type":"codeVoice","code":"max"},{"type":"text","text":" with "},{"type":"codeVoice","code":"await"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method also shows one of the reasons"},{"type":"text","text":" "},{"type":"text","text":"why actors allow only one task at a time to interact with their mutable state:"},{"type":"text","text":" "},{"type":"text","text":"Some updates to an actor’s state temporarily break invariants."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"TemperatureLogger"},{"type":"text","text":" actor keeps track of"},{"type":"text","text":" "},{"type":"text","text":"a list of temperatures and a maximum temperature,"},{"type":"text","text":" "},{"type":"text","text":"and it updates the maximum temperature when you record a new measurement."},{"type":"text","text":" "},{"type":"text","text":"In the middle of an update,"},{"type":"text","text":" "},{"type":"text","text":"after appending the new measurement but before updating "},{"type":"codeVoice","code":"max"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the temperature logger is in a temporary inconsistent state."},{"type":"text","text":" "},{"type":"text","text":"Preventing multiple tasks from interacting with the same instance simultaneously"},{"type":"text","text":" "},{"type":"text","text":"prevents problems like the following sequence of events:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your code calls the "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"It updates the "},{"type":"codeVoice","code":"measurements"},{"type":"text","text":" array first."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before your code can update "},{"type":"codeVoice","code":"max"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"code elsewhere reads the maximum value and the array of temperatures."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your code finishes its update by changing "},{"type":"codeVoice","code":"max"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case,"},{"type":"text","text":" "},{"type":"text","text":"the code running elsewhere would read incorrect information"},{"type":"text","text":" "},{"type":"text","text":"because its access to the actor was interleaved"},{"type":"text","text":" "},{"type":"text","text":"in the middle of the call to "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" "},{"type":"text","text":"while the data was temporarily invalid."},{"type":"text","text":" "},{"type":"text","text":"You can prevent this problem when using Swift actors"},{"type":"text","text":" "},{"type":"text","text":"because they only allow one operation on their state at a time,"},{"type":"text","text":" "},{"type":"text","text":"and because that code can be interrupted"},{"type":"text","text":" "},{"type":"text","text":"only in places where "},{"type":"codeVoice","code":"await"},{"type":"text","text":" marks a suspension point."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" doesn’t contain any suspension points,"},{"type":"text","text":" "},{"type":"text","text":"no other code can access the data in the middle of an update."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to access those properties from outside the actor,"},{"type":"text","text":" "},{"type":"text","text":"like you would with an instance of a class,"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"markdown","code":["print(logger.max)  \/\/ Error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Accessing "},{"type":"codeVoice","code":"logger.max"},{"type":"text","text":" without writing "},{"type":"codeVoice","code":"await"},{"type":"text","text":" fails because"},{"type":"text","text":" "},{"type":"text","text":"the properties of an actor are part of that actor’s isolated local state."},{"type":"text","text":" "},{"type":"text","text":"Swift guarantees that"},{"type":"text","text":" "},{"type":"text","text":"only code inside an actor can access the actor’s local state."},{"type":"text","text":" "},{"type":"text","text":"This guarantee is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"actor isolation"}]},{"type":"text","text":"."}]},{"anchor":"Sendable-Types","level":2,"type":"heading","text":"Sendable Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tasks and actors let you divide a program"},{"type":"text","text":" "},{"type":"text","text":"into pieces that can safely run concurrently."},{"type":"text","text":" "},{"type":"text","text":"Inside of a task or an instance of an actor,"},{"type":"text","text":" "},{"type":"text","text":"the part of a program that contains mutable state,"},{"type":"text","text":" "},{"type":"text","text":"like variables and properties,"},{"type":"text","text":" "},{"type":"text","text":"is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"concurrency domain"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Some kinds of data can’t be shared between concurrency domains,"},{"type":"text","text":" "},{"type":"text","text":"because that data contains mutable state,"},{"type":"text","text":" "},{"type":"text","text":"but it doesn’t protect against overlapping access."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A type that can be shared from one concurrency domain to another"},{"type":"text","text":" "},{"type":"text","text":"is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"sendable"}]},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"For example, it can be passed as an argument when calling an actor method"},{"type":"text","text":" "},{"type":"text","text":"or be returned as the result of a task."},{"type":"text","text":" "},{"type":"text","text":"The examples earlier in this chapter didn’t discuss sendability"},{"type":"text","text":" "},{"type":"text","text":"because those examples use simple value types"},{"type":"text","text":" "},{"type":"text","text":"that are always safe to share"},{"type":"text","text":" "},{"type":"text","text":"for the data being passed between concurrency domains."},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"some types aren’t safe to pass across concurrency domains."},{"type":"text","text":" "},{"type":"text","text":"For example, a class that contains mutable properties"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t serialize access to those properties"},{"type":"text","text":" "},{"type":"text","text":"can produce unpredictable and incorrect results"},{"type":"text","text":" "},{"type":"text","text":"when you pass instances of that class between different tasks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You mark a type as being sendable"},{"type":"text","text":" "},{"type":"text","text":"by declaring conformance to the "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"That protocol doesn’t have any code requirements,"},{"type":"text","text":" "},{"type":"text","text":"but it does have semantic requirements that Swift enforces."},{"type":"text","text":" "},{"type":"text","text":"In general, there are three ways for a type to be sendable:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type is a value type,"},{"type":"text","text":" "},{"type":"text","text":"and its mutable state is made up of other sendable data —"},{"type":"text","text":" "},{"type":"text","text":"for example, a structure with stored properties that are sendable"},{"type":"text","text":" "},{"type":"text","text":"or an enumeration with associated values that are sendable."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type doesn’t have any mutable state,"},{"type":"text","text":" "},{"type":"text","text":"and its immutable state is made up of other sendable data —"},{"type":"text","text":" "},{"type":"text","text":"for example, a structure or class that has only read-only properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type has code that ensures the safety of its mutable state,"},{"type":"text","text":" "},{"type":"text","text":"like a class that’s marked "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" "},{"type":"text","text":"or a class that serializes access to its properties"},{"type":"text","text":" "},{"type":"text","text":"on a particular thread or queue."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a detailed list of the semantic requirements,"},{"type":"text","text":" "},{"type":"text","text":"see the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},{"type":"text","text":" protocol reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some types are always sendable,"},{"type":"text","text":" "},{"type":"text","text":"like structures that have only sendable properties"},{"type":"text","text":" "},{"type":"text","text":"and enumerations that have only sendable associated values."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct TemperatureReading: Sendable {","    var measurement: Int","}","","extension TemperatureLogger {","    func addReading(from reading: TemperatureReading) {","        measurements.append(reading.measurement)","    }","}","","let logger = TemperatureLogger(label: \"Tea kettle\", measurement: 85)","let reading = TemperatureReading(measurement: 45)","await logger.addReading(from: reading)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"TemperatureReading"},{"type":"text","text":" is a structure that has only sendable properties,"},{"type":"text","text":" "},{"type":"text","text":"and the structure isn’t marked "},{"type":"codeVoice","code":"public"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@usableFromInline"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s implicitly sendable."},{"type":"text","text":" "},{"type":"text","text":"Here’s a version of the structure"},{"type":"text","text":" "},{"type":"text","text":"where conformance to the "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" protocol is implied:"}]},{"type":"codeListing","syntax":"swift","code":["struct TemperatureReading {","    var measurement: Int","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/concurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Concorrência","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"https://developer.apple.com/documentation/swift/task/sleep(until:tolerance:clock:)":{"title":"Task.sleep(until:tolerance:clock:)","titleInlineContent":[{"type":"text","text":"Task.sleep(until:tolerance:clock:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency#Unstructured-Concurrency":{"abstract":[],"title":"Unstructured Concurrency","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency","url":"\/documentation\/the-swift-programming-language\/concurrency#Unstructured-Concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"https://developer.apple.com/documentation/swift/task/3814826-checkcancellation":{"title":"Task.checkCancellation()","titleInlineContent":[{"type":"text","text":"Task.checkCancellation()"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation"},"https://developer.apple.com/documentation/swift/task/3814832-iscancelled":{"title":"Task.isCancelled","titleInlineContent":[{"type":"text","text":"Task.isCancelled"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled"},"https://developer.apple.com/documentation/swift/task/3856790-init":{"title":"Task.init(priority:operation:)","titleInlineContent":[{"type":"text","text":"Task.init(priority:operation:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init"},"https://developer.apple.com/documentation/swift/taskgroup":{"title":"TaskGroup","titleInlineContent":[{"type":"text","text":"TaskGroup"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup","url":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"https://developer.apple.com/documentation/swift/task/3856786-detached":{"title":"Task.detached(priority:operation:)","titleInlineContent":[{"type":"text","text":"Task.detached(priority:operation:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"https://developer.apple.com/documentation/swift/sendable":{"title":"Sendable","titleInlineContent":[{"type":"text","text":"Sendable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"https://developer.apple.com/documentation/swift/task/3851218-cancel":{"title":"Task.cancel()","titleInlineContent":[{"type":"text","text":"Task.cancel()"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"https://developer.apple.com/documentation/swift/sequence":{"title":"Sequence","titleInlineContent":[{"type":"text","text":"Sequence"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"https://developer.apple.com/documentation/swift/asyncsequence":{"title":"AsyncSequence","titleInlineContent":[{"type":"text","text":"AsyncSequence"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence","url":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"https://developer.apple.com/documentation/swift/task":{"title":"Task","titleInlineContent":[{"type":"text","text":"Task"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task","url":"https:\/\/developer.apple.com\/documentation\/swift\/task"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"}}}