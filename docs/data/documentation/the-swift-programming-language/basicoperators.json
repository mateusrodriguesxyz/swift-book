{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift suporta os operadores que você já conhece de linguagens como C,"},{"type":"text","text":" "},{"type":"text","text":"e melhora vários recursos para eliminar erros comuns de codificação."},{"type":"text","text":" "},{"type":"text","text":"O operador de atribuição ("},{"type":"codeVoice","code":"="},{"type":"text","text":") não retorna um valor,"},{"type":"text","text":" "},{"type":"text","text":"para evitar que seja usado erroneamente quando"},{"type":"text","text":" "},{"type":"text","text":"o operador igual a ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") é pretendido."},{"type":"text","text":" "},{"type":"text","text":"Operadores aritméticos ("},{"type":"codeVoice","code":"+"},{"type":"text","text":", "},{"type":"codeVoice","code":"-"},{"type":"text","text":", "},{"type":"codeVoice","code":"*"},{"type":"text","text":", "},{"type":"codeVoice","code":"\/"},{"type":"text","text":", "},{"type":"codeVoice","code":"%"},{"type":"text","text":" e assim por diante)"},{"type":"text","text":" "},{"type":"text","text":"detectam e desabilitam estouros de valor,"},{"type":"text","text":" "},{"type":"text","text":"para evitar resultados inesperados quando estamos trabalhando com números que se tornam muito maiores ou muito menores do que o intervalo permitido nos tipos que os armazenam."},{"type":"text","text":" "},{"type":"text","text":"Você pode ativar o comportamento de estouro de valor"},{"type":"text","text":" "},{"type":"text","text":"usando os operadores de estouro do Swift,"},{"type":"text","text":" "},{"type":"text","text":"conforme descrito em "},{"type":"reference","isActive":true,"identifier":"doc:OperadoresAvançados#Operadores-de-estouro"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift também fornece operadores de intervalo que não são encontrados em C,"},{"type":"text","text":" "},{"type":"text","text":"como "},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":" e "},{"type":"codeVoice","code":"a...b"},{"type":"text","text":", como um atalho para expressar um intervalo de valores."},{"type":"text","text":" "},{"type":"text","text":"Este capítulo descreve os operadores comuns em Swift."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:OperadoresAvançados"},{"type":"text","text":" abrange os operadores avançados do Swift,"},{"type":"text","text":" "},{"type":"text","text":"e descreve como definir seus próprios operadores personalizados"},{"type":"text","text":" "},{"type":"text","text":"e implementar os operadores padrão para seus próprios tipos personalizados."}]},{"anchor":"Terminology","level":2,"type":"heading","text":"Terminology"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operators are unary, binary, or ternary:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Unary"}]},{"type":"text","text":" operators operate on a single target (such as "},{"type":"codeVoice","code":"-a"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Unary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix"}]},{"type":"text","text":" operators appear immediately before their target (such as "},{"type":"codeVoice","code":"!b"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and unary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"postfix"}]},{"type":"text","text":" operators appear immediately after their target (such as "},{"type":"codeVoice","code":"c!"},{"type":"text","text":")."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Binary"}]},{"type":"text","text":" operators operate on two targets (such as "},{"type":"codeVoice","code":"2 + 3"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"infix"}]},{"type":"text","text":" because they appear in between their two targets."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Ternary"}]},{"type":"text","text":" operators operate on three targets."},{"type":"text","text":" "},{"type":"text","text":"Like C, Swift has only one ternary operator,"},{"type":"text","text":" "},{"type":"text","text":"the ternary conditional operator ("},{"type":"codeVoice","code":"a ? b : c"},{"type":"text","text":")."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values that operators affect are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operands"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In the expression "},{"type":"codeVoice","code":"1 + 2"},{"type":"text","text":", the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" symbol is an infix operator"},{"type":"text","text":" "},{"type":"text","text":"and its two operands are the values "},{"type":"codeVoice","code":"1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"2"},{"type":"text","text":"."}]},{"anchor":"Operador-de-Atribuição","level":2,"type":"heading","text":"Operador de Atribuição"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador de atribuição"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a = b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"inicializa ou atualiza o valor de "},{"type":"codeVoice","code":"a"},{"type":"text","text":" com o valor de "},{"type":"codeVoice","code":"b"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let b = 10","var a = 5","a = b","\/\/ a agora é igual a 10"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se o lado direito da atribuição é uma tupla com multipos valores,"},{"type":"text","text":" "},{"type":"text","text":"os elementos podem se decompor em multiplas constantes ou variáveis de uma só vez:"}]},{"type":"codeListing","syntax":"swift","code":["let (x, y) = (1, 2)","\/\/ x é igual a 1, e y é igual a 2"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ao contrário do operador de atribuição em C e objective-C,"},{"type":"text","text":" "},{"type":"text","text":"em Swift o operador de atribuição não retorna um valor."},{"type":"text","text":" "},{"type":"text","text":"A declaração a seguir não é válida:"}]},{"type":"codeListing","syntax":"swift","code":["if x = y {","   \/\/ Isso não é válido, pois x = y não retorna um valor.","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta característica previne que o operador de atribuição ("},{"type":"codeVoice","code":"="},{"type":"text","text":") seja usado acidentalmente"},{"type":"text","text":" "},{"type":"text","text":"quando o operador de igualdade ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") é realmente a intenção."},{"type":"text","text":" "},{"type":"text","text":"Ao tornar "},{"type":"codeVoice","code":"if x = y"},{"type":"text","text":" inválido, Swift ajuda você a evitar esse tipo de erro no seu código."}]},{"anchor":"Operadores-Aritméticos","level":2,"type":"heading","text":"Operadores Aritméticos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift suporta os 4 "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operadores aritméticos"}]},{"type":"text","text":" padrões para todos os tipos de números:"},{"type":"text","text":" "},{"type":"text","text":"Swift supports the four standard "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arithmetic operators"}]},{"type":"text","text":" for all number types:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subtração ("},{"type":"codeVoice","code":"-"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiplicação ("},{"type":"codeVoice","code":"*"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Divisão ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":")"}]}]}]},{"type":"codeListing","syntax":"swift","code":["1 + 2       \/\/ igual a 3","5 - 3       \/\/ igual a 2","2 * 3       \/\/ igual a 6","10.0 \/ 2.5  \/\/ igual a 4.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Diferente dos operadores aritméticos em C e Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"os de Swift não permitem valores ultrapassem o tamanho padrão definido (não permite overflow)."},{"type":"text","text":" "},{"type":"text","text":"Você pode optar por avaliar o comportamento de overflow usando os operadores de overflow do Swift"},{"type":"text","text":" "},{"type":"text","text":"(como por exemplo a &+ b). Veja "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O operador de adição também é suportado para concatenação de "},{"type":"codeVoice","code":"String"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["\"olá, \" + \"mundo\"  \/\/ é igual a \"olá, mundo\""]},{"anchor":"Operador-de-resto-divisional","level":3,"type":"heading","text":"Operador de resto divisional"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Operador de resto divisional"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a % b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"calcula quantos múltiplos de "},{"type":"codeVoice","code":"b"},{"type":"text","text":" caberão dentro de "},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"type":"text","text":"e retornará a sobra"},{"type":"text","text":" "},{"type":"text","text":"(Conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"resto"}]},{"type":"text","text":")."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O operador de resto divisonal ("},{"type":"codeVoice","code":"%"},{"type":"text","text":") também é conhecido como"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador módulo"}]},{"type":"text","text":" em outras linguagens."},{"type":"text","text":" "},{"type":"text","text":"No entanto, seu comportamento em Swift para números negativos torna-o,"},{"type":"text","text":" "},{"type":"text","text":"estritamente falando, em um resto em vez de uma operação de módulo."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aqui, veja como o operador de resto funciona"},{"type":"text","text":" "},{"type":"text","text":"Para calcular "},{"type":"codeVoice","code":"9 % 4"},{"type":"text","text":", você primeiro calcula quantos "},{"type":"codeVoice","code":"4"},{"type":"text","text":"s caberão dentro de "},{"type":"codeVoice","code":"9"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"remainderInteger"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode colocar dois "},{"type":"codeVoice","code":"4"},{"type":"text","text":"s dentro de "},{"type":"codeVoice","code":"9"},{"type":"text","text":", e o restante é "},{"type":"codeVoice","code":"1"},{"type":"text","text":" (mostrado em laranja)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Em Swift, isso seria escrito como:"}]},{"type":"codeListing","syntax":"swift","code":["9 % 4    \/\/ equals 1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para determinar a resposta para "},{"type":"codeVoice","code":"a % b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"o operador "},{"type":"codeVoice","code":"%"},{"type":"text","text":" calcula a seguinte equação"},{"type":"text","text":" "},{"type":"text","text":"e retorna "},{"type":"codeVoice","code":"resto"},{"type":"text","text":" como a saída:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"a"},{"type":"text","text":" = ("},{"type":"codeVoice","code":"b"},{"type":"text","text":" x "},{"type":"codeVoice","code":"algum multiplo"},{"type":"text","text":") + "},{"type":"codeVoice","code":"resto"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"aonde "},{"type":"codeVoice","code":"algum multiplo"},{"type":"text","text":" é o maior número de múltiplos para "},{"type":"codeVoice","code":"b"},{"type":"text","text":" "},{"type":"text","text":"que caberá dentro de "},{"type":"codeVoice","code":"a"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Colocando "},{"type":"codeVoice","code":"9"},{"type":"text","text":" e "},{"type":"codeVoice","code":"4"},{"type":"text","text":" nesta equação, produz:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"9"},{"type":"text","text":" = ("},{"type":"codeVoice","code":"4"},{"type":"text","text":" x "},{"type":"codeVoice","code":"2"},{"type":"text","text":") + "},{"type":"codeVoice","code":"1"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O mesmo método é aplicado ao calcular o restante para um valor negativo de "},{"type":"codeVoice","code":"a"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["-9 % 4   \/\/ igual -1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Colocando "},{"type":"codeVoice","code":"-9"},{"type":"text","text":" e "},{"type":"codeVoice","code":"4"},{"type":"text","text":" na equação, produz:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"-9"},{"type":"text","text":" = ("},{"type":"codeVoice","code":"4"},{"type":"text","text":" x "},{"type":"codeVoice","code":"-2"},{"type":"text","text":") + "},{"type":"codeVoice","code":"-1"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"dando um valor de resto de "},{"type":"codeVoice","code":"-1"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O sinal de "},{"type":"codeVoice","code":"b"},{"type":"text","text":" é ignorado para valores negativos de "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Isso significa que "},{"type":"codeVoice","code":"a % b"},{"type":"text","text":" e "},{"type":"codeVoice","code":"a % -b"},{"type":"text","text":" sempre dão a mesma resposta."}]},{"anchor":"Operador-Unário-de-Menos","level":3,"type":"heading","text":"Operador Unário de Menos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O sinal de um valor numérico pode ser alternado usando um prefixo "},{"type":"codeVoice","code":"-"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"conhecido como o "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador unário de menos"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"-"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let three = 3","let minusThree = -three       \/\/ minusThree equals -3","let plusThree = -minusThree   \/\/ plusThree equals 3, or \"minus minus three\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O operador unário de menos ("},{"type":"codeVoice","code":"-"},{"type":"text","text":") é prefixado diretamente antes do valor em que opera,"},{"type":"text","text":" "},{"type":"text","text":"sem nenhum espaço em branco."}]},{"anchor":"Operador-unário-de-mais","level":3,"type":"heading","text":"Operador unário de mais"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador unário de mais"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") simplesmente retorna"},{"type":"text","text":" "},{"type":"text","text":"o valor em que opera, sem qualquer alteração:"}]},{"type":"codeListing","syntax":"swift","code":["let minusSix = -6","let alsoMinusSix = +minusSix  \/\/ alsoMinusSix equals -6"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Embora o operador unário de mais ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") não faça nada,"},{"type":"text","text":" "},{"type":"text","text":"você pode usá-lo para fornecer simetria em seu código para números positivos"},{"type":"text","text":" "},{"type":"text","text":"ao usar também o operador unário de menos ("},{"type":"codeVoice","code":"-"},{"type":"text","text":") para números negativos."}]},{"anchor":"Operadores-de-Atribuição-Compostos","level":2,"type":"heading","text":"Operadores de Atribuição Compostos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Assim como C, Swift fornece "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operadores de atribuição compostos"}]},{"type":"text","text":" que combinam atribuição ("},{"type":"codeVoice","code":"="},{"type":"text","text":") com outra operação."},{"type":"text","text":" "},{"type":"text","text":"Um exemplo é o "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador de atribuição de adição"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["var a = 1","a += 2","\/\/ a is now equal to 3"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A expressão "},{"type":"codeVoice","code":"a += 2"},{"type":"text","text":" é um atalho para "},{"type":"codeVoice","code":"a = a + 2"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Efetivamente, a adição e a atribuição são combinadas em um operador"},{"type":"text","text":" "},{"type":"text","text":"que executa as duas tarefas ao mesmo tempo."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Os operadores de atribuição compostos não retornam um valor."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, você não pode escrever "},{"type":"codeVoice","code":"let b = a += 2"},{"type":"text","text":"."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para obter informações sobre os operadores fornecidos pela biblioteca padrão Swift,"},{"type":"text","text":" "},{"type":"text","text":"veja "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},{"type":"text","text":"."}]},{"anchor":"Operadores-de-Comparação","level":2,"type":"heading","text":"Operadores de Comparação"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift suporta os seguintes operadores de comparação:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Igual a ("},{"type":"codeVoice","code":"a == b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Diferente de ("},{"type":"codeVoice","code":"a != b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Maior que ("},{"type":"codeVoice","code":"a > b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Menor que ("},{"type":"codeVoice","code":"a < b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Maior ou igual a ("},{"type":"codeVoice","code":"a >= b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Menor ou igual a ("},{"type":"codeVoice","code":"a <= b"},{"type":"text","text":")"}]}]}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift também fornece dois "},{"type":"strong","inlineContent":[{"type":"text","text":"operadores de referência"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"==="},{"type":"text","text":" e "},{"type":"codeVoice","code":"!=="},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"que você usa para testar se duas referências de objeto se referem à mesma instância de objeto."},{"type":"text","text":" "},{"type":"text","text":"Para obter mais informações, consulte "},{"type":"text","text":"doc:ClassesAndStructures#Identity-Operators"},{"type":"text","text":"."}]}],"type":"aside","name":"Nota"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Cada um dos operadores de comparação retorna um valor "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" para indicar se a declaração é verdadeira ou não:"}]},{"type":"codeListing","syntax":"swift","code":["1 == 1   \/\/ true porque 1 é igual a 1","2 != 1   \/\/ true porque 2 não é igual a 1","2 > 1    \/\/ true porque 2 é maior que 1","1 < 2    \/\/ true porque 1 é menor que 2","1 >= 1   \/\/ true porque 1 é maior ou igual a 1","2 <= 1   \/\/ false porque 2 não é menor ou igual a 1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operadores de comparação são frequentemente usados em declarações condicionais,"},{"type":"text","text":" "},{"type":"text","text":"como a instrução "},{"type":"codeVoice","code":"if"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let name = \"world\"","if name == \"world\" {","   print(\"hello, world\")","} else {","   print(\"I'm sorry \\(name), but I don't recognize you\")","}","\/\/ Imprime \"hello, world\", porque 'name' é, de fato, igual a \"world\"."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para saber mais sobre a instrução "},{"type":"codeVoice","code":"if"},{"type":"text","text":", veja "},{"type":"text","text":"doc:ControleDeFluxo"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode comparar"},{"type":"text","text":" "},{"type":"text","text":"duas tuplas se elas tiverem o mesmo tipo e o mesmo número de valores."},{"type":"text","text":" "},{"type":"text","text":"As tuplas são comparadas da esquerda para a direita,"},{"type":"text","text":" "},{"type":"text","text":"um valor de cada vez,"},{"type":"text","text":" "},{"type":"text","text":"até que a comparação encontre dois valores"},{"type":"text","text":" "},{"type":"text","text":"que não são iguais."},{"type":"text","text":" "},{"type":"text","text":"Esses dois valores são comparados,"},{"type":"text","text":" "},{"type":"text","text":"e o resultado dessa comparação"},{"type":"text","text":" "},{"type":"text","text":"determina o resultado geral da comparação de tuplas."},{"type":"text","text":" "},{"type":"text","text":"Se todos os elementos forem iguais,"},{"type":"text","text":" "},{"type":"text","text":"então as próprias tuplas são iguais."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo:"}]},{"type":"codeListing","syntax":"swift","code":["(1, \"zebra\") < (2, \"apple\")   \/\/ true porque 1 é menor que 2; \"zebra\" e \"apple\" não são comparados","(3, \"apple\") < (3, \"bird\")    \/\/ true porque 3 é igual a 3 e \"apple\" é menor que \"bird\"","(4, \"dog\") == (4, \"dog\")      \/\/ true porque 4 é igual a 4 e \"dog\" é igual a \"dog\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comment {"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"test: "},{"type":"codeVoice","code":"tuple-comparison-operators"}]}]}]},{"type":"codeListing","syntax":"swifttest","code":[">> let a =","-> (1, \"zebra\") < (2, \"apple\")   \/\/ true because 1 is less than 2; \"zebra\" and \"apple\" aren't compared",">> let b =","-> (3, \"apple\") < (3, \"bird\")    \/\/ true because 3 is equal to 3, and \"apple\" is less than \"bird\"",">> let c =","-> (4, \"dog\") == (4, \"dog\")      \/\/ true because 4 is equal to 4, and \"dog\" is equal to \"dog\"",">> print(a, b, c)","<< true true true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"}"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"No exemplo acima,"},{"type":"text","text":" "},{"type":"text","text":"você pode ver o comportamento de comparação da esquerda para a direita na primeira linha."},{"type":"text","text":" "},{"type":"text","text":"Como "},{"type":"codeVoice","code":"1"},{"type":"text","text":" é menor que "},{"type":"codeVoice","code":"2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"(1, \"zebra\")"},{"type":"text","text":" é considerado menor que "},{"type":"codeVoice","code":"(2, \"apple\")"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"independentemente de quaisquer outros valores nas tuplas."},{"type":"text","text":" "},{"type":"text","text":"Não importa que "},{"type":"codeVoice","code":"\"zebra\""},{"type":"text","text":" não seja menor que "},{"type":"codeVoice","code":"\"apple\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"porque a comparação já é determinada pelos primeiros elementos das tuplas."},{"type":"text","text":" "},{"type":"text","text":"No entanto,"},{"type":"text","text":" "},{"type":"text","text":"quando os primeiros elementos das tuplas são os mesmos,"},{"type":"text","text":" "},{"type":"text","text":"seus segundos elementos "},{"type":"strong","inlineContent":[{"type":"text","text":"são"}]},{"type":"text","text":" comparados —"},{"type":"text","text":" "},{"type":"text","text":"isso é o que acontece na segunda e terceira linha."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuplas podem ser comparadas com um determinado operador somente se o operador"},{"type":"text","text":" "},{"type":"text","text":"pode ser aplicado a cada valor nas respectivas tuplas. Por exemplo,"},{"type":"text","text":" "},{"type":"text","text":"conforme demonstrado no código abaixo, você pode comparar"},{"type":"text","text":" "},{"type":"text","text":"duas tuplas do tipo "},{"type":"codeVoice","code":"(String, Int)"},{"type":"text","text":" porque"},{"type":"text","text":" "},{"type":"text","text":"ambos os valores "},{"type":"codeVoice","code":"String"},{"type":"text","text":" e "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" podem ser comparados"},{"type":"text","text":" "},{"type":"text","text":"usando o operador "},{"type":"codeVoice","code":"<"},{"type":"text","text":". Em contrapartida,"},{"type":"text","text":" "},{"type":"text","text":"duas tuplas do tipo "},{"type":"codeVoice","code":"(String, Bool)"},{"type":"text","text":" não podem ser comparadas"},{"type":"text","text":" "},{"type":"text","text":"com o operador "},{"type":"codeVoice","code":"<"},{"type":"text","text":" porque o operador "},{"type":"codeVoice","code":"<"},{"type":"text","text":" não pode ser aplicado a"},{"type":"text","text":" "},{"type":"text","text":"valores "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["(\"blue\", -1) < (\"purple\", 1)        \/\/ OK, avalia como true","(\"blue\", false) < (\"purple\", true)  \/\/ Erro, pois < não pode ser usado para valores Booleanos",""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A biblioteca padrão do Swift inclui operadores de comparação de tuplas"},{"type":"text","text":" "},{"type":"text","text":"para tuplas com menos de sete elementos."},{"type":"text","text":" "},{"type":"text","text":"Para comparar tuplas com sete ou mais elementos,"},{"type":"text","text":" "},{"type":"text","text":"você mesmo deve implementar os operadores de comparação."}]}],"type":"aside","name":"Nota"},{"anchor":"Operador-Condicional-Ternário","level":2,"type":"heading","text":"Operador Condicional Ternário"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador condicional ternário"}]},{"type":"text","text":" é um operador especial com três partes, no formato "},{"type":"codeVoice","code":"question ? answer1 : answer2"},{"type":"text","text":". É uma abreviação para escolher uma de duas expressões baseado se "},{"type":"codeVoice","code":"question"},{"type":"text","text":" é verdadeiro ou falso. Se "},{"type":"codeVoice","code":"question"},{"type":"text","text":" for verdadeiro, ele escolhe "},{"type":"codeVoice","code":"answer1"},{"type":"text","text":" e retorna seu valor; caso contrário, ele escolhe "},{"type":"codeVoice","code":"answer2"},{"type":"text","text":" e retorna seu valor."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O operador condicional ternário é uma abreviação para o código abaixo:"}]},{"type":"codeListing","syntax":"swift","code":["if question {","   answer1","} else {","   answer2","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aqui está um exemplo, que calcula a altura da linha de uma tabela. A altura da linha deve ser 50 pontos mais alta que a altura do conteúdo se a linha tiver um cabeçalho. Caso contrário, a altura da linha deve ser 20 pontos mais alta:"}]},{"type":"codeListing","syntax":"swift","code":["let contentHeight = 40","let hasHeader = true","let rowHeight = contentHeight + (hasHeader ? 50 : 20)","\/\/ `rowHeight` é igual a 90"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O exemplo acima é uma abreviação para o código abaixo:"}]},{"type":"codeListing","syntax":"swift","code":["let contentHeight = 40","let hasHeader = true","let rowHeight: Int","if hasHeader {","   rowHeight = contentHeight + 50","} else {","   rowHeight = contentHeight + 20","}","\/\/ rowHeight is equal to 90"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O uso do operador condicional ternário no primeiro exemplo significa que "},{"type":"codeVoice","code":"rowHeight"},{"type":"text","text":" pode ser definido com o valor correto em uma única linha de código,"},{"type":"text","text":" "},{"type":"text","text":"que é mais conciso que o código usado no segundo exemplo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O operador condicional ternário fornece uma abreviação eficiente para decidir qual das duas expressões escolher. No entanto, use o operador condicional ternário com cuidado. Sua concisão pode levar a um código difícil de ler se usado em excesso. Evite combinar várias instâncias do operador condicional ternário em uma instrução composta."}]},{"anchor":"Nil-Coalescing-Operator","level":2,"type":"heading","text":"Nil-Coalescing Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nil-coalescing operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a ?? b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"unwraps an optional "},{"type":"codeVoice","code":"a"},{"type":"text","text":" if it contains a value,"},{"type":"text","text":" "},{"type":"text","text":"or returns a default value "},{"type":"codeVoice","code":"b"},{"type":"text","text":" if "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The expression "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is always of an optional type."},{"type":"text","text":" "},{"type":"text","text":"The expression "},{"type":"codeVoice","code":"b"},{"type":"text","text":" must match the type that’s stored inside "},{"type":"codeVoice","code":"a"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The nil-coalescing operator is shorthand for the code below:"}]},{"type":"codeListing","syntax":"swift","code":["a != nil ? a! : b"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above uses the ternary conditional operator and forced unwrapping ("},{"type":"codeVoice","code":"a!"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to access the value wrapped inside "},{"type":"codeVoice","code":"a"},{"type":"text","text":" when "},{"type":"codeVoice","code":"a"},{"type":"text","text":" isn’t "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and to return "},{"type":"codeVoice","code":"b"},{"type":"text","text":" otherwise."},{"type":"text","text":" "},{"type":"text","text":"The nil-coalescing operator provides a more elegant way to encapsulate"},{"type":"text","text":" "},{"type":"text","text":"this conditional checking and unwrapping in a concise and readable form."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" isn’t evaluated."},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"short-circuit evaluation"}]},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below uses the nil-coalescing operator to choose between"},{"type":"text","text":" "},{"type":"text","text":"a default color name and an optional user-defined color name:"}]},{"type":"codeListing","syntax":"swift","code":["let defaultColorName = \"red\"","var userDefinedColorName: String?   \/\/ defaults to nil","","var colorNameToUse = userDefinedColorName ?? defaultColorName","\/\/ userDefinedColorName is nil, so colorNameToUse is set to the default of \"red\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" variable is defined as an optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" is of an optional type,"},{"type":"text","text":" "},{"type":"text","text":"you can use the nil-coalescing operator to consider its value."},{"type":"text","text":" "},{"type":"text","text":"In the example above, the operator is used to determine"},{"type":"text","text":" "},{"type":"text","text":"an initial value for a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"colorNameToUse"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the expression "},{"type":"codeVoice","code":"userDefinedColorName ?? defaultColorName"},{"type":"text","text":" returns"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"defaultColorName"},{"type":"text","text":", or "},{"type":"codeVoice","code":"\"red\""},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you assign a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value to "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" "},{"type":"text","text":"and perform the nil-coalescing operator check again,"},{"type":"text","text":" "},{"type":"text","text":"the value wrapped inside "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" is used instead of the default:"}]},{"type":"codeListing","syntax":"swift","code":["userDefinedColorName = \"green\"","colorNameToUse = userDefinedColorName ?? defaultColorName","\/\/ userDefinedColorName isn't nil, so colorNameToUse is set to \"green\""]},{"anchor":"Operadores-de-Intervalo","level":2,"type":"heading","text":"Operadores de Intervalo"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O Swift possuí diversos "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operadores de intervalo"}]},{"type":"text","text":", que são maneiras mais simples de se expressar um intervalo de valores."}]},{"anchor":"Operador-de-Intervalo-Fechado","level":3,"type":"heading","text":"Operador de Intervalo Fechado"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador de intervalo fechado"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a...b"},{"type":"text","text":") estabelece um intervalo que vai de "},{"type":"codeVoice","code":"a"},{"type":"text","text":" até "},{"type":"codeVoice","code":"b"},{"type":"text","text":", incluindo os próprios valores de "},{"type":"codeVoice","code":"a"},{"type":"text","text":" e "},{"type":"codeVoice","code":"b"},{"type":"text","text":". O valor de "},{"type":"codeVoice","code":"a"},{"type":"text","text":" não pode ser maior que o valor de "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O operador de intervalo fechado pode ser útil quando se deve iterar sobre um intervalo em que você quer que todos os valores sejam utilizados, assim como em um laço "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["for index in 1...5 {","   print(\"\\(index) times 5 is \\(index * 5)\")","}","\/\/ 1 times 5 is 5","\/\/ 2 times 5 is 10","\/\/ 3 times 5 is 15","\/\/ 4 times 5 is 20","\/\/ 5 times 5 is 25"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para saber mais sobre laços "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":", veja em "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"anchor":"Operador-de-intervalo-semiaberto","level":3,"type":"heading","text":"Operador de intervalo semiaberto"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador de intervalo semiaberto"}]},{"type":"text","text":" "},{"type":"text","text":"define o intervalo que percorre de ‘a’ até ‘b’,"},{"type":"text","text":" "},{"type":"text","text":"mas não inclui ‘b’."},{"type":"text","text":" "},{"type":"text","text":"É definido como semiabeto"},{"type":"text","text":" "},{"type":"text","text":"pois contém seu primeiro valor, mas não seu valor final."},{"type":"text","text":" "},{"type":"text","text":"Assim como o operador de intervalo fechado,"},{"type":"text","text":" "},{"type":"text","text":"o valor de ‘a’ não deve ser maior que ‘b’."},{"type":"text","text":" "},{"type":"text","text":"Se o valor de ‘a’ é igual a ‘b’."},{"type":"text","text":" "},{"type":"text","text":"então o intervalo resultante será vazio."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Intervalos semiabertos são particularmente úteis quando você trabalha com"},{"type":"text","text":" "},{"type":"text","text":"listas baseadas em zero como os "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arrays"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"onde é útil contar até (mas sem incluir) o comprimento da lista:"}]},{"type":"codeListing","syntax":"swift","code":["let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]","let count = names.count","for i in 0..<count {","   print(\"Person \\(i + 1) is called \\(names[i])\")","}","\/\/ Person 1 is called Anna","\/\/ Person 2 is called Alex","\/\/ Person 3 is called Brian","\/\/ Person 4 is called Jack"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note que o "},{"type":"emphasis","inlineContent":[{"type":"text","text":"array"}]},{"type":"text","text":" contém quatro itens,"},{"type":"text","text":" "},{"type":"text","text":"mas ‘0..<count’ somente conta até ‘3’"},{"type":"text","text":" "},{"type":"text","text":"(o índice do último item no "},{"type":"emphasis","inlineContent":[{"type":"text","text":"array"}]},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"pois é um intervalo semiaberto."},{"type":"text","text":" "},{"type":"text","text":"Para saber mais sobre "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arrays"}]},{"type":"text","text":", veja: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays"},{"type":"text","text":"."}]},{"anchor":"Intervalos-unilaterais","level":3,"type":"heading","text":"Intervalos unilaterais"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O operador de intervalo fechado"},{"type":"text","text":" "},{"type":"text","text":"tem uma forma alternativa para intervalos que continuam"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"o mais longe possível em uma direção —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo,"},{"type":"text","text":" "},{"type":"text","text":"um intervalo que inclui todos os elementos de um array"},{"type":"text","text":" "},{"type":"text","text":"do index 2 até o fim do array."},{"type":"text","text":" "},{"type":"text","text":"Nesses casos, você pode omitir o valor"},{"type":"text","text":" "},{"type":"text","text":"de um lado do operador de intervalo."},{"type":"text","text":" "},{"type":"text","text":"Esse tipo de intervalo é chamado de "},{"type":"emphasis","inlineContent":[{"type":"text","text":"intervalo unilateral"}]},{"type":"text","text":" (one-sided range)"},{"type":"text","text":" "},{"type":"text","text":"porque o operador possui valor em apenas um lado."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo:"}]},{"type":"codeListing","syntax":"swift","code":["for name in names[2...] {","    print(name)","}","\/\/ Brian","\/\/ Jack","","for name in names[...2] {","    print(name)","}","\/\/ Anna","\/\/ Alex","\/\/ Brian"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O intervalo meio-aberto também tem"},{"type":"text","text":" "},{"type":"text","text":"uma forma unilateral que é escrita"},{"type":"text","text":" "},{"type":"text","text":"com apenas seu valor final."},{"type":"text","text":" "},{"type":"text","text":"Da mesma forma que se inclui um valor em ambos os lados,"},{"type":"text","text":" "},{"type":"text","text":"o valor final não é parte do intervalo."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo:"}]},{"type":"codeListing","syntax":"swift","code":["for name in names[..<2] {","    print(name)","}","\/\/ Anna","\/\/ Alex"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Intervalos unilaterais podem ser usados em outros contextos,"},{"type":"text","text":" "},{"type":"text","text":"não apenas em subscritos."},{"type":"text","text":" "},{"type":"text","text":"Você não pode iterar sobre um intervalo unilateral"},{"type":"text","text":" "},{"type":"text","text":"que omite o primeiro valor,"},{"type":"text","text":" "},{"type":"text","text":"pois não é claro onde a iteração deve iniciar."},{"type":"text","text":" "},{"type":"text","text":"Voce "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pode"}]},{"type":"text","text":" iterar sobre um intervalo unilateral que omite seu valor final;"},{"type":"text","text":" "},{"type":"text","text":"entretanto, por conta do intervalo continuar indefinidamente,"},{"type":"text","text":" "},{"type":"text","text":"certifique-se de adicionar uma condição explícita para finalizar o loop."},{"type":"text","text":" "},{"type":"text","text":"Voce pode também checar se um intervalo unilateral contém um valor particular,"},{"type":"text","text":" "},{"type":"text","text":"como mostrado no código abaixo."}]},{"type":"codeListing","syntax":"swift","code":["let range = ...5","range.contains(7)   \/\/ false","range.contains(4)   \/\/ true","range.contains(-1)  \/\/ true"]},{"anchor":"Operadores-Lógicos","level":2,"type":"heading","text":"Operadores Lógicos"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Operadores lógicos’"}]},{"type":"text","text":" modificam ou combinam"},{"type":"text","text":" "},{"type":"text","text":"os valores lógicos Booleanos "},{"type":"codeVoice","code":"true"},{"type":"text","text":" e "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O Swift suporta os três operadores lógicos padrão encontrados em linguagens baseadas em C:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lógica NÃO ("},{"type":"codeVoice","code":"!a"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lógica E ("},{"type":"codeVoice","code":"a && b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lógica OU ("},{"type":"codeVoice","code":"a || b"},{"type":"text","text":")"}]}]}]},{"anchor":"Logical-NOT-Operator","level":3,"type":"heading","text":"Logical NOT Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operador lógico NOT"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"!a"},{"type":"text","text":") iverte o valor booleano para que "},{"type":"codeVoice","code":"verdadeiro"},{"type":"text","text":" vire "},{"type":"codeVoice","code":"falso"},{"type":"text","text":" e "},{"type":"codeVoice","code":"falso"},{"type":"text","text":" vire "},{"type":"codeVoice","code":"verdadeiro"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"O operador lógico NOT é um operador prefixo,"},{"type":"text","text":" "},{"type":"text","text":"e aparece imediatamente antes do valor em que opera,"},{"type":"text","text":" "},{"type":"text","text":"sem nenhum espaço em branco."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ele pode ser lido como “not "},{"type":"codeVoice","code":"a"},{"type":"text","text":"”, como no exemplo a seguir:"}]},{"type":"codeListing","syntax":"swift","code":["let allowedEntry = false","if !allowedEntry {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"ACCESS DENIED\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A frase "},{"type":"codeVoice","code":"if !entradaPermitida"},{"type":"text","text":" pode ser lida como “if entrada não permitida.”"},{"type":"text","text":" "},{"type":"text","text":"A linha só é executada se “entrada não permitida” for verdadeira;"},{"type":"text","text":" "},{"type":"text","text":"isto é, if "},{"type":"codeVoice","code":"entradaPermitida"},{"type":"text","text":" é "},{"type":"codeVoice","code":"falsa"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Como neste exemplo,"},{"type":"text","text":" "},{"type":"text","text":"escolha cuidadosa de nomes de constantes e variáveis booleanas"},{"type":"text","text":" "},{"type":"text","text":"pode ajudar a manter o código legível e conciso,"},{"type":"text","text":" "},{"type":"text","text":"evitando duplas negativas ou declarações lógicas confusas."}]},{"anchor":"Operador-Lógico-AND","level":3,"type":"heading","text":"Operador Lógico AND"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Operador Lógico AND"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a && b"},{"type":"text","text":") cria expressões lógicas"},{"type":"text","text":" "},{"type":"text","text":"onde ambos os valores devem ser "},{"type":"codeVoice","code":"true"},{"type":"text","text":" para que a expressão geral também seja "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se um dos valores for "},{"type":"codeVoice","code":"falso"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a expressao geral será tida como "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Na verdade, se o "},{"type":"emphasis","inlineContent":[{"type":"text","text":"primeiro"}]},{"type":"text","text":" valor for "},{"type":"codeVoice","code":"falso"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"o segundo valor nem será avaliado,"},{"type":"text","text":" "},{"type":"text","text":"porque não é possível que a expressão geral seja igual a "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Isso é conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"avaliação de curto-circuito"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Este exemplo considera dois valores "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" "},{"type":"text","text":"e só permite acesso se ambos os valores forem "},{"type":"codeVoice","code":"true"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let enteredDoorCode = true","let passedRetinaScan  = false","if enteredDoorCode && passedRetinaScan  {","   print(\"Welcome!\")","} else {","   print(\"ACESS DENIED\")","}","\/\/ Prints \"ACESS DENIED\""]},{"anchor":"Operador-Lógico-OR","level":3,"type":"heading","text":"Operador Lógico OR"},{"type":"paragraph","inlineContent":[{"type":"text","text":"O "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Operador Lógico OR"}]},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a || b"},{"type":"text","text":") é um operador infixo feito de dois caracteres pipe adjacentes."},{"type":"text","text":" "},{"type":"text","text":"Você o usa para criar expressões lógicas nas quais"},{"type":"text","text":" "},{"type":"text","text":"basta "},{"type":"emphasis","inlineContent":[{"type":"text","text":"um"}]},{"type":"text","text":" dos dois valores deve ser "},{"type":"codeVoice","code":"true"},{"type":"text","text":" "},{"type":"text","text":"para que a expressão geral seja "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Como o operador lógico AND acima,"},{"type":"text","text":" "},{"type":"text","text":"o operador lógico OR usa avaliação de curto-circuito para considerar suas expressões."},{"type":"text","text":" "},{"type":"text","text":"Se o lado esquerdo de uma expressão lógica OR for “true”,"},{"type":"text","text":" "},{"type":"text","text":"o lado direito não é avaliado,"},{"type":"text","text":" "},{"type":"text","text":"porque não pode alterar o resultado da expressão geral."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"No exemplo abaixo,"},{"type":"text","text":" "},{"type":"text","text":"o primeiro valor "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" ("},{"type":"codeVoice","code":"hasDoorKey"},{"type":"text","text":") é "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"mas o segundo valor ("},{"type":"codeVoice","code":"knowsOverridePassword"},{"type":"text","text":") é "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Como um valor é "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a expressão geral também é avaliada como "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o acesso é permitido:"}]},{"type":"codeListing","syntax":"swift","code":["let hasDoorKey = false","let knowsOverridePassword = true","if hasDoorKey || knowsOverridePassword {","   print(\"Welcome!\")","} else {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""]},{"anchor":"Combinando-Operadores-Lógicos","level":3,"type":"heading","text":"Combinando Operadores Lógicos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Você pode combinar vários operadores lógicos para criar expressões compostas mais longas:"}]},{"type":"codeListing","syntax":"swift","code":["if enteredDoorCode && passedRetinaScan || hasDoorKey || knowsOverridePassword {","   print(\"Welcome!\")","} else {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Este exemplo usa vários operadores "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" e "},{"type":"codeVoice","code":"||"},{"type":"text","text":" para criar uma expressão composta mais longa."},{"type":"text","text":" "},{"type":"text","text":"No entanto, os operadores "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" e "},{"type":"codeVoice","code":"||"},{"type":"text","text":" ainda operam sobre apenas dois valores,"},{"type":"text","text":" "},{"type":"text","text":"então, na verdade, são três expressões menores encadeadas."},{"type":"text","text":" "},{"type":"text","text":"O exemplo pode ser lido como:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Se inserimos o código de porta correto e passarmos no exame de retina,"},{"type":"text","text":" "},{"type":"text","text":"ou se tivermos uma chave de porta válida,"},{"type":"text","text":" "},{"type":"text","text":"ou se soubermos a senha de substituição de emergência,"},{"type":"text","text":" "},{"type":"text","text":"então permita o acesso."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Com base nos valores de "},{"type":"codeVoice","code":"enteredDoorCode"},{"type":"text","text":", "},{"type":"codeVoice","code":"passedRetinaScan"},{"type":"text","text":" e "},{"type":"codeVoice","code":"hasDoorKey"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as duas primeiras subexpressões são "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"No entanto, a senha de substituição de emergência é conhecida,"},{"type":"text","text":" "},{"type":"text","text":"então a expressão composta geral ainda é avaliada como "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Os operadores lógicos do Swift "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" e "},{"type":"codeVoice","code":"||"},{"type":"text","text":" são associativos à esquerda,"},{"type":"text","text":" "},{"type":"text","text":"significando que expressões compostas com vários operadores lógicos"},{"type":"text","text":" "},{"type":"text","text":"avaliam primeiro a subexpressão mais à esquerda."}]}],"type":"aside","name":"Note"},{"anchor":"Parênteses-explícitos","level":3,"type":"heading","text":"Parênteses explícitos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Às vezes é útil incluir parênteses quando eles não são estritamente necessários,"},{"type":"text","text":" "},{"type":"text","text":"para tornar a intenção de uma expressão complexa mais fácil de ler."},{"type":"text","text":" "},{"type":"text","text":"No exemplo de acesso à porta acima,"},{"type":"text","text":" "},{"type":"text","text":"é útil adicionar parênteses em torno da primeira parte da expressão compostas"},{"type":"text","text":" "},{"type":"text","text":"para deixar claro sua intenção:"}]},{"type":"codeListing","syntax":"swift","code":["if (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {","   print(\"Welcome!\")","} else {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Os parênteses deixam claro que os dois primeiros valores"},{"type":"text","text":" "},{"type":"text","text":"são considerados como parte de um estado possível separado na lógica geral."},{"type":"text","text":" "},{"type":"text","text":"A saída da expressão composta não muda,"},{"type":"text","text":" "},{"type":"text","text":"mas a intenção geral é mais clara para o leitor."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"A legibilidade é sempre preferível à brevidade;"}]},{"type":"text","text":" "},{"type":"text","text":"use parênteses onde eles ajudam a tornar suas intenções claras."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/basicoperators"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Operadores básicos","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc:OperadoresAvançados#Operadores-de-estouro":{"title":"doc:OperadoresAvançados#Operadores-de-estouro","titleInlineContent":[{"type":"text","text":"doc:OperadoresAvançados#Operadores-de-estouro"}],"type":"link","identifier":"doc:OperadoresAvançados#Operadores-de-estouro","url":"doc:OperadoresAvançados#Operadores-de-estouro"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Overflow-Operators":{"abstract":[],"title":"Overflow Operators","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Overflow-Operators"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Arrays":{"abstract":[],"title":"Arrays","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Arrays"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"https://developer.apple.com/documentation/swift/operator_declarations":{"title":"Operator Declarations","titleInlineContent":[{"type":"text","text":"Operator Declarations"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","url":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc:OperadoresAvançados":{"title":"doc:OperadoresAvançados","titleInlineContent":[{"type":"text","text":"doc:OperadoresAvançados"}],"type":"link","identifier":"doc:OperadoresAvançados","url":"doc:OperadoresAvançados"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"remainderInteger":{"alt":null,"type":"image","identifier":"remainderInteger","variants":[{"url":"\/images\/remainderInteger@2x.png","traits":["2x","light"]},{"url":"\/images\/remainderInteger~dark@2x.png","traits":["2x","dark"]}]}}}