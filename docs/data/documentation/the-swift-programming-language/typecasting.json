{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type casting in Swift is implemented with the "},{"type":"codeVoice","code":"is"},{"type":"text","text":" and "},{"type":"codeVoice","code":"as"},{"type":"text","text":" operators."},{"type":"text","text":" "},{"type":"text","text":"These two operators provide a simple and expressive way"},{"type":"text","text":" "},{"type":"text","text":"to check the type of a value or cast a value to a different type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use type casting to check whether a type conforms to a protocol,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance"},{"type":"text","text":"."}]},{"anchor":"Defining-a-Class-Hierarchy-for-Type-Casting","level":2,"type":"heading","text":"Defining a Class Hierarchy for Type Casting"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use type casting with a hierarchy of classes and subclasses"},{"type":"text","text":" "},{"type":"text","text":"to check the type of a particular class instance"},{"type":"text","text":" "},{"type":"text","text":"and to cast that instance to another class within the same hierarchy."},{"type":"text","text":" "},{"type":"text","text":"The three code snippets below define a hierarchy of classes"},{"type":"text","text":" "},{"type":"text","text":"and an array containing instances of those classes,"},{"type":"text","text":" "},{"type":"text","text":"for use in an example of type casting."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first snippet defines a new base class called "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This class provides basic functionality for any kind of item that appears"},{"type":"text","text":" "},{"type":"text","text":"in a digital media library."},{"type":"text","text":" "},{"type":"text","text":"Specifically, it declares a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and an "},{"type":"codeVoice","code":"init name"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"(It’s assumed that all media items, including all movies and songs, will have a name.)"}]},{"type":"codeListing","syntax":"swift","code":["class MediaItem {","   var name: String","   init(name: String) {","      self.name = name","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next snippet defines two subclasses of "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The first subclass, "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":", encapsulates additional information about a movie or film."},{"type":"text","text":" "},{"type":"text","text":"It adds a "},{"type":"codeVoice","code":"director"},{"type":"text","text":" property on top of the base "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":" class,"},{"type":"text","text":" "},{"type":"text","text":"with a corresponding initializer."},{"type":"text","text":" "},{"type":"text","text":"The second subclass, "},{"type":"codeVoice","code":"Song"},{"type":"text","text":", adds an "},{"type":"codeVoice","code":"artist"},{"type":"text","text":" property and initializer"},{"type":"text","text":" "},{"type":"text","text":"on top of the base class:"}]},{"type":"codeListing","syntax":"swift","code":["class Movie: MediaItem {","   var director: String","   init(name: String, director: String) {","      self.director = director","      super.init(name: name)","   }","}","","class Song: MediaItem {","   var artist: String","   init(name: String, artist: String) {","      self.artist = artist","      super.init(name: name)","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final snippet creates a constant array called "},{"type":"codeVoice","code":"library"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which contains two "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" instances and three "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"library"},{"type":"text","text":" array is inferred"},{"type":"text","text":" "},{"type":"text","text":"by initializing it with the contents of an array literal."},{"type":"text","text":" "},{"type":"text","text":"Swift’s type checker is able to deduce that "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" have"},{"type":"text","text":" "},{"type":"text","text":"a common superclass of "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so it infers a type of "},{"type":"codeVoice","code":"[MediaItem]"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"library"},{"type":"text","text":" array:"}]},{"type":"codeListing","syntax":"swift","code":["let library = [","   Movie(name: \"Casablanca\", director: \"Michael Curtiz\"),","   Song(name: \"Blue Suede Shoes\", artist: \"Elvis Presley\"),","   Movie(name: \"Citizen Kane\", director: \"Orson Welles\"),","   Song(name: \"The One And Only\", artist: \"Chesney Hawkes\"),","   Song(name: \"Never Gonna Give You Up\", artist: \"Rick Astley\")","]","\/\/ the type of \"library\" is inferred to be [MediaItem]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The items stored in "},{"type":"codeVoice","code":"library"},{"type":"text","text":" are still "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"However, if you iterate over the contents of this array,"},{"type":"text","text":" "},{"type":"text","text":"the items you receive back are typed as "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and not as "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Song"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In order to work with them as their native type,"},{"type":"text","text":" "},{"type":"text","text":"you need to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"check"}]},{"type":"text","text":" their type,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"downcast"}]},{"type":"text","text":" them to a different type,"},{"type":"text","text":" "},{"type":"text","text":"as described below."}]},{"anchor":"Checking-Type","level":2,"type":"heading","text":"Checking Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type check operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"is"},{"type":"text","text":") to check"},{"type":"text","text":" "},{"type":"text","text":"whether an instance is of a certain subclass type."},{"type":"text","text":" "},{"type":"text","text":"The type check operator returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the instance is of that subclass type"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" if it’s not."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines two variables, "},{"type":"codeVoice","code":"movieCount"},{"type":"text","text":" and "},{"type":"codeVoice","code":"songCount"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which count the number of "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances in the "},{"type":"codeVoice","code":"library"},{"type":"text","text":" array:"}]},{"type":"codeListing","syntax":"swift","code":["var movieCount = 0","var songCount = 0","","for item in library {","   if item is Movie {","      movieCount += 1","   } else if item is Song {","      songCount += 1","   }","}","","print(\"Media library contains \\(movieCount) movies and \\(songCount) songs\")","\/\/ Prints \"Media library contains 2 movies and 3 songs\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example iterates through all items in the "},{"type":"codeVoice","code":"library"},{"type":"text","text":" array."},{"type":"text","text":" "},{"type":"text","text":"On each pass, the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop sets the "},{"type":"codeVoice","code":"item"},{"type":"text","text":" constant"},{"type":"text","text":" "},{"type":"text","text":"to the next "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":" in the array."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"item is Movie"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the current "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":" "},{"type":"text","text":"is a "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" instance and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" if it’s not."},{"type":"text","text":" "},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"item is Song"},{"type":"text","text":" checks whether the item is a "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"At the end of the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, the values of "},{"type":"codeVoice","code":"movieCount"},{"type":"text","text":" and "},{"type":"codeVoice","code":"songCount"},{"type":"text","text":" "},{"type":"text","text":"contain a count of how many "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":" instances were found of each type."}]},{"anchor":"Downcasting","level":2,"type":"heading","text":"Downcasting"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A constant or variable of a certain class type may actually refer to"},{"type":"text","text":" "},{"type":"text","text":"an instance of a subclass behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"Where you believe this is the case,"},{"type":"text","text":" "},{"type":"text","text":"you can try to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"downcast"}]},{"type":"text","text":" to the subclass type"},{"type":"text","text":" "},{"type":"text","text":"with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type cast operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"as?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as!"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because downcasting can fail,"},{"type":"text","text":" "},{"type":"text","text":"the type cast operator comes in two different forms."},{"type":"text","text":" "},{"type":"text","text":"The conditional form, "},{"type":"codeVoice","code":"as?"},{"type":"text","text":", returns an optional value of the type you are trying to downcast to."},{"type":"text","text":" "},{"type":"text","text":"The forced form, "},{"type":"codeVoice","code":"as!"},{"type":"text","text":", attempts the downcast and force-unwraps the result"},{"type":"text","text":" "},{"type":"text","text":"as a single compound action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the conditional form of the type cast operator ("},{"type":"codeVoice","code":"as?"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"when you aren’t sure if the downcast will succeed."},{"type":"text","text":" "},{"type":"text","text":"This form of the operator will always return an optional value,"},{"type":"text","text":" "},{"type":"text","text":"and the value will be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the downcast was not possible."},{"type":"text","text":" "},{"type":"text","text":"This enables you to check for a successful downcast."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the forced form of the type cast operator ("},{"type":"codeVoice","code":"as!"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"only when you are sure that the downcast will always succeed."},{"type":"text","text":" "},{"type":"text","text":"This form of the operator will trigger a runtime error"},{"type":"text","text":" "},{"type":"text","text":"if you try to downcast to an incorrect class type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below iterates over each "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":" in "},{"type":"codeVoice","code":"library"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and prints an appropriate description for each item."},{"type":"text","text":" "},{"type":"text","text":"To do this, it needs to access each item as a true "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Song"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and not just as a "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is necessary in order for it to be able to access"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"director"},{"type":"text","text":" or "},{"type":"codeVoice","code":"artist"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" "},{"type":"text","text":"for use in the description."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, each item in the array might be a "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or it might be a "},{"type":"codeVoice","code":"Song"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You don’t know in advance which actual class to use for each item,"},{"type":"text","text":" "},{"type":"text","text":"and so it’s appropriate to use the conditional form of the type cast operator ("},{"type":"codeVoice","code":"as?"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to check the downcast each time through the loop:"}]},{"type":"codeListing","syntax":"swift","code":["for item in library {","   if let movie = item as? Movie {","      print(\"Movie: \\(movie.name), dir. \\(movie.director)\")","   } else if let song = item as? Song {","      print(\"Song: \\(song.name), by \\(song.artist)\")","   }","}","","\/\/ Movie: Casablanca, dir. Michael Curtiz","\/\/ Song: Blue Suede Shoes, by Elvis Presley","\/\/ Movie: Citizen Kane, dir. Orson Welles","\/\/ Song: The One And Only, by Chesney Hawkes","\/\/ Song: Never Gonna Give You Up, by Rick Astley"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example starts by trying to downcast the current "},{"type":"codeVoice","code":"item"},{"type":"text","text":" as a "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"item"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":" instance, it’s possible that it "},{"type":"emphasis","inlineContent":[{"type":"text","text":"might"}]},{"type":"text","text":" be a "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"equally, it’s also possible that it might be a "},{"type":"codeVoice","code":"Song"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or even just a base "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because of this uncertainty, the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" form of the type cast operator returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"when attempting to downcast to a subclass type."},{"type":"text","text":" "},{"type":"text","text":"The result of "},{"type":"codeVoice","code":"item as? Movie"},{"type":"text","text":" is of type "},{"type":"codeVoice","code":"Movie?"},{"type":"text","text":", or “optional "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":"”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Downcasting to "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" fails when applied to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances in the library array."},{"type":"text","text":" "},{"type":"text","text":"To cope with this, the example above uses optional binding"},{"type":"text","text":" "},{"type":"text","text":"to check whether the optional "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" actually contains a value"},{"type":"text","text":" "},{"type":"text","text":"(that is, to find out whether the downcast succeeded.)"},{"type":"text","text":" "},{"type":"text","text":"This optional binding is written “"},{"type":"codeVoice","code":"if let movie = item as? Movie"},{"type":"text","text":"”,"},{"type":"text","text":" "},{"type":"text","text":"which can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Try to access "},{"type":"codeVoice","code":"item"},{"type":"text","text":" as a "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If this is successful,"},{"type":"text","text":" "},{"type":"text","text":"set a new temporary constant called "},{"type":"codeVoice","code":"movie"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the value stored in the returned optional "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the downcasting succeeds, the properties of "},{"type":"codeVoice","code":"movie"},{"type":"text","text":" are then used"},{"type":"text","text":" "},{"type":"text","text":"to print a description for that "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" instance, including the name of its "},{"type":"codeVoice","code":"director"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A similar principle is used to check for "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances,"},{"type":"text","text":" "},{"type":"text","text":"and to print an appropriate description (including "},{"type":"codeVoice","code":"artist"},{"type":"text","text":" name)"},{"type":"text","text":" "},{"type":"text","text":"whenever a "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" is found in the library."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Casting doesn’t actually modify the instance or change its values."},{"type":"text","text":" "},{"type":"text","text":"The underlying instance remains the same; it’s simply treated and accessed"},{"type":"text","text":" "},{"type":"text","text":"as an instance of the type to which it has been cast."}]}],"type":"aside","name":"Note"},{"anchor":"Type-Casting-for-Any-and-AnyObject","level":2,"type":"heading","text":"Type Casting for Any and AnyObject"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides two special types for working with nonspecific types:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Any"},{"type":"text","text":" can represent an instance of any type at all, including function types."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" can represent an instance of any class type."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" only when you explicitly need"},{"type":"text","text":" "},{"type":"text","text":"the behavior and capabilities they provide."},{"type":"text","text":" "},{"type":"text","text":"It’s always better to be specific about the types you expect to work with in your code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of using "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" to work with a mix of different types,"},{"type":"text","text":" "},{"type":"text","text":"including function types and nonclass types."},{"type":"text","text":" "},{"type":"text","text":"The example creates an array called "},{"type":"codeVoice","code":"things"},{"type":"text","text":", which can store values of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var things: [Any] = []","","things.append(0)","things.append(0.0)","things.append(42)","things.append(3.14159)","things.append(\"hello\")","things.append((3.0, 5.0))","things.append(Movie(name: \"Ghostbusters\", director: \"Ivan Reitman\"))","things.append({ (name: String) -> String in \"Hello, \\(name)\" })"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"things"},{"type":"text","text":" array contains"},{"type":"text","text":" "},{"type":"text","text":"two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values, two "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" values, a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"a tuple of type "},{"type":"codeVoice","code":"(Double, Double)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the movie “Ghostbusters”,"},{"type":"text","text":" "},{"type":"text","text":"and a closure expression that takes a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"and returns another "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To discover the specific type of a constant or variable"},{"type":"text","text":" "},{"type":"text","text":"that’s known only to be of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" or "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can use an "},{"type":"codeVoice","code":"is"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as"},{"type":"text","text":" pattern in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s cases."},{"type":"text","text":" "},{"type":"text","text":"The example below iterates over the items in the "},{"type":"codeVoice","code":"things"},{"type":"text","text":" array"},{"type":"text","text":" "},{"type":"text","text":"and queries the type of each item with a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Several of the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s cases bind their matched value to"},{"type":"text","text":" "},{"type":"text","text":"a constant of the specified type to enable its value to be printed:"}]},{"type":"codeListing","syntax":"swift","code":["for thing in things {","   switch thing {","      case 0 as Int:","         print(\"zero as an Int\")","      case 0 as Double:","         print(\"zero as a Double\")","      case let someInt as Int:","         print(\"an integer value of \\(someInt)\")","      case let someDouble as Double where someDouble > 0:","         print(\"a positive double value of \\(someDouble)\")","      case is Double:","         print(\"some other double value that I don't want to print\")","      case let someString as String:","         print(\"a string value of \\\"\\(someString)\\\"\")","      case let (x, y) as (Double, Double):","         print(\"an (x, y) point at \\(x), \\(y)\")","      case let movie as Movie:","         print(\"a movie called \\(movie.name), dir. \\(movie.director)\")","      case let stringConverter as (String) -> String:","         print(stringConverter(\"Michael\"))","      default:","         print(\"something else\")","   }","}","","\/\/ zero as an Int","\/\/ zero as a Double","\/\/ an integer value of 42","\/\/ a positive double value of 3.14159","\/\/ a string value of \"hello\"","\/\/ an (x, y) point at 3.0, 5.0","\/\/ a movie called Ghostbusters, dir. Ivan Reitman","\/\/ Hello, Michael"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" type represents values of any type, including optional types."},{"type":"text","text":" "},{"type":"text","text":"Swift gives you a warning if you use an optional value"},{"type":"text","text":" "},{"type":"text","text":"where a value of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" is expected."},{"type":"text","text":" "},{"type":"text","text":"If you really do need to use an optional value as an "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator to explicitly cast the optional to "},{"type":"codeVoice","code":"Any"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as shown below."}]},{"type":"codeListing","syntax":"swift","code":["let optionalNumber: Int? = 3","things.append(optionalNumber)        \/\/ Warning","things.append(optionalNumber as Any) \/\/ No warning"]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/typecasting"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Type Casting","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensões","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensões"}]},{"type":"text","text":" adicionam novas funcionalidades a uma classe, estrutura, enumeração ou tipo de protocolo existente. Isso inclui a capacidade de estender tipos para os quais você não tem acesso ao código-fonte original (conhecido como "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modelagem retroativa"}]},{"type":"text","text":"). As extensões são semelhantes às categorias em Objective-C. (Ao contrário das categorias de Objective-C, as extensões Swift não têm nomes.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings e Characters","abstract":[{"type":"text","text":"Uma "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" é uma série de caracteres,"},{"type":"text","text":" "},{"type":"text","text":"tal como "},{"type":"codeVoice","code":"\"olá, mundo\""},{"type":"text","text":" ou "},{"type":"codeVoice","code":"\"albatroz\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Strings em Swift são representadas pelo tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O conteúdo de uma "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pode ser acessado de várias maneiras,"},{"type":"text","text":" "},{"type":"text","text":"incluindo como uma coleção de valores "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concorrência","abstract":[{"type":"text","text":"Swift tem suporte por padrão para escrita de código assíncrono e paralelo"},{"type":"text","text":" "},{"type":"text","text":"de forma estruturada."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código assíncrono"}]},{"type":"text","text":" pode ser suspenso e retomado posteriormente,"},{"type":"text","text":" "},{"type":"text","text":"embora apenas uma parte do programa seja executada por vez."},{"type":"text","text":" "},{"type":"text","text":"Suspender e retomar código em seu programa"},{"type":"text","text":" "},{"type":"text","text":"permite que ele continue a progredir"},{"type":"text","text":" "},{"type":"text","text":"em operações de curto prazo, como atualizar a interface do usuário,"},{"type":"text","text":" "},{"type":"text","text":"enquanto continua a trabalhar em operações de longa duração"},{"type":"text","text":" "},{"type":"text","text":"como buscar dados pela rede ou analisar arquivos."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Código paralelo"}]},{"type":"text","text":" significa vários pedaços de código executando simultaneamente —"},{"type":"text","text":" "},{"type":"text","text":"por exemplo, um computador com um processador de quatro núcleos"},{"type":"text","text":" "},{"type":"text","text":"pode executar quatro pedaços de código ao mesmo tempo,"},{"type":"text","text":" "},{"type":"text","text":"com cada núcleo realizando uma das tarefas."},{"type":"text","text":" "},{"type":"text","text":"Um programa que usa código paralelo e assíncrono"},{"type":"text","text":" "},{"type":"text","text":"realiza várias operações ao mesmo tempo;"},{"type":"text","text":" "},{"type":"text","text":"suspende as operações que estão à espera de um sistema externo,"},{"type":"text","text":" "},{"type":"text","text":"e torna mais fácil escrever esse código de maneira segura para a memória ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"memory-safe"}]},{"type":"text","text":")."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Tipos de Coleção","abstract":[{"type":"text","text":"Swift oferece três "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos de coleção"}]},{"type":"text","text":" primários, conhecidos como arrays, sets e dicionários, para armazenar coleções de valores. Arrays são coleções ordenadas de valores. Sets são coleções não ordenadas de valores únicos. Os dicionários são coleções não ordenadas de associações chave-valor."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Tipos Aninhados","abstract":[{"type":"text","text":"Enumerações são frequentemente criadas para dar suporte a uma funcionalidade especifica de uma classe ou estrutura."},{"type":"text","text":" "},{"type":"text","text":"Similarmente, pode ser conveniente definir classes e estruturas de utilidade"},{"type":"text","text":" "},{"type":"text","text":"puramente para o uso dentro de um contexto de um tipo mais complexo."},{"type":"text","text":" "},{"type":"text","text":"Para fazer isso, o Swift permite que você defina "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tipos aninhados"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nos quais você aninha enumerações, classes e estruturas de suporte"},{"type":"text","text":" "},{"type":"text","text":"dentro da definição do tipo que elas suportam."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avançados","abstract":[{"type":"text","text":"Além dos operadores descritos no tópico "},{"type":"text","text":"doc:OperadoresBasicos"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a linguagem Swift oferece o tópico Operadores Avançados que fazem manipulação de valores mais complexa."},{"type":"text","text":" "},{"type":"text","text":"Lá são incluídos operadores bit a bit e operadores com deslocamento que estamos familiarizados em C e Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Operadores básicos","abstract":[{"type":"text","text":"Um operador é um símbolo ou frase que você pode usar para verificar, mudar ou combinar valores."},{"type":"text","text":" "},{"type":"text","text":"Por exemplo, o operador de adição ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") soma dois números,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"e o operador lógico E ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" - "},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combina dois valores booleanos,"},{"type":"text","text":" "},{"type":"text","text":"como em "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"O Básico","abstract":[{"type":"text","text":"Swift é uma linguagem de programação para desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS. Se você tem experiência em desenvolvimento em C ou Objective-C, muitas partes do Swift serão familiares para você."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Estruturas e Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Estruturas"}]},{"type":"text","text":" e "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" são construções flexíveis de propósito geral que se tornam os blocos de construção do código do seu programa. Você define propriedades e métodos para adicionar funcionalidade às suas estruturas e classes usando a mesma sintaxe usada para definir constantes, variáveis e funções."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"abstract":[],"title":"Checking for Protocol Conformance","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance"}}}